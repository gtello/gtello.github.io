<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gabriel Tello</title>
    <link>https://gtello.github.io/</link>
    <description>Recent content on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Thu, 24 Oct 2024 21:22:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Academy Machine</title>
      <link>https://gtello.github.io/writeups/academy/</link>
      <pubDate>Thu, 24 Oct 2024 21:22:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/academy/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.
<h2 id="executive-summary">Executive Summary</h2>
<p>A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.</p>
<p>This allowed total control of the server and access to confidential information. Multiple configuration and access control issues were detected that need to be corrected to improve the security of the machine and its services.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image1.png" alt="nmap result" />
</div>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian 10</td>
          <td style="text-align: left">192.168.138.128</td>
          <td style="text-align: left">21 (FTP), 22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that the FTP service on port 21 allowed anonymous login, so that was performed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image2.png" alt="ftp login" />
</div>
<center><em>Figure 2:</em> FTP login as anonymous user</center>
<p>An FTP connection was made through the <code>anonymous</code> account, which allowed access to a note left on the server.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image3.png" alt="developer note" />
</div>
<center><em>Figure 3:</em> Developer's note</center>
<p>It was observed that the developer left a note on the FTP server mentioning that they had to resort to using a SQL statement to create a new user for the academy’s website. The value in the <code>password</code> field was an MD5 hash, so we proceeded to crack the hash with hashcat.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image4.png" alt="hashcat result 1" />
    <img src="/images/posts/academy/image4_1.png" alt="hashcat result 2" />
</div>
<center><em>Figure 4:</em> hashcat result</center>
<p>The hash crack was successful, revealing that the password for the <code>HackerMentor</code> user is <code>junior01</code>. To proceed, the open port 80, suggesting a webpage was serving content from the machine, was analyzed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image5.png" alt="apache web server" />
</div>
<center><em>Figure 5:</em> Apache Web Server service</center>
<p>The default Apache webpage was found, confirming that this machine is hosting a web service. Brute force was performed on web directories.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image6.png" alt="wfuzz" />
</div>
<center><em>Figure 6:</em> Brute force on web directories with wfuzz</center>
<p>The web directories <code>/phpmyadmin</code> and <code>/monkey</code> were discovered.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image7.png" alt="academy portal" />
</div>
<center><em>Figure 7:</em> Academy login portal</center>
<p>The credentials discovered earlier were used, and login to the Monkey portal was achieved. Detailed inspection of this webpage revealed a student enrollment section allowing image uploads. An attack called <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">Unrestricted File Upload</a> was attempted to try executing PHP code on the web server and achieve a reverse shell.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image8.png" alt="php code" />
</div>
<center><em>Figure 8:</em> PHP code for reverse shell</center>
<p>This .php file was uploaded to the server, and as a test image upload had previously been performed, it was found that images are stored at <code>http://192.168.138.128/monkey/studentphoto/image.jpg</code>. Once the image was uploaded, the code was executed, and a connection with netcat on port 1234 was opened.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image9.png" alt="reverse shell connection" />
</div>
<center><em>Figure 9:</em> Reverse shell connection established</center>
<p>The exploit worked correctly, gaining access to the server as user <code>www-data</code>. To escalate privileges, the script <a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">LINpeas.sh</a> was used. For file transfer to the server, a basic HTTP server was set up with Python using the command <code>python3 -m http.server 80</code> to download the file from the server. The script was run to discover privilege escalation paths with the following findings.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image10.png" alt="mysql password" />
</div>
<center><em>Figure 10:</em> Plaintext password of MySQL database</center>
<p>Once the password was found, it was tried in conjunction with the known user on the academy’s web portal to connect to that user via SSH.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image11.png" alt="ssh session" />
</div>
<center><em>Figure 11:</em> SSH connection to hackermentor user</center>
<p>A flag and a bash script named <code>backup.sh</code> that backs up the academy&rsquo;s website files were found. The <code>ls -l</code> command shows that this script runs as an administrator user. Checking with <code>crontab</code> and <code>systemd</code>, it was not possible to determine if this script is automated, so <a href="https://github.com/DominicBreuker/pspy">pspy</a> was used for confirmation. This program monitors Linux processes without needing root permissions.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image12.png" alt="process monitoring" />
</div>
<center><em>Figure 12:</em> Process monitoring with pspy showing script execution</center>
<p>The script was observed running as the root user. Since the <code>hackermentor</code> user has permissions to edit this file, the script was modified to execute a reverse shell, and as it runs as root, root access to the machine was obtained through this.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image13.png" alt="backup.sh modified" />
</div>
<center><em>Figure 13:</em> Modified backup.sh</center>
<pre>

</pre>
<div style="text-align: center;">
  <img src="/images/posts/academy/image14.png" alt="root connection" />
</div>
<center><em>Figure 14:</em> Root user connection</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Used for network scanning and detection of open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td style="text-align: left">hashcat</td>
          <td style="text-align: left">Used to crack the MD5 hash obtained from the FTP server.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td style="text-align: left">pspy</td>
          <td style="text-align: left">Program used to monitor processes on Linux without needing root permissions.</td>
      </tr>
      <tr>
          <td style="text-align: left">LinPEAS</td>
          <td style="text-align: left">Script used to identify potential privilege escalation paths on the server.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>During this security analysis, several critical vulnerabilities were found on the Monkey machine. Initial access was gained through a misconfigured FTP service allowing anonymous logins, which gave access to sensitive files. User credentials were then discovered, allowing access to the web and remote code execution on the server. Lack of restrictions on file uploads and an elevated permissions script without proper protections enabled privilege escalation, leading to root access. The combination of poor permission management, insecure configurations, and the lack of robust authentication controls allowed the system to be fully compromised.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate these vulnerabilities, anonymous login on the FTP service must be disabled. Ensure passwords are never stored in plaintext and that hashes use stronger algorithms.
Regarding privilege escalation, review and restrict user permissions on critical scripts like <code>backup.sh</code>, preventing non-privileged users from modifying them. It is also recommended to perform continuous system monitoring with tools like pspy to detect anomalous activities in processes.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Eternal Machine (EternalBlue)</title>
      <link>https://gtello.github.io/writeups/eternalblue/</link>
      <pubDate>Fri, 18 Oct 2024 09:15:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/eternalblue/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format about a pentest performed on a Windows 7 machine.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;During the penetration test, it was discovered that the Eternal machine (Windows 7) was vulnerable to the EternalBlue exploit (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/cve-2017-0144&#34;&gt;CVE-2017-0144&lt;/a&gt;). This exploit allows an unauthenticated attacker to remotely execute arbitrary code and gain full control of the system. The vulnerability was used to compromise the Eternal machine, which allowed access to sensitive data and other systems on the network. This report details the exploitation process, findings, and recommendations to mitigate this vulnerability.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format about a pentest performed on a Windows 7 machine.
<h2 id="executive-summary">Executive Summary</h2>
<p>During the penetration test, it was discovered that the Eternal machine (Windows 7) was vulnerable to the EternalBlue exploit (<a href="https://nvd.nist.gov/vuln/detail/cve-2017-0144">CVE-2017-0144</a>). This exploit allows an unauthenticated attacker to remotely execute arbitrary code and gain full control of the system. The vulnerability was used to compromise the Eternal machine, which allowed access to sensitive data and other systems on the network. This report details the exploitation process, findings, and recommendations to mitigate this vulnerability.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was performed using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image1.png" alt="nmap command" />
</div>
<center><em>Figure 1:</em> Nmap command and results</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Windows 7 x64 SP 1</td>
          <td style="text-align: left">192.168.1.167</td>
          <td style="text-align: left">135, 139, 445, 49152-49158</td>
      </tr>
  </tbody>
</table>
<h3 id="vulnerability-verification">Vulnerability Verification</h3>
<p>The SMB service running on port 445 on a Windows 7 machine indicates a potential vulnerability to the EternalBlue exploit. An additional scan with an nmap script revealed that the system was indeed vulnerable to CVE-2017-0144 (EternalBlue).</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image2.png" alt="nmap confirmation" />
</div>
<center><em>Figure 2:</em> EternalBlue vulnerability confirmation</center>
<h2 id="exploitation">Exploitation</h2>
<p>The Metasploit framework was used to exploit the vulnerability. The EternalBlue module was selected and configured.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image3.png" alt="exploit configuration" />
</div>
<center><em>Figure 3:</em> Exploit configuration</center>
<p>A reverse shell payload was configured, allowing a remote connection with full system control. The exploit provided SYSTEM privileges, so no additional elevation was needed.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image4.png" alt="exploit execution" />
</div>
<center><em>Figure 4:</em> Exploit execution results</center>
<h2 id="post-exploitation">Post-Exploitation</h2>
<p>Once the meterpreter session was established, post-exploitation activities were carried out.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image5.png" alt="user enumeration" />
</div>
<center><em>Figure 5:</em> User enumeration</center>
<h3 id="credential-extraction">Credential Extraction</h3>
<p>The Mimikatz tool was used through the kiwi module to extract credentials such as passwords and hashes from the Windows operating system.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image6.png" alt="mimikatz execution" />
</div>
<center><em>Figure 6:</em> Mimikatz execution</center>
<p>The SAM (Security Account Manager) file stores password hashes for local users on a Windows system. Using the <code>kiwi_cmd lsadump::sam</code> command in meterpreter, the SAM file containing the NTLM hashes of local users&rsquo; passwords was extracted.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image7.png" alt="local user hash dump" />
</div>
<center><em>Figure 7:</em> Local user hash dump</center>
<h3 id="using-encrypted-credentials">Using Encrypted Credentials</h3>
<p>Once the password hashes were obtained, the Pass The Hash (PTH) technique was used to access other system resources without needing to know the plaintext passwords. This method allows authentication and lateral movement between Windows systems using only the password hash.<br>
The <code>crackmapexec</code> tool was used to remotely authenticate to other systems or services on the network using a user&rsquo;s hash.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image8.png" alt="crackmapexec execution" />
</div>
<center><em>Figure 8:</em> CrackMapExec execution</center>
<h3 id="persistence">Persistence</h3>
<p>Persistence allows maintaining access to a compromised system even if it is restarted, enabling reconnection in the future without having to repeat the initial exploitation process.<br>
In this case, a persistence script was configured using the <code>windows/local/persistence_service</code> module, which generates and loads an executable on the remote host and then turns it into a persistent service.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image9.png" alt="persistence execution" />
</div>
<center><em>Figure 9:</em> Persistence service execution</center>
<p>When this module is executed, meterpreter installs a service on the compromised system that establishes an outbound reverse shell connection every time the system is restarted. This means that even if the attacker loses the initial connection, they can regain access without re-exploiting the system, as long as the system is powered on and the attacker is listening on the configured port.</p>
<h3 id="persistence-check">Persistence Check</h3>
<p>To verify that persistence was successfully executed, the open meterpreter sessions were closed.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image10.png" alt="session closure" />
</div>
<center><em>Figure 10:</em> Session closure</center>
<p>A resource script was created to automate repetitive tasks in Metasploit, making it easier to reconnect to the compromised machine by simply running the script.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image11.png" alt="resource script for metasploit" />
</div>
<center><em>Figure 11:</em> Resource script for Metasploit</center>
<p>Once the script was executed, the payload and module were automatically configured, leading to a reconnection to the machine, confirming that persistence worked correctly.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image12.png" alt="resource script execution" />
</div>
<center><em>Figure 12:</em> Resource script execution</center>
<h3 id="persistence-cleanup">Persistence Cleanup</h3>
<p>To clean up the attacked system, the created service named lsass1 was closed and deleted using <code>sc.exe</code> commands, ensuring the removal of the persistence service from the system. Additionally, <code>taskkill.exe</code> was used to forcibly terminate the associated process <code>sdvj.exe</code>, which was linked to the persistence payload.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image13.png" alt="persistence cleanup" />
</div>
<center><em>Figure 13:</em> Persistence cleanup</center>
<p>After completing these steps, the Meterpreter session was securely closed, confirming the termination of the connection. This ensured that all artifacts of the persistence mechanism were removed, leaving no unauthorized access points on the system.</p>
<h2 id="flags">Flags</h2>
<p>A search for flags was carried out using the <code>search</code> command in meterpreter, and the <code>type</code> command was used to display their contents.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image14.png" alt="flags found" />
</div>
<center><em>Figure 14:</em> Flags found</center>
<p>Thus, the two flags were found, which are:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Flag</th>
          <th style="text-align: left">Hash</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">flag1.txt</td>
          <td style="text-align: left">0ef3b7d488b11e3e800f547a0765da8e</td>
      </tr>
      <tr>
          <td style="text-align: left">flag2.txt</td>
          <td style="text-align: left">a63c1c39c0c7fd570053343451667939</td>
      </tr>
  </tbody>
</table>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Used for the initial system scan and to identify open ports and services on the target.</td>
      </tr>
      <tr>
          <td style="text-align: left">Metasploit</td>
          <td style="text-align: left">Used to exploit the EternalBlue vulnerability (CVE-2017-0144) with a reverse shell payload.</td>
      </tr>
      <tr>
          <td style="text-align: left">Mimikatz/kiwi</td>
          <td style="text-align: left">Used within Meterpreter to extract Windows system credential hashes.</td>
      </tr>
      <tr>
          <td style="text-align: left">CrackMapExec and PTH</td>
          <td style="text-align: left">Allowed lateral movement in the machine without needing plaintext passwords, using only hashes.</td>
      </tr>
      <tr>
          <td style="text-align: left">Persistence with Metasploit</td>
          <td style="text-align: left">Persistence configuration using the windows/local/persistence_service module to ensure continuous access.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>The EternalBlue vulnerability exploited on the Eternal machine shows serious security flaws in its infrastructure, allowing an unauthenticated attacker to gain full control of the system. Once the system was compromised, credentials were captured, access to additional resources was gained, and persistence was set up, demonstrating how easily lateral movements and prolonged access can be maintained without detection.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate this vulnerability, it is recommended to disable the SMBv1 protocol to prevent future EternalBlue-type exploits. In cases like this, it is important to isolate critical systems in protected network segments using VLANs and robust firewall configurations, as well as restricting SMB traffic on port 445 to only what is necessary, while continuously monitoring suspicious connections.</p>
<p>It is suggested to implement IDS/IPS solutions to detect exploitation attempts and use a SIEM to consolidate and analyze logs, to facilitate early threat detection.</p>
<p>Finally, it is recommended to migrate from Windows 7 to a more recent version, such as Windows 10, to benefit from enhanced security and continuous support.</p>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
