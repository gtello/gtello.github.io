<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AWS on Gabriel Tello</title>
    <link>https://gtello.github.io/tags/aws/</link>
    <description>Recent content in AWS on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Wed, 13 Nov 2024 19:10:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing Wazuh (SIEM)</title>
      <link>https://gtello.github.io/projects/wazuh/</link>
      <pubDate>Wed, 13 Nov 2024 19:10:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/projects/wazuh/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;This project aims to showcase the setup and integration of &lt;a href=&#34;https://wazuh.com/&#34;&gt;Wazuh&lt;/a&gt; in a professional environment to enhance security operations. Here, I&amp;rsquo;ll guide you through the installation, agent management, alert configuration, integration with Microsoft Teams, and finally, testing with Atomic Red Team for validation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;To host our Wazuh server, we’ll use an AWS EC2 instance running Ubuntu 24.04. This setup is chosen for flexibility, scalability, and ease of maintenance in a cloud-based infrastructure.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>This project aims to showcase the setup and integration of <a href="https://wazuh.com/">Wazuh</a> in a professional environment to enhance security operations. Here, I&rsquo;ll guide you through the installation, agent management, alert configuration, integration with Microsoft Teams, and finally, testing with Atomic Red Team for validation.</p>
<h2 id="installation">Installation</h2>
<p>To host our Wazuh server, we’ll use an AWS EC2 instance running Ubuntu 24.04. This setup is chosen for flexibility, scalability, and ease of maintenance in a cloud-based infrastructure.</p>
<p><img alt="EC2 Specs" src="/images/posts/wazuh/ec2-specs.png"> <center><b>EC2 Instance Specs</b></center></p>
<p>Once our server is up-to-date we run the following command to install Wazuh:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">curl -sO https://packages.wazuh.com/4.9/wazuh-install.sh <span class="o">&amp;&amp;</span> sudo bash ./wazuh-install.sh -a</span></span></code></pre></div><p>This will take care of the setup and configuration of all core components. The process begins by checking system requirements and installing essential dependencies. Next, the script configures Wazuh’s security by generating certificates for the root, admin, indexer, Filebeat, and dashboard components, ensuring secure data handling across the ecosystem.</p>
<p>Once dependencies and configurations are set, the script sequentially installs and starts key Wazuh services: the Wazuh Indexer for data storage, the Wazuh Manager for threat detection, Filebeat for log forwarding, and the Wazuh Dashboard for monitoring. The dashboard is accessible at <code>https://&lt;wazuh-dashboard-ip&gt;:443</code> with default login credentials provided at the end of the installation.</p>
<p><img alt="Wazuh Setup" src="/images/posts/wazuh/wazuh-setup-loading.png"> <center><b>Wazuh Setup</b></center></p>
<p>When we log in to our Wazuh dashboard for the first time, we should begin by setting up groups to make agent management easier.</p>
<p>To create agent groups from the Wazuh dashboard:</p>
<ol>
<li>Navigate to <strong>Management</strong> &gt; <strong>Groups</strong> and click the <strong>Add new group</strong> button.</li>
<li>Enter a name for the agent group and click on the <strong>Save new group</strong> button.</li>
</ol>
<p><img alt="Agent group" src="/images/posts/wazuh/agent-group.gif"> <center><b>Adding a new group</b></center></p>
<p>Now we&rsquo;ll move on to deploying our agents.</p>
<h2 id="agent-deployment">Agent Deployment</h2>
<p>To add a new agent we&rsquo;ll click on the burger menu and go to <strong>Endpoints Summary</strong>, and click on <strong>Deploy new agent</strong>. Simply follow the wizard&rsquo;s instructions to deploy an agent:</p>
<p><img alt="Wazuh Agent Setup" src="/images/posts/wazuh/wazuh-agent-setup.png"> <center><b>Adding a new agent</b></center></p>
<p>If you&rsquo;re setting up a Wazuh agent on an AWS EC2 instance and experiencing connectivity issues, check your Security Group settings applied to your instance and ensure the Security Group attached to your Wazuh manager instance allows inbound traffic on these ports:</p>
<ul>
<li><strong>1514/TCP</strong> – Agent communication</li>
<li><strong>1515/TCP</strong> – Agent registration</li>
<li><strong>55000/TCP</strong> – API access</li>
</ul>
<p><img alt="First agent added" src="/images/posts/wazuh/first-agent-added.png"> <center><b>First agent added</b></center></p>
<p>For my first agent I added an AWS Lightsail instance I want to keep track of. Now we can move onto further configurations, such as vulnerability and rootkit detection, file integrity monitoring, etc.</p>
<h2 id="vulnerability-detection">Vulnerability Detection</h2>
<p>As of this publication date, Wazuh ships by default with the vulnerability dectection module toggled on, to confirm check the <a href="https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/index.html">config file</a> located at <code>/var/ossec/etc/ossec.conf</code></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;vulnerability-detection&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">   <span class="nt">&lt;enabled&gt;</span>yes<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">   <span class="nt">&lt;index-status&gt;</span>yes<span class="nt">&lt;/index-status&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">   <span class="nt">&lt;feed-update-interval&gt;</span>60m<span class="nt">&lt;/feed-update-interval&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nt">&lt;/vulnerability-detection&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="nt">&lt;indexer&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">   <span class="nt">&lt;enabled&gt;</span>yes<span class="nt">&lt;/enabled&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">   <span class="nt">&lt;hosts&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">      <span class="nt">&lt;host&gt;</span>https://0.0.0.0:9200<span class="nt">&lt;/host&gt;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">   <span class="nt">&lt;/hosts&gt;</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">   <span class="nt">&lt;ssl&gt;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">      <span class="nt">&lt;certificate_authorities&gt;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">         <span class="nt">&lt;ca&gt;</span>/etc/filebeat/certs/root-ca.pem<span class="nt">&lt;/ca&gt;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">      <span class="nt">&lt;/certificate_authorities&gt;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">      <span class="nt">&lt;certificate&gt;</span>/etc/filebeat/certs/filebeat.pem<span class="nt">&lt;/certificate&gt;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">      <span class="nt">&lt;key&gt;</span>/etc/filebeat/certs/filebeat-key.pem<span class="nt">&lt;/key&gt;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">   <span class="nt">&lt;/ssl&gt;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="nt">&lt;/indexer&gt;</span></span></span></code></pre></div><p>To check the vulnerabilities detected on our agents, go to <strong>Threat Intelligence</strong> &gt; <strong>Vulnerability Detection</strong>.</p>
<p><img alt="Vulnerabilities detected" src="/images/posts/wazuh/wazuh-vulns.png"> <center><b>Vulnerabilities detected</b></center></p>
<h2 id="alerting">Alerting</h2>
<p>Configuring alerting in Wazuh involves setting up alert thresholds, forwarding alerts to external systems, and managing alert escalation and filtering.</p>
<h3 id="thresholds">Thresholds</h3>
<p>Wazuh assigns a severity level (ranging from 0 to 16) to each event based on predefined <a href="https://documentation.wazuh.com/current/user-manual/ruleset/rules/rules-classification.html">rules</a>. By default, Wazuh triggers alerts for events with a severity level of 3 or higher. You can adjust this threshold to control which alerts are generated.</p>
<p>To modify it, go to the <code>ossec.conf</code> file and locate the <code>&lt;alerts&gt;</code> section and adjust the <code>&lt;log_alert_level&gt;</code> value to the desired threshold.</p>
<p>For example, to set the minimum alert level to 5:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;alerts&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;log_alert_level&gt;</span>5<span class="nt">&lt;/log_alert_level&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="nt">&lt;/alerts&gt;</span></span></span></code></pre></div><p>After making changes on the config file, restart the Wazuh manager to apply the new settings with:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">   sudo systemctl restart wazuh-manager</span></span></code></pre></div><h3 id="filtering-alerts">Filtering Alerts</h3>
<p>To fine-tune your alerting system, implement alert filtering within Wazuh to suppress specific events, such as SSH brute-force attempts for non-existent users. Follow these steps:</p>
<ol>
<li>
<p><strong>Identify the Rule ID</strong>: Determine the rule ID associated with the alert you wish to suppress. You can find this ID in the alert logs or by reviewing the Wazuh ruleset.</p>
<ul>
<li>
<p>For SSH brute-force attempts in Linux, you can find these events with <code>rule.id:(5551 OR 5712)</code>. Other related rules are <code>5710</code>, <code>5711</code>, <code>5716</code>, <code>5720</code>, <code>5503</code>, <code>5504</code>.</p>
</li>
<li>
<p>For Windows logon failures you can find those events with <code>rule.id:(60122 OR 60204)</code>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Create a Local Rule to Override the Alert</strong>: By creating a local rule with a lower severity level, you can prevent the alert from being forwarded.</p>
<ul>
<li>
<p>Navigate to the Wazuh manager&rsquo;s rules directory, located at <code>/var/ossec/etc/rules/local_rules.xml</code>.</p>
</li>
<li>
<p>Add the following rule to suppress the specific alert:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;group</span> <span class="na">name=</span><span class="s">&#34;sshd,&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;rule</span> <span class="na">id=</span><span class="s">&#34;100002&#34;</span> <span class="na">level=</span><span class="s">&#34;0&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">    <span class="nt">&lt;if_sid&gt;</span>5716<span class="nt">&lt;/if_sid&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nt">&lt;description&gt;</span>Ignore SSH brute force alerts for non-existent users<span class="nt">&lt;/description&gt;</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nt">&lt;/rule&gt;</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nt">&lt;/group&gt;</span></span></span></code></pre></div><p>This rule sets the alert level to 0 for the specified event, effectively suppressing it. For a more detailed example, check the <a href="https://github.com/ossec/ossec-hids/blob/master/etc/rules/local_rules.xml">ossec example file</a>.</p>
</li>
</ul>
</li>
<li>
<p><strong>Restart the Wazuh Manager</strong>: Apply the changes by restarting the Wazuh manager:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl restart wazuh-manager</span></span></code></pre></div></li>
</ol>
<h3 id="forwarding-alerts">Forwarding Alerts</h3>
<p>Wazuh can forward alerts to various external systems, such as syslog servers, email addresses, or collaboration platforms like Microsoft Teams.</p>
<ul>
<li>To forward alerts to a syslog server, add a <code>&lt;syslog_output&gt;</code> block in the <code>ossec.conf</code> file:</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;syslog_output&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;server&gt;</span>192.168.1.241<span class="nt">&lt;/server&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&lt;level&gt;</span>9<span class="nt">&lt;/level&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="nt">&lt;/syslog_output&gt;</span></span></span></code></pre></div><p>This configuration sends alerts with a severity level higher than 9 to the specified syslog server.</p>
<ul>
<li>To receive alerts via email, configure the email settings in the <code>&lt;global&gt;</code> section of <code>ossec.conf</code>:</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;ossec_config&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="nt">&lt;global&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="nt">&lt;email_notification&gt;</span>yes<span class="nt">&lt;/email_notification&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="nt">&lt;email_to&gt;</span>me@test.com<span class="nt">&lt;/email_to&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nt">&lt;smtp_server&gt;</span>mail.test.com<span class="nt">&lt;/smtp_server&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nt">&lt;email_from&gt;</span>wazuh@test.com<span class="nt">&lt;/email_from&gt;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">  <span class="nt">&lt;/global&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">  <span class="nt">&lt;alerts&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="nt">&lt;email_alert_level&gt;</span>10<span class="nt">&lt;/email_alert_level&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">  <span class="nt">&lt;/alerts&gt;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="nt">&lt;/ossec_config&gt;</span></span></span></code></pre></div><p>This setup sends email alerts for events with a severity level of 10 or higher.</p>
<h4 id="teams-integration">Teams Integration</h4>
<p>To integrate Wazuh alerts with Microsoft Teams, we have several options, we can use Teams&rsquo; <a href="https://learn.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/add-incoming-webhook">Incoming Webhook</a> utility, <a href="https://zapier.com/">Zapier</a>, <a href="https://www.make.com/en">Make.com</a>, or any other similar platform to send alerts to a Teams channel via a webhook. This involves creating a custom integration script and configuring it in <code>ossec.conf</code>.</p>
<p>I&rsquo;ll be using <a href="https://github.com/redanthrax/wazuh-teams-integration">this</a> already configured integration with Teams, credits go to 

<a href="https://github.com/redanthrax">@redanthrax</a>.</p>
<p>Once the integrations are setup on the Wazuh server simply configure it like this:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">&lt;integration&gt;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">  <span class="nt">&lt;name&gt;</span>custom-teams<span class="nt">&lt;/name&gt;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">  <span class="nt">&lt;level&gt;</span>3<span class="nt">&lt;/level&gt;</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">  <span class="nt">&lt;hook_url&gt;</span>{WEBHOOK URL}<span class="nt">&lt;/hook_url&gt;</span> 
</span></span><span class="line"><span class="ln">5</span><span class="cl">  <span class="nt">&lt;alert_format&gt;</span>json<span class="nt">&lt;/alert_format&gt;</span> 
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="nt">&lt;/integration&gt;</span></span></span></code></pre></div><p>Now we&rsquo;ll be receiving alerts on a Teams channel on every level 3 alert:</p>
<p><img alt="Teams alert" src="/images/posts/wazuh/teams-alert.png"> <center><b>Teams notification</b></center></p>
<p>To further extend these alerts, we can implement a SOAR system to automate triaging, create escalation processes, develop playbooks and incident response. We could use another good open-source solution like <a href="https://github.com/shuffle/shuffle/blob/main/.github/install-guide.md">Shuffle</a> for this.</p>
<h2 id="testing-and-validation">Testing and Validation</h2>
<p>To validate our Wazuh implementation and ensure alerts are triggered correctly, we’ll use <a href="https://www.atomicredteam.io/">Atomic Red Team</a>, a versatile and open-source framework that allows us to simulate real-world attack techniques mapped to the MITRE ATT&amp;CK framework. Specifically, we’ll use the <a href="https://github.com/redcanaryco/invoke-atomicredteam">Invoke-Atomic</a> PowerShell module, which can run Windows, MacOS and Linux, making it an ideal tool to test all our agents.</p>
<h3 id="setting-up-atomic-red-team">Setting up Atomic Red Team</h3>
<p>Let&rsquo;s do some tests on our ubuntu server. First we have to install PowerShell on linux with <code>sudo snap install powershell --classic</code> and then run <code>pwsh</code>. Once inside PowerShell we can proceed to install both the execution framework and the atomics folder, which contains the test definitions; the commands that the execution framework will execute.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">IEX </span><span class="p">(</span><span class="nb">IWR </span><span class="s1">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="n">-UseBasicParsing</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">Install-AtomicRedTeam</span> <span class="n">-getAtomics</span></span></span></code></pre></div><p>We can now use the <code>Invoke-AtomicTest</code> function to perform controlled security tests. Below are examples of specific MITRE ATT&amp;CK techniques that we can run to test our setup:</p>
<ul>
<li>
<p><strong>Test for Ingress Tool Transfer (T1105)</strong>: Simulates an attempt to transfer files from a remote source to an environment, which could be indicative of malware download or data exfiltration. This activity should trigger alerts if Wazuh is monitoring network activity and file movements appropriately.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1105</span></span></span></code></pre></div></li>
<li>
<p><strong>Test for Credential Dumping (T1003)</strong>: Runs a credential dumping simulation to check if Wazuh captures potential credential access events.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1003</span><span class="p">.</span><span class="py">008</span> <span class="c"># OS Credential Dumping: /etc/passwd and /etc/shadow</span></span></span></code></pre></div></li>
<li>
<p><strong>Test for Scheduled Task Creation (T1053)</strong>: Uses scheduled tasks to simulate persistence techniques and verify if Wazuh alerts on task creation.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1053</span><span class="p">.</span><span class="py">003</span> <span class="c"># Scheduled Task/Job: Cron</span></span></span></code></pre></div></li>
<li>
<p><strong>Test for Command and Scripting Interpreter Execution (T1059)</strong>: Simulates suspicious scripting activity that Wazuh should detect based on your threshold settings.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">Invoke-AtomicTest</span> <span class="n">T1059</span><span class="p">.</span><span class="py">004</span> <span class="c"># Command and Scripting Interpreter: Unix Shell</span></span></span></code></pre></div></li>
</ul>
<h3 id="verifying-alerts-in-wazuh">Verifying Alerts in Wazuh</h3>
<p>After executing each test, we&rsquo;ll navigate to the Wazuh dashboard to verify the alerts generated. We can see the events corresponding to each Atomic Red Team test under <strong>Threat Intelligence</strong> &gt; <strong>MITRE ATT&amp;CK</strong>.  We can review the details to confirm that the alerts match the configured thresholds as intended.</p>
<p><img alt="MITRE ATT&amp;CK" src="/images/posts/wazuh/mitre.png"> <center><b>MITRE ATT&amp;CK tests detected</b></center></p>
<p>By completing the implementation, configuration, and validation of Wazuh, we have created a robust and proactive SIEM setup capable of detecting, alerting, and responding to security events effectively. With integrations for seamless alerting, vulnerability monitoring, and extensive testing using Atomic Red Team, this Wazuh deployment strengthens our organization’s security posture. As threats evolve, this setup can be further customized to meet the dynamic needs of modern security operations, making it a valuable asset in our SOC’s toolkit. This project highlights the power of open-source solutions like Wazuh in building a resilient and adaptable cybersecurity environment.</p>
<div>]]></content:encoded>
    </item>
  </channel>
</rss>
