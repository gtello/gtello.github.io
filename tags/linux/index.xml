<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Gabriel Tello</title>
    <link>https://gtello.github.io/tags/linux/</link>
    <description>Recent content in Linux on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Fri, 13 Dec 2024 17:10:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Zabbix with High Availability</title>
      <link>https://gtello.github.io/projects/installing-zabbix/</link>
      <pubDate>Fri, 13 Dec 2024 17:10:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/projects/installing-zabbix/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;In this project, we’ll focus on installing the Zabbix server and setting it up with high availability (HA). Zabbix is a powerful open-source monitoring solution used for tracking performance and availability of IT systems. By the end of this guide, you will have a fully functional Zabbix server configured for high availability (HA), ensuring continuous monitoring even in case of server failure.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;To summarize, in this project, we will:&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>In this project, we’ll focus on installing the Zabbix server and setting it up with high availability (HA). Zabbix is a powerful open-source monitoring solution used for tracking performance and availability of IT systems. By the end of this guide, you will have a fully functional Zabbix server configured for high availability (HA), ensuring continuous monitoring even in case of server failure.</p>
<p><strong>To summarize, in this project, we will:</strong></p>
<ul>
<li>Install the Zabbix server.</li>
<li>Set up the Zabbix frontend for monitoring.</li>
<li>Enable Zabbix&rsquo;s server high availability (HA) for fault tolerance.</li>
</ul>
<h2 id="technical-requirements">Technical Requirements</h2>
<p>We&rsquo;ll be starting this project with an fresh Linux virtual machine. Feel free to choose a RHEL or Debian-based Linux distro. Then we&rsquo;ll set up a Zabbix server from scratch on this host.</p>
<p>I&rsquo;ll be using Rocky Linux 9 and Ubuntu 24.04 in my examples.</p>
<p>Here’s a table with the hardware requirements for VMs based on Zabbix&rsquo;s documentation:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left"><strong>Installation Size</strong></th>
          <th style="text-align: left"><strong>Monitored Metrics</strong></th>
          <th style="text-align: left"><strong>CPU/vCPU Cores</strong></th>
          <th style="text-align: left"><strong>Memory (GiB)</strong></th>
          <th style="text-align: left"><strong>Database</strong></th>
          <th style="text-align: left"><strong>Amazon EC2 Instance Type</strong></th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Small</td>
          <td style="text-align: left">1,000</td>
          <td style="text-align: left">2</td>
          <td style="text-align: left">8</td>
          <td style="text-align: left">MySQL Server, Percona Server, MariaDB Server, PostgreSQL</td>
          <td style="text-align: left">m6i.large / m6g.large</td>
      </tr>
      <tr>
          <td style="text-align: left">Medium</td>
          <td style="text-align: left">10,000</td>
          <td style="text-align: left">4</td>
          <td style="text-align: left">16</td>
          <td style="text-align: left">MySQL Server, Percona Server, MariaDB Server, PostgreSQL</td>
          <td style="text-align: left">m6i.xlarge / m6g.xlarge</td>
      </tr>
      <tr>
          <td style="text-align: left">Large</td>
          <td style="text-align: left">100,000</td>
          <td style="text-align: left">16</td>
          <td style="text-align: left">64</td>
          <td style="text-align: left">MySQL Server, Percona Server, MariaDB Server, PostgreSQL</td>
          <td style="text-align: left">m6i.4xlarge / m6g.4xlarge</td>
      </tr>
      <tr>
          <td style="text-align: left">Very Large</td>
          <td style="text-align: left">1,000,000</td>
          <td style="text-align: left">32</td>
          <td style="text-align: left">96</td>
          <td style="text-align: left">MySQL Server, Percona Server, MariaDB Server, PostgreSQL</td>
          <td style="text-align: left">m6i.8xlarge / m6g.8xlarge</td>
      </tr>
  </tbody>
</table>
<p><strong>1 Metric = 1 Item + 1 Trigger + 1 Graph</strong></p>
<p>For example, monitoring a single CPU metric would involve creating:</p>
<ul>
<li><strong>1 Item</strong> to collect the data (e.g., CPU usage).</li>
<li><strong>1 Trigger</strong> to alert when CPU usage exceeds a threshold.</li>
<li><strong>1 Graph</strong> to visualize CPU usage over time.
These components collectively count as a single metric.</li>
</ul>
<h2 id="installing-the-zabbix-server">Installing the Zabbix Server</h2>
<p>Before we actually install the Zabbix server, we need to fulfill some prerequisites. We&rsquo;ll be using MariaDB as it&rsquo;s popular and has a lot of information available for use with Zabbix. Run these commands as root.</p>
<ol>
<li>
<p><strong>Add the Zabbix 7.0 repository to your system</strong><br>
For RHEL-based systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rocky/9/x86_64/zabbix-release-7.0-2.el9.noarch.rpm
</span></span><span class="line"><span class="ln">2</span><span class="cl">dnf clean all</span></span></code></pre></div><p>For Ubuntu systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_7.0-1+ubuntu22.04_all.deb
</span></span><span class="line"><span class="ln">2</span><span class="cl">dpkg -i zabbix-release_7.0-1+ubuntu22.04_all.deb
</span></span><span class="line"><span class="ln">3</span><span class="cl">apt update</span></span></code></pre></div></li>
<li>
<p><strong>Remove the Zabbix EPEL repository packages (if installed) on RHEL systems:</strong><br>
Edit the file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/yum.repos.d/epel.repo</span></span></code></pre></div><p>Add the following line:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">[epel]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="na">...</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="na">excludepkgs</span><span class="o">=</span><span class="s">zabbix*</span></span></span></code></pre></div></li>
<li>
<p><strong>Add the MariaDB repository:</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup
</span></span><span class="line"><span class="ln">2</span><span class="cl">chmod +x mariadb_repo_setup
</span></span><span class="line"><span class="ln">3</span><span class="cl">./mariadb_repo_setup</span></span></code></pre></div></li>
<li>
<p><strong>Install and enable MariaDB:</strong><br>
For RHEL-based systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install mariadb-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl <span class="nb">enable</span> mariadb
</span></span><span class="line"><span class="ln">3</span><span class="cl">systemctl start mariadb</span></span></code></pre></div><p>For Ubuntu systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install mariadb-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl <span class="nb">enable</span> mariadb
</span></span><span class="line"><span class="ln">3</span><span class="cl">systemctl start mariadb</span></span></code></pre></div></li>
<li>
<p><strong>Secure your MariaDB installation:</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">mariadb-secure-installation</span></span></code></pre></div><p>Follow the prompts to set a secure root password.</p>
</li>
<li>
<p><strong>Install the Zabbix server with MySQL support:</strong><br>
For RHEL-based systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install zabbix-server-mysql zabbix-sql-scripts zabbix-selinux-policy</span></span></code></pre></div><p>For Ubuntu systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install zabbix-server-mysql zabbix-sql-scripts</span></span></code></pre></div></li>
<li>
<p><strong>Create the Zabbix database:</strong><br>
Log in to MariaDB:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">mysql -u root -p</span></span></code></pre></div><p>Create the database and user:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">zabbix</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8mb4_bin</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="n">zabbix</span><span class="o">@</span><span class="n">localhost</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w"></span><span class="k">grant</span><span class="w"> </span><span class="k">all</span><span class="w"> </span><span class="k">privileges</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">zabbix</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">zabbix</span><span class="o">@</span><span class="n">localhost</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">log_bin_trust_function_creators</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="w"></span><span class="n">quit</span><span class="p">;</span></span></span></code></pre></div></li>
<li>
<p><strong>Import the Zabbix database schema:</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz <span class="p">|</span> mariadb --default-character-set<span class="o">=</span>utf8mb4 -u zabbix -p zabbix</span></span></code></pre></div></li>
<li>
<p><strong>Disable <code>log_bin_trust_function_creators</code>:</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">mysql -u root -p
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="nb">set</span> global <span class="nv">log_bin_trust_function_creators</span> <span class="o">=</span> 0<span class="p">;</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">quit<span class="p">;</span></span></span></code></pre></div></li>
<li>
<p><strong>Configure the Zabbix server:</strong><br>
Edit the configuration file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/zabbix/zabbix_server.conf</span></span></code></pre></div><p>Update the database settings:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="ln">1</span><span class="cl"><span class="na">DBName</span><span class="o">=</span><span class="s">zabbix</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="na">DBUser</span><span class="o">=</span><span class="s">zabbix</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="na">DBPassword</span><span class="o">=</span><span class="s">password</span></span></span></code></pre></div></li>
<li>
<p><strong>Start the Zabbix server:</strong></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">systemctl <span class="nb">enable</span> zabbix-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl start zabbix-server</span></span></code></pre></div><p>Check the server status:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">systemctl status zabbix-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">tail -f /var/log/zabbix/zabbix_server.log</span></span></code></pre></div></li>
</ol>
<h2 id="setting-up-the-zabbix-frontend">Setting Up the Zabbix Frontend</h2>
<p>We will use Nginx to set up the Zabbix frontend.</p>
<ol>
<li>
<p><strong>Install the frontend:</strong><br>
For RHEL-based systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf module switch-to php:8.3
</span></span><span class="line"><span class="ln">2</span><span class="cl">dnf install zabbix-web-mysql zabbix-nginx-conf</span></span></code></pre></div><p>For Ubuntu systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install zabbix-frontend-php zabbix-nginx-conf</span></span></code></pre></div></li>
<li>
<p><strong>Configure NGINX:</strong><br>
Edit the configuration file:<br>
For RHEL systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/nginx/conf.d/zabbix.conf</span></span></code></pre></div><p>For Ubuntu systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/zabbix/nginx.conf</span></span></code></pre></div><p>Update the configuration:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="ln">1</span><span class="cl"><span class="na">listen 80;</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="na">server_name 192.168.0.50;</span></span></span></code></pre></div></li>
<li>
<p><strong>Restart services:</strong><br>
For RHEL systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">systemctl <span class="nb">enable</span> nginx php-fpm
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl restart nginx php-fpm</span></span></code></pre></div><p>For Ubuntu systems:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">systemctl <span class="nb">enable</span> nginx
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl restart nginx php-fpm</span></span></code></pre></div></li>
<li>
<p><strong>Access the frontend in your browser:</strong><br>
Navigate to:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln">1</span><span class="cl">http://&lt;your_server_ip&gt;/</span></span></code></pre></div></li>
<li>
<p><strong>Complete the installation in the browser:</strong><br>
You should see the Zabbix welcome screen, simply follow the prompts to configure the database and server details.</p>
</li>
</ol>
<p><img alt="Zabbix Dashboard" src="/images/posts/installing-zabbix/zabbix-dashboard.png"> <center><b>Zabbix Dashboard</b></center></p>
<p>Now that we’ve installed our Zabbix frontend, our Zabbix setup is complete and we are ready to start working with it. Our Zabbix frontend will connect to our database to edit the configuration values of our setup, as we can see in the following diagram:</p>
<p><img alt="Zabbix diagram" src="/images/posts/installing-zabbix/zabbix-diagram.png">
<br></p>
<h1 id="enabling-zabbix-server-high-availability-ha">Enabling Zabbix Server High Availability (HA)</h1>
<p>Introduced in Zabbix 6, the High Availability (HA) feature allows for seamless monitoring through an active/passive cluster setup. This ensures continuous operation even if one Zabbix server fails.</p>
<h3 id="key-features-of-zabbix-ha">Key Features of Zabbix HA:</h3>
<ul>
<li>Supports clustering multiple Zabbix servers.</li>
<li>Uses an active/passive setup for the Zabbix server.</li>
<li>Load balancing is supported via Zabbix proxies.</li>
</ul>
<h2 id="getting-ready">Getting Ready</h2>
<p>Creating an HA setup is considered advanced. Before starting:</p>
<ul>
<li>Ensure you have three virtual machines:
<ul>
<li><strong>zabbix-ha1</strong> (192.168.0.1)</li>
<li><strong>zabbix-ha2</strong> (192.168.0.2)</li>
<li><strong>zabbix-ha-db</strong> (192.168.0.10) for the MySQL database</li>
</ul>
</li>
<li>Set up a <strong>Virtual IP</strong> for the cluster: 192.168.0.5.</li>
</ul>
<div class="alert alert-note">
  <p class="alert-title">
    <span class="alert-icon alert-note-icon">
      <svg class="octicon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
      </svg>
      Note
    </span>
  </p>
  <p class="alert-text">• This setup uses a single MySQL Zabbix database.<br>
• Configure SELinux/AppArmor and firewalls as needed for production.<br>
• Proper time synchronization across servers is critical. Use tools like chrony or ntpd to maintain accurate time settings. Misaligned system clocks can adversely affect the performance of distributed systems and lead to issues with monitoring and database operations.</p>
</div>

<h2 id="setting-up-the-database">Setting Up the Database</h2>
<ol>
<li>
<p>Log in to <strong>zabbix-ha-db</strong> and install the MariaDB repository:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup
</span></span><span class="line"><span class="ln">2</span><span class="cl">chmod +x mariadb_repo_setup
</span></span><span class="line"><span class="ln">3</span><span class="cl">./mariadb_repo_setup</span></span></code></pre></div></li>
<li>
<p>Install the MariaDB server:</p>
<ul>
<li><strong>RHEL-based systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install mariadb-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl <span class="nb">enable</span> mariadb
</span></span><span class="line"><span class="ln">3</span><span class="cl">systemctl start mariadb</span></span></code></pre></div></li>
<li><strong>Ubuntu systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install mariadb-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl <span class="nb">enable</span> mariadb
</span></span><span class="line"><span class="ln">3</span><span class="cl">systemctl start mariadb</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Secure MariaDB:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">mariadb-secure-installation</span></span></code></pre></div></li>
<li>
<p>Create the Zabbix database:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="n">mariadb</span><span class="w"> </span><span class="o">-</span><span class="n">u</span><span class="w"> </span><span class="n">root</span><span class="w"> </span><span class="o">-</span><span class="n">p</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">database</span><span class="w"> </span><span class="n">zabbix</span><span class="w"> </span><span class="nb">character</span><span class="w"> </span><span class="k">set</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">collate</span><span class="w"> </span><span class="n">utf8mb4_bin</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="n">zabbix</span><span class="o">@</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="n">zabbix</span><span class="o">@</span><span class="s1">&#39;192.168.0.2&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="w"></span><span class="k">create</span><span class="w"> </span><span class="k">user</span><span class="w"> </span><span class="n">zabbix</span><span class="o">@</span><span class="s1">&#39;192.168.0.5&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="w"></span><span class="k">grant</span><span class="w"> </span><span class="k">all</span><span class="w"> </span><span class="k">privileges</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">zabbix</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s1">&#39;zabbix&#39;</span><span class="o">@</span><span class="s1">&#39;192.168.0.1&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="w"></span><span class="k">grant</span><span class="w"> </span><span class="k">all</span><span class="w"> </span><span class="k">privileges</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">zabbix</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s1">&#39;zabbix&#39;</span><span class="o">@</span><span class="s1">&#39;192.168.0.2&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="w"></span><span class="k">grant</span><span class="w"> </span><span class="k">all</span><span class="w"> </span><span class="k">privileges</span><span class="w"> </span><span class="k">on</span><span class="w"> </span><span class="n">zabbix</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="s1">&#39;zabbix&#39;</span><span class="o">@</span><span class="s1">&#39;192.168.0.5&#39;</span><span class="w"> </span><span class="n">identified</span><span class="w"> </span><span class="k">by</span><span class="w"> </span><span class="s1">&#39;password&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">log_bin_trust_function_creators</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="w"></span><span class="n">quit</span><span class="p">;</span></span></span></code></pre></div></li>
<li>
<p>Install the Zabbix SQL scripts module:</p>
<ul>
<li><strong>RHEL-based systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install zabbix-sql-scripts</span></span></code></pre></div></li>
<li><strong>Ubuntu systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install zabbix-sql-scripts</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Import the initial Zabbix database configuration:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">zcat /usr/share/doc/zabbix-sql-scripts/mysql/server.sql.gz <span class="p">|</span> mysql --default-character-set<span class="o">=</span>utf8mb4 -u root -p zabbix</span></span></code></pre></div></li>
<li>
<p>Disable <code>log_bin_trust_function_creators</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">mysql</span><span class="w"> </span><span class="o">-</span><span class="n">u</span><span class="w"> </span><span class="n">root</span><span class="w"> </span><span class="o">-</span><span class="n">p</span><span class="w">
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="w"></span><span class="k">set</span><span class="w"> </span><span class="k">global</span><span class="w"> </span><span class="n">log_bin_trust_function_creators</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w"></span><span class="n">quit</span><span class="p">;</span></span></span></code></pre></div></li>
</ol>
<h2 id="setting-up-the-zabbix-server-cluster-nodes">Setting Up the Zabbix Server Cluster Nodes</h2>
<ol>
<li>
<p>Add the Zabbix repository on <strong>zabbix-ha1</strong> and <strong>zabbix-ha2</strong>:</p>
<ul>
<li><strong>RHEL-based systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">rpm -Uvh https://repo.zabbix.com/zabbix/7.0/rocky/9/x86_64/zabbix-release-7.0-2.el9.noarch.rpm
</span></span><span class="line"><span class="ln">2</span><span class="cl">dnf clean all</span></span></code></pre></div></li>
<li><strong>Ubuntu systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">wget https://repo.zabbix.com/zabbix/7.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_7.0-1+ubuntu22.04_all.deb
</span></span><span class="line"><span class="ln">2</span><span class="cl">dpkg -i zabbix-release_7.0-1+ubuntu22.04_all.deb
</span></span><span class="line"><span class="ln">3</span><span class="cl">apt update</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Install the Zabbix server application:</p>
<ul>
<li><strong>RHEL-based systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install zabbix-server-mysql zabbix-selinux-policy</span></span></code></pre></div></li>
<li><strong>Ubuntu systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install zabbix-server-mysql</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Configure <strong>zabbix-ha1</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/zabbix/zabbix_server.conf</span></span></code></pre></div><p>Add:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln">1</span><span class="cl">DBHost=192.168.0.10
</span></span><span class="line"><span class="ln">2</span><span class="cl">DBPassword=password
</span></span><span class="line"><span class="ln">3</span><span class="cl">HANodeName=zabbix-ha1
</span></span><span class="line"><span class="ln">4</span><span class="cl">NodeAddress=192.168.0.1</span></span></code></pre></div></li>
<li>
<p>Configure <strong>zabbix-ha2</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/zabbix/zabbix_server.conf</span></span></code></pre></div><p>Add:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln">1</span><span class="cl">DBHost=192.168.0.10
</span></span><span class="line"><span class="ln">2</span><span class="cl">DBPassword=password
</span></span><span class="line"><span class="ln">3</span><span class="cl">HANodeName=zabbix-ha2
</span></span><span class="line"><span class="ln">4</span><span class="cl">NodeAddress=192.168.0.2</span></span></code></pre></div></li>
<li>
<p>Start the Zabbix servers:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">systemctl <span class="nb">enable</span> zabbix-server
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl start zabbix-server</span></span></code></pre></div></li>
</ol>
<h2 id="setting-up-nginx-with-ha">Setting Up NGINX with HA</h2>
<ol>
<li>
<p>Install <strong>keepalived</strong> on <strong>zabbix-ha1</strong> and <strong>zabbix-ha2</strong>:</p>
<ul>
<li><strong>RHEL-based systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install -y keepalived</span></span></code></pre></div></li>
<li><strong>Ubuntu systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install keepalived</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Configure <strong>keepalived</strong> on <strong>zabbix-ha1</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/keepalived/keepalived.conf</span></span></code></pre></div><p>Add:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln"> 1</span><span class="cl">vrrp_instance ZBX_1 {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    state MASTER
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    interface ens192
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    virtual_router_id 51
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    priority 244
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    authentication {
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        auth_type PASS
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        auth_pass password
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    }
</span></span><span class="line"><span class="ln">10</span><span class="cl">    virtual_ipaddress {
</span></span><span class="line"><span class="ln">11</span><span class="cl">        192.168.0.5/24
</span></span><span class="line"><span class="ln">12</span><span class="cl">    }
</span></span><span class="line"><span class="ln">13</span><span class="cl">}</span></span></code></pre></div></li>
<li>
<p>Configure <strong>keepalived</strong> on <strong>zabbix-ha2</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">vim /etc/keepalived/keepalived.conf</span></span></code></pre></div><p>Add:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln"> 1</span><span class="cl">vrrp_instance ZBX_1 {
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    state BACKUP
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    interface ens192
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    virtual_router_id 51
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    priority 243
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    authentication {
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        auth_type PASS
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        auth_pass password
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    }
</span></span><span class="line"><span class="ln">10</span><span class="cl">    virtual_ipaddress {
</span></span><span class="line"><span class="ln">11</span><span class="cl">        192.168.0.5/24
</span></span><span class="line"><span class="ln">12</span><span class="cl">    }
</span></span><span class="line"><span class="ln">13</span><span class="cl">}</span></span></code></pre></div></li>
<li>
<p>Install the Zabbix frontend:</p>
<ul>
<li><strong>RHEL-based systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">dnf install nginx zabbix-web-mysql zabbix-nginx-conf zabbix-selinux-policy</span></span></code></pre></div></li>
<li><strong>Ubuntu systems</strong>:





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">apt install nginx zabbix-frontend-php zabbix-nginx-conf</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Configure NGINX:</p>
<ul>
<li><strong>RHEL</strong>: Edit <code>/etc/nginx/conf.d/zabbix.conf</code></li>
<li><strong>Ubuntu</strong>: Edit <code>/etc/zabbix/nginx.conf</code>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln">1</span><span class="cl">listen 80;
</span></span><span class="line"><span class="ln">2</span><span class="cl">server_name 192.168.0.5;</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p>Start the web server and keepalived:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">systemctl <span class="nb">enable</span> nginx keepalived
</span></span><span class="line"><span class="ln">2</span><span class="cl">systemctl start nginx keepalived</span></span></code></pre></div></li>
<li>
<p>Configure the Zabbix frontend via your browser by navigating to:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln">1</span><span class="cl">http://192.168.0.5/</span></span></code></pre></div></li>
</ol>
<h2 id="how-it-works">How It Works</h2>
<p>The Zabbix HA setup includes two nodes (<strong>zabbix-ha1</strong> and <strong>zabbix-ha2</strong>) connected to a single database (<strong>zabbix-ha-db</strong>) using a VIP (<strong>192.168.0.5</strong>). HA ensures that:</p>
<ul>
<li>If one node fails, the other takes over.</li>
<li>Keepalived monitors NGINX to switch the VIP to the active node.</li>
</ul>
<p>For advanced HA, consider using a MySQL master/master replication setup. Learn more in the <a href="https://mariadb.com/kb/en/standard-replication/">MariaDB documentation</a>.</p>
<hr>
<p>To wrap up, this guide has taken you through installing Zabbix with high availability to ensure reliable and continuous monitoring.</p>
<p>Stay tuned for my upcoming post, where I’ll dive into setting up and customizing Zabbix monitoring, creating alerts and triggers, building structured templates, and visualizing your data through dashboards, reports, and more.</p>
</div>]]></content:encoded>
    </item>
    <item>
      <title>How to Expose a Local Server Behind CGNAT Using WireGuard and a VPS</title>
      <link>https://gtello.github.io/posts/exposing-server-behind-cgnat/</link>
      <pubDate>Tue, 03 Dec 2024 17:00:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/posts/exposing-server-behind-cgnat/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;If you’re like many who face the frustrating limitations of Carrier-Grade NAT (CGNAT), you might struggle to expose services hosted on your home server to the internet. CGNAT makes it challenging to access your server remotely because you don’t have a public IP address. In this guide, I’ll walk you through a method to route traffic through a Virtual Private Server (VPS) using WireGuard. This solution ensures reliable and secure connectivity, even behind CGNAT.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>If you’re like many who face the frustrating limitations of Carrier-Grade NAT (CGNAT), you might struggle to expose services hosted on your home server to the internet. CGNAT makes it challenging to access your server remotely because you don’t have a public IP address. In this guide, I’ll walk you through a method to route traffic through a Virtual Private Server (VPS) using WireGuard. This solution ensures reliable and secure connectivity, even behind CGNAT.</p>
<h3 id="overview"><strong>Overview</strong></h3>
<p>The goal is to use a VPS with a public IP address as a relay point for your traffic. We’ll use WireGuard, a fast and lightweight VPN, to create a secure tunnel between the VPS and your home server. Once the tunnel is established, we’ll configure <code>iptables</code> on the VPS to forward traffic to your home server. This guide is based on <a href="https://golb.hplar.ch/2019/01/expose-server-vpn.html">this excellent tutorial</a> but adapted for clarity and specific use cases.</p>
<div class="alert alert-note">
  <p class="alert-title">
    <span class="alert-icon alert-note-icon">
      <svg class="octicon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
      </svg>
      Note
    </span>
  </p>
  <p class="alert-text">The steps in this guide assume both the VPS and the home server are running Ubuntu (version 20.04 or later).</p>
</div>

<p>To better understand the flow of traffic in this setup, here’s a visual representation of how the connection between the user, VPS, and home server is established and maintained. The VPS acts as a bridge, routing traffic between the internet and your home server via a WireGuard tunnel:</p>
<p><img alt="Diagram" src="/images/posts/exposing-server-behind-cgnat/diagram.png">
<br></p>
<h3 id="what-youll-need"><strong>What You&rsquo;ll Need</strong></h3>
<ol>
<li>A <strong>VPS</strong> with a public IP: Make sure your VPS provider supports Kernel-based Virtual Machines (KVM). I recommend these providers:
<ul>
<li><a href="https://buyvm.net/">BuyVM</a></li>
<li><a href="https://www.racknerd.com/">RackNerd</a></li>
<li><a href="https://www.hetzner.com/">Hetzner</a></li>
</ul>
</li>
<li>A <strong>home server</strong> behind CGNAT: This can be any device on your local network. I like to use HP&rsquo;s Elite Desk Mini PCs such as <a href="https://www.amazon.com/HP-EliteDesk-Quad-Core-Professional-Bit-Multi-Language-English/dp/B08KSGKHVS">this one</a>.</li>
<li><a href="https://www.wireguard.com/">WireGuard</a> installed on both VPS and home server.</li>
<li>Basic understanding of Linux commands and networking.</li>
</ol>
<h3 id="check-vps-networking-configuration"><strong>Check VPS Networking Configuration</strong></h3>
<p>Before proceeding, ensure your VPS provider does not have firewall rules or networking restrictions that could block traffic. Some providers enforce default firewall settings that might prevent incoming connections to your VPS&rsquo;s public IP or interfere with forwarding traffic through the WireGuard tunnel. Check your VPS control panel or contact your provider to confirm:</p>
<ul>
<li><strong>Inbound rules</strong>: Ensure the necessary ports (e.g., <code>55107</code> for WireGuard and ports for HTTP/SSH) are open.</li>
<li><strong>Outbound rules</strong>: Ensure your VPS can establish outbound connections to your home server through the WireGuard tunnel.</li>
</ul>
<p>Without the proper configuration, your setup may fail to work as expected. Adjust these settings as needed before proceeding.</p>
<h3 id="enable-ip-forwarding-on-the-vps"><strong>Enable IP Forwarding on the VPS</strong></h3>
<p>IP forwarding allows the VPS to route traffic between its interfaces.</p>
<ul>
<li>
<p>Check if IP forwarding is enabled:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">cat /proc/sys/net/ipv4/ip_forward</span></span></code></pre></div><p>If it outputs <code>0</code>, it&rsquo;s disabled.</p>
</li>
<li>
<p>Enable IP forwarding temporarily:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo sysctl -w net.ipv4.ip_forward<span class="o">=</span><span class="m">1</span></span></span></code></pre></div></li>
<li>
<p>Make IP forwarding persistent across reboots:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;net.ipv4.ip_forward = 1&#34;</span> <span class="p">|</span> sudo tee -a /etc/sysctl.conf
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo sysctl -p</span></span></code></pre></div></li>
</ul>
<h3 id="install-wireguard"><strong>Install WireGuard</strong></h3>
<p>Install WireGuard on <strong>both the VPS and the Home Server</strong>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo apt install wireguard</span></span></code></pre></div><h3 id="configure-wireguard"><strong>Configure WireGuard</strong></h3>
<p>On <strong>both the VPS and the Home Server</strong>, generate WireGuard keys:</p>
<ul>
<li>
<p>Create the initial configuration file:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">umask</span> <span class="m">077</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> <span class="s2">&#34;[Interface]\nPrivateKey = &#34;</span> <span class="p">|</span> sudo tee /etc/wireguard/wg0.conf &gt; /dev/null</span></span></code></pre></div></li>
<li>
<p>Generate private and public keys:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">wg genkey <span class="p">|</span> sudo tee -a /etc/wireguard/wg0.conf <span class="p">|</span> wg pubkey <span class="p">|</span> sudo tee /etc/wireguard/publickey</span></span></code></pre></div><ul>
<li><strong><code>wg0.conf</code></strong>: Stores the private key for WireGuard.</li>
<li><strong><code>publickey</code></strong>: Contains the public key for sharing.</li>
</ul>
</li>
<li>
<p>Note down both public keys. These will be used to configure the tunnel between the VPS and the Home Server.</p>
</li>
</ul>
<h4 id="on-the-vps"><strong>On the VPS:</strong></h4>
<p>Edit <code>/etc/wireguard/wg0.conf</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">[Interface]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="na">PrivateKey</span> <span class="o">=</span> <span class="s">YOUR_VPS_PRIVATE_KEY</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="na">ListenPort</span> <span class="o">=</span> <span class="s">55107</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="na">Address</span> <span class="o">=</span> <span class="s">192.168.4.1/24</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="k">[Peer]</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="na">PublicKey</span> <span class="o">=</span> <span class="s">YOUR_HOME_SERVER_PUBLIC_KEY</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.2/32</span></span></span></code></pre></div><h4 id="on-the-home-server"><strong>On the Home Server:</strong></h4>
<p>Edit <code>/etc/wireguard/wg0.conf</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="ln">1</span><span class="cl"><span class="k">[Interface]</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="na">PrivateKey</span> <span class="o">=</span> <span class="s">YOUR_HOME_SERVER_PRIVATE_KEY</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="na">Address</span> <span class="o">=</span> <span class="s">192.168.4.2/24</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">
</span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="k">[Peer]</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="na">PublicKey</span> <span class="o">=</span> <span class="s">YOUR_VPS_PUBLIC_KEY</span>
</span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="na">AllowedIPs</span> <span class="o">=</span> <span class="s">192.168.4.1/32</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl"><span class="na">Endpoint</span> <span class="o">=</span> <span class="s">VPS_PUBLIC_IP:55107</span>
</span></span><span class="line"><span class="ln">9</span><span class="cl"><span class="na">PersistentKeepalive</span> <span class="o">=</span> <span class="s">25</span></span></span></code></pre></div><h3 id="start-wireguard"><strong>Start WireGuard</strong></h3>
<p>Run these commands on <strong>both the VPS and the Home Server</strong> to start WireGuard:</p>
<ul>
<li>
<p>Start WireGuard:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl start wg-quick@wg0</span></span></code></pre></div></li>
<li>
<p>Enable it to start on boot:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo systemctl <span class="nb">enable</span> wg-quick@wg0</span></span></code></pre></div></li>
<li>
<p>Verify the connection:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo wg show</span></span></code></pre></div><p>If the setup is correct, you should see a handshake between the VPS and the Home Server.</p>
</li>
</ul>
<h3 id="forward-traffic-using-iptables"><strong>Forward Traffic Using iptables</strong></h3>
<p>This step should be performed <strong>on the VPS</strong> to forward incoming traffic to your Home Server.</p>
<h4 id="forwarding-http-traffic-port-80"><strong>Forwarding HTTP Traffic (Port 80)</strong></h4>
<ul>
<li>
<p>Add the following <code>iptables</code> rules:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport <span class="m">80</span> -j DNAT --to-destination 192.168.4.2:80
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo iptables -t nat -A POSTROUTING -o wg0 -p tcp --dport <span class="m">80</span> -d 192.168.4.2 -j SNAT --to-source 192.168.4.1
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo iptables -A FORWARD -i eth0 -o wg0 -p tcp --dport <span class="m">80</span> -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
</span></span><span class="line"><span class="ln">4</span><span class="cl">sudo iptables -A FORWARD -i wg0 -o eth0 -p tcp --sport <span class="m">80</span> -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span></span></code></pre></div></li>
<li>
<p>Save the rules with <code>netfilter-persistent</code> to make them persistent:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo apt install iptables-persistent
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo netfilter-persistent save
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo netfilter-persistent reload</span></span></code></pre></div></li>
</ul>
<h3 id="forwarding-ssh-traffic"><strong>Forwarding SSH Traffic</strong></h3>
<p>This step should be performed <strong>on the VPS</strong> to allow SSH access to your Home Server. SSH forwarding allows you to connect to your Home Server by first connecting to your VPS and having the VPS route the SSH traffic through the WireGuard tunnel.</p>
<h4 id="configure-ssh-forwarding"><strong>Configure SSH Forwarding</strong></h4>
<ul>
<li>
<p>Add these <code>iptables</code> rules:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport <span class="m">2222</span> -j DNAT --to-destination 192.168.4.2:22
</span></span><span class="line"><span class="ln">2</span><span class="cl">sudo iptables -t nat -A POSTROUTING -o wg0 -p tcp --dport <span class="m">22</span> -d 192.168.4.2 -j SNAT --to-source 192.168.4.1
</span></span><span class="line"><span class="ln">3</span><span class="cl">sudo iptables -A FORWARD -i eth0 -o wg0 -p tcp --dport <span class="m">22</span> -m conntrack --ctstate NEW,ESTABLISHED,RELATED -j ACCEPT
</span></span><span class="line"><span class="ln">4</span><span class="cl">sudo iptables -A FORWARD -i wg0 -o eth0 -p tcp --sport <span class="m">22</span> -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span></span></code></pre></div></li>
<li>
<p>Test SSH to your Home Server via the VPS:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">ssh -p <span class="m">2222</span> &lt;username&gt;@&lt;VPS_PUBLIC_IP&gt;</span></span></code></pre></div></li>
</ul>
<p>Remember to save the rules with <code>netfilter-persistent</code> to make them persistent.</p>
<h4 id="retain-direct-access-to-the-vps"><strong>Retain Direct Access to the VPS</strong></h4>
<p>The SSH forwarding rules won’t affect your ability to SSH directly to the VPS via its default port (22). If needed, explicitly allow direct SSH access:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">sudo iptables -A INPUT -p tcp --dport <span class="m">22</span> -j ACCEPT</span></span></code></pre></div><h3 id="testing-the-setup"><strong>Testing the Setup</strong></h3>
<p>Verify HTTP traffic by navigating to your VPS&rsquo;s public IP in a browser:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plaintext" data-lang="plaintext"><span class="line"><span class="ln">1</span><span class="cl">http://&lt;VPS_PUBLIC_IP&gt;</span></span></code></pre></div><p>Test SSH by connecting to the VPS:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">ssh &lt;username&gt;@&lt;VPS_PUBLIC_IP&gt;</span></span></code></pre></div><p>SSH into your Home Server via the VPS:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">ssh -p <span class="m">2222</span> &lt;username&gt;@&lt;VPS_PUBLIC_IP&gt;</span></span></code></pre></div><p>By following this guide, you’ve successfully exposed a Home Server behind CGNAT using WireGuard and a VPS. This setup allows you to securely forward traffic to your Home Server, including HTTP and SSH, while retaining direct access to your VPS.</p>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Brains (THM)</title>
      <link>https://gtello.github.io/writeups/brains/</link>
      <pubDate>Fri, 29 Nov 2024 14:20:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/brains/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;  &#xD;&#xA;&lt;p&gt;Writeup for the room &lt;a href=&#34;https://tryhackme.com/r/room/brains&#34;&gt;Brains&lt;/a&gt; on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;On the &lt;strong&gt;Brains&lt;/strong&gt; room, we explored a vulnerability in TeamCity (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-27198&#34;&gt;CVE-2024-27198&lt;/a&gt;), assuming roles as both the &lt;strong&gt;&lt;span style=&#34;color: red;&#34;&gt;Red Team&lt;/span&gt;&lt;/strong&gt; and the &lt;strong&gt;Blue Team&lt;/strong&gt;. As part of the Red Team, we exploited the vulnerability to achieve remote code execution (RCE) and capture the flag. Then, we switched to the Blue Team&amp;rsquo;s perspective, using Splunk to analyze logs and investigate the attacker’s actions, who had exploited the same vulnerability to compromise the system. This dual approach provided practical experience in both offensive and defensive security techniques.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">  
<p>Writeup for the room <a href="https://tryhackme.com/r/room/brains">Brains</a> on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>On the <strong>Brains</strong> room, we explored a vulnerability in TeamCity (<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27198">CVE-2024-27198</a>), assuming roles as both the <strong><span style="color: red;">Red Team</span></strong> and the <strong>Blue Team</strong>. As part of the Red Team, we exploited the vulnerability to achieve remote code execution (RCE) and capture the flag. Then, we switched to the Blue Team&rsquo;s perspective, using Splunk to analyze logs and investigate the attacker’s actions, who had exploited the same vulnerability to compromise the system. This dual approach provided practical experience in both offensive and defensive security techniques.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>We started with a network scan using nmap to identify open ports and services:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">nmap -A -T4 -p- 10.10.63.31</span></span></code></pre></div><h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Ubuntu</td>
          <td style="text-align: left">10.10.63.31</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP), 50000 (<a href="https://www.jetbrains.com/teamcity/">TeamCity</a>)</td>
      </tr>
  </tbody>
</table>
<p>Visiting the web server showed a maintenance page:</p>
<p><img alt="Maintenance Page" src="/images/posts/brains/image1.png"> <center><b>Maintenance Page</b></center></p>
<p>On port 50000, we found the TeamCity login page. Upon noticing the version 2023.11.4, I remembered it was vulnerable to the exploit <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27198">CVE-2024-27198</a>.</p>
<p><img alt="TeamCity Login" src="/images/posts/brains/image2.png"> <center><b>TeamCity Login</b></center></p>
<h2 id="exploitation">Exploitation</h2>
<p>For our convenience, there is a ready-made script in <a href="https://www.rapid7.com/blog/post/2024/03/04/etr-cve-2024-27198-and-cve-2024-27199-jetbrains-teamcity-multiple-authentication-bypass-vulnerabilities-fixed/">Metasploit</a> that automates the exploit:</p>
<p><img alt="Exploit Execution in Metasploit" src="/images/posts/brains/image3.png"> <center><b>Exploit Execution in Metasploit</b></center></p>
<p>Once inside, we captured the flag:</p>
<p><img alt="Flag" src="/images/posts/brains/image4.png"> <center><b>Flag</b></center></p>
<h2 id="log-analysis">Log Analysis</h2>
<p>We then switched to the <strong>Blue Team</strong> role. In this second part, we used Splunk to analyze logs and discovered that someone had already compromised this system. Our task was to investigate the case further.</p>
<h3 id="identifying-the-created-user">Identifying the Created User</h3>
<p>The first task was to identify the username created on the server after exploitation. To find this information, we reviewed user activity logs in the <code>/var/log/auth.log</code> file.</p>
<p><img alt="Created User" src="/images/posts/brains/image5.png"> <center><b>Created User</b></center></p>
<p>After determining the time window during which the attacker accessed the server, it became easier to answer the questions that follow.</p>
<h3 id="finding-the-malicious-package">Finding the Malicious Package</h3>
<p>The next step was to determine whether the attacker had installed any malicious packages on the server. To do this, we used the <a href="https://docs.splunk.com/Splexicon:Sourcetype">sourcetype</a> <code>packages</code> in Splunk, which classifies and organizes package management logs in the system. This sourcetype includes detailed information about installed, updated, or removed packages, allowing us to trace any suspicious activity.</p>
<p><img alt="Malicious Package Installed" src="/images/posts/brains/image6.png"> <center><b>Malicious Package Installed</b></center></p>
<h3 id="identifying-the-installed-plugin">Identifying the Installed Plugin</h3>
<p>Using a simple query in Splunk with the keyword <code>*plugin*</code> combined with the previously identified time window, we quickly located the malicious plugin installed on the system.</p>
<p><img alt="Malicious Plugin Installed" src="/images/posts/brains/image7.png"> <center><b>Malicious Plugin Installed</b></center></p>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><strong>nmap</strong></td>
          <td style="text-align: left">Network scanning tool used to identify open ports and services.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Metasploit</strong></td>
          <td style="text-align: left">Used to automate the exploitation of the vulnerability <a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27198">CVE-2024-27198</a>.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Splunk</strong></td>
          <td style="text-align: left">Platform used to analyze system logs and trace suspicious activities.</td>
      </tr>
  </tbody>
</table>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate similar risks, it is essential to apply security updates as soon as they are available, especially for critical platforms like TeamCity. Implement strict access controls and limit publicly exposed services. Regularly monitor system logs with tools like Splunk to detect suspicious activities, such as user creation or malicious package installation. Finally, conduct periodic penetration testing to identify vulnerabilities before attackers can exploit them.</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Mr. Robot (THM)</title>
      <link>https://gtello.github.io/writeups/mrrobot/</link>
      <pubDate>Mon, 25 Nov 2024 10:32:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/mrrobot/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;  &#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/mrrobot&#34;&gt;Mr. Robot&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;This writeup walks through the exploitation of the Mr. Robot machine. It involves reconnaissance to uncover hidden directories, brute-forcing credentials for WordPress, executing a reverse shell, and privilege escalation to root. It showcases techniques using tools such as &lt;em&gt;nmap&lt;/em&gt;, &lt;em&gt;wfuzz&lt;/em&gt;, &lt;em&gt;Burp Suite&lt;/em&gt;, &lt;em&gt;Hydra&lt;/em&gt;, &lt;em&gt;WPScan&lt;/em&gt;, and &lt;em&gt;LINpeas.sh&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;alert alert-note&#34;&gt;&#xD;&#xA;  &lt;p class=&#34;alert-title&#34;&gt;&#xD;&#xA;    &lt;span class=&#34;alert-icon alert-note-icon&#34;&gt;&#xD;&#xA;      &lt;svg class=&#34;octicon&#34; viewBox=&#34;0 0 16 16&#34; version=&#34;1.1&#34; width=&#34;16&#34; height=&#34;16&#34; aria-hidden=&#34;true&#34;&gt;&#xD;&#xA;        &lt;path d=&#34;M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z&#34;&gt;&lt;/path&gt;&#xD;&#xA;      &lt;/svg&gt;&#xD;&#xA;      Note&#xD;&#xA;    &lt;/span&gt;&#xD;&#xA;  &lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">  
<p>Writeup for the <a href="https://tryhackme.com/r/room/mrrobot">Mr. Robot</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>This writeup walks through the exploitation of the Mr. Robot machine. It involves reconnaissance to uncover hidden directories, brute-forcing credentials for WordPress, executing a reverse shell, and privilege escalation to root. It showcases techniques using tools such as <em>nmap</em>, <em>wfuzz</em>, <em>Burp Suite</em>, <em>Hydra</em>, <em>WPScan</em>, and <em>LINpeas.sh</em>.</p>
<div class="alert alert-note">
  <p class="alert-title">
    <span class="alert-icon alert-note-icon">
      <svg class="octicon" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true">
        <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
      </svg>
      Note
    </span>
  </p>
  <p class="alert-text">This walkthrough is based on a modified version of the Mr. Robot CTF machine, hosted on TryHackMe. While the methodology to root this box aligns with the original, some flags and specific details have been altered.</p>
</div>

<h2 id="reconnaissance">Reconnaissance</h2>
<p>The journey began with a network scan to identify open ports and services.</p>
<p><img alt="Rustscan results" src="/images/posts/mrrobot/image1.png"> <center><b>Rustscan results</b></center></p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Linux</td>
          <td style="text-align: left">192.168.2.114</td>
          <td style="text-align: left">80 (HTTP), 443 (HTTPS)</td>
      </tr>
  </tbody>
</table>
<p>Upon visiting the web server, the homepage referenced the TV show <em>Mr. Robot</em>. A hidden directory <code>/robots</code> was discovered using <strong>wfuzz</strong>, which contained a dictionary file and the first flag.</p>
<p><img alt="Robots.txt contents" src="/images/posts/mrrobot/image4.png"> <center><b>Contents of /robots</b></center></p>
<h2 id="exploitation">Exploitation</h2>
<p>With evidence pointing to WordPress as the Content Management System (CMS), we launched a brute-force attack on the login portal.</p>
<h3 id="wordpress-login">WordPress Login</h3>
<p>The credentials were obtained using <strong>Burp Suite</strong> to capture the login request and <strong>Hydra</strong> to brute-force the admin account with the discovered dictionary file.</p>
<p><img alt="Burp Suite request" src="/images/posts/mrrobot/image5.png"> <center><b>Burp Suite request capture</b></center><br>
<img alt="Hydra execution" src="/images/posts/mrrobot/image6.png"> <br> <center><b>Hydra login brute force</b></center></p>
<p>Using the user &ldquo;Angela&rdquo; and the cracked password, we gained access to the WordPress admin dashboard. From there, we replaced a PHP template file with a reverse shell payload, enabling remote access.</p>
<h3 id="reverse-shell">Reverse Shell</h3>
<p>Once the payload was executed, we established a shell as the <code>daemon</code> user.</p>
<p><img alt="Reverse shell connection" src="/images/posts/mrrobot/image9.png"> <center><b>Reverse shell connection</b></center></p>
<p>Exploring the file system revealed a hashed password in the <code>/home/robot</code> directory. The hash was cracked using <a href="https://crackstation.net/">Crackstation</a>, resulting in the password <code>sayajin23</code>. With this password, we gained access to the <code>robot</code> account.</p>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>Privilege escalation was achieved using <a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">LINpeas.sh</a> to identify misconfigurations.</p>
<h3 id="exploiting-nmap">Exploiting nmap</h3>
<p>LINpeas highlighted that <code>nmap</code> had elevated privileges. Using <a href="https://gtfobins.github.io/gtfobins/nmap/">GTFObins</a>, we crafted a command to exploit <code>nmap</code>&rsquo;s interactive mode and escalate to root.</p>
<p><img alt="Privilege escalation" src="/images/posts/mrrobot/image14.png"> <center><b>Using nmap for privilege escalation</b></center></p>
<p>After successfully executing the commands, we accessed the machine as the root user.</p>
<h2 id="flags">Flags</h2>
<p>Three flags were found during the engagement:</p>
<ul>
<li><strong>Flag 1:</strong> b8a2bd7f70b405df8823bd4442892c6c</li>
<li><strong>Flag 2:</strong> c6ad356a6d4ab0c2c9d033caadf28469</li>
<li><strong>Flag 3:</strong> 6c6b1c7089af9c9bb7ac78f06c3c1685</li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><strong>Rustscan</strong></td>
          <td style="text-align: left">Fast port scanning to identify active services.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>wfuzz</strong></td>
          <td style="text-align: left">Directory brute-forcing to uncover hidden paths.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Burp Suite</strong></td>
          <td style="text-align: left">Intercepting HTTP requests for analysis and testing.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Hydra</strong></td>
          <td style="text-align: left">Login brute-forcing for WordPress credentials.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>WPScan</strong></td>
          <td style="text-align: left">WordPress vulnerability and user enumeration.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>LINpeas.sh</strong></td>
          <td style="text-align: left">Privilege escalation enumeration script.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>GTFObins</strong></td>
          <td style="text-align: left">Exploitation of <code>nmap</code> to escalate privileges.</td>
      </tr>
  </tbody>
</table>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Protect sensitive files</strong>: Avoid exposing paths in <code>robots.txt</code> that lead to critical resources or sensitive files.</li>
<li><strong>Enforce strong credentials</strong>: Use complex passwords and monitor for brute-force attempts.</li>
<li><strong>Restrict privileged binaries</strong>: Limit access to binaries like <code>nmap</code> that can be exploited for privilege escalation.</li>
<li><strong>Update and secure WordPress</strong>: Regularly update WordPress, plugins, and themes, and restrict access to the admin dashboard.</li>
<li><strong>Implement security audits</strong>: Regularly audit systems with tools like <strong>LINpeas</strong> to uncover misconfigurations or vulnerabilities.</li>
</ul>
</div>  
]]></content:encoded>
    </item>
    <item>
      <title>Game Zone (THM)</title>
      <link>https://gtello.github.io/writeups/gamezone/</link>
      <pubDate>Thu, 14 Nov 2024 20:43:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/gamezone/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;  &#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/gamezone&#34;&gt;Game Zone&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as &lt;em&gt;nmap&lt;/em&gt;, &lt;em&gt;Burp Suite&lt;/em&gt;, &lt;em&gt;sqlmap&lt;/em&gt;, and &lt;em&gt;John the Ripper&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;&#xA;&lt;p&gt;The first step was a network scan with nmap to discover active ports and services.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Nmap results&#34; src=&#34;https://gtello.github.io/images/posts/gamezone/image1.png&#34;&gt; &lt;center&gt;&lt;b&gt;Nmap command and results&lt;/b&gt;&lt;/center&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">  
<p>Writeup for the <a href="https://tryhackme.com/r/room/gamezone">Game Zone</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as <em>nmap</em>, <em>Burp Suite</em>, <em>sqlmap</em>, and <em>John the Ripper</em>.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>The first step was a network scan with nmap to discover active ports and services.</p>
<p><img alt="Nmap results" src="/images/posts/gamezone/image1.png"> <center><b>Nmap command and results</b></center></p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Ubuntu 16.04.6</td>
          <td style="text-align: left">10.10.254.53</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>Upon finding port 80 open, we accessed the Game Zone homepage through the browser.</p>
<p><img alt="Game Zone homepage" src="/images/posts/gamezone/image2.png"> <center><b>Game Zone homepage</b></center></p>
<p>The TryHackMe room invited us to try SQL Injection (SQLi) in the login field. Using the statement <code>' or 1=1 limit 1;#</code> in the username field and leaving the password blank, we successfully authenticated to the portal. However, further manual SQLi attempts yielded no additional results, so we captured the <strong>POST request</strong> from the search with <strong>Burp Suite</strong> to run automated SQLi tests with <strong>SQLmap</strong>.</p>
<p><img alt="POST request capture" src="/images/posts/gamezone/image3.png"> <center><b>POST request capture</b></center></p>
<p>We used the command <code>sqlmap -r POST.txt --dump</code> to verify and exploit SQL Injection vulnerabilities. SQLmap revealed the presence of a MySQL database and displayed the <code>user</code> table&rsquo;s contents with hashed passwords. We applied <strong>John the Ripper</strong> to crack the password hash for the user <code>agent47</code>.</p>
<p><img alt="SQLmap execution" src="/images/posts/gamezone/image4.png"> <center><b>SQLmap execution</b></center><br><br>
<img alt="Hash cracking" src="/images/posts/gamezone/image5.png"> <center><b>Hash cracking</b></center></p>
<p>With the credentials, we accessed the machine via SSH.</p>
<p><img alt="SSH access" src="/images/posts/gamezone/image6.png"> <center><b>SSH access</b></center></p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>On the machine, we ran <code>ss -tulpn</code> to identify additional ports and services. We noted that port 10000 was blocked by a firewall, so we set up an SSH tunnel with <code>ssh -L 10000:127.0.0.1:10000 agent47@10.10.254.53</code>. This allowed us to access a CMS called <strong>Webmin</strong>, version 1.580.</p>
<p><img alt="Port 10000 blocked by firewall" src="/images/posts/gamezone/image7.png"> <center><b>Port 10000 blocked by firewall</b></center><br><br>
<img alt="Webmin portal" src="/images/posts/gamezone/image8.png"> <center><b>Webmin portal</b></center></p>
<p>Upon researching possible vulnerabilities in Webmin, we found the exploit <a href="https://github.com/JohnHammond/CVE-2012-2982">CVE-2012-2982</a>. Using this exploit, we gained root access to the machine.</p>
<p><img alt="Exploit usage" src="/images/posts/gamezone/image9.png"> <center><b>Exploit usage</b></center><br><br>
<img alt="Root access" src="/images/posts/gamezone/image10.png"> <center><b>Root access</b></center></p>
<h2 id="flags">Flags</h2>
<p>With root privileges, we located the two flags:</p>
<ul>
<li><code>user.txt</code>: 649ac17b1480ac13ef1e4fa579dac95c</li>
<li><code>root.txt</code>: a4b945830144bdd71908d12d902adeee</li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<p>During this analysis, we used the following tools:</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><strong>nmap</strong></td>
          <td style="text-align: left">Network scanning and open port detection.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Burp Suite</strong></td>
          <td style="text-align: left">Capturing and analyzing HTTP requests for SQLi.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>sqlmap</strong></td>
          <td style="text-align: left">SQLi testing and data extraction from the database.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>John the Ripper</strong></td>
          <td style="text-align: left">Used to crack the user <code>agent47</code> password hash for SSH access.</td>
      </tr>
      <tr>
          <td style="text-align: left"><strong>Exploit CVE-2012-2982</strong></td>
          <td style="text-align: left">Webmin vulnerability enabling root access.</td>
      </tr>
  </tbody>
</table>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Update critical systems and applications</strong>, especially Webmin and Ubuntu, to address known vulnerabilities.</li>
<li><strong>Firewall restrictions</strong> on internal services and <strong>input sanitization</strong> to prevent SQL injections.</li>
<li>Implement a <strong>patch management system</strong> and promote the use of <strong>strong passwords</strong> to reduce privilege escalation risks.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Bolt Machine</title>
      <link>https://gtello.github.io/writeups/bolt/</link>
      <pubDate>Thu, 31 Oct 2024 18:03:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/bolt/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format covering a penetration test conducted on a Debian machine.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;This report describes a security assessment in which several critical vulnerabilities were identified and exploited on the Bolt machine. During reconnaissance, exposed services were found, including a Bolt CMS error and a PHP information page. These discoveries led to the extraction of sensitive credentials and the exploitation of a vulnerability that provided access to important system files.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format covering a penetration test conducted on a Debian machine.
<h2 id="executive-summary">Executive Summary</h2>
<p>This report describes a security assessment in which several critical vulnerabilities were identified and exploited on the Bolt machine. During reconnaissance, exposed services were found, including a Bolt CMS error and a PHP information page. These discoveries led to the extraction of sensitive credentials and the exploitation of a vulnerability that provided access to important system files.</p>
<p>Additionally, an NFS shared resource containing a password-protected file was detected. Using brute force techniques, the file was successfully cracked, and an SSH key was obtained, allowing access to the system as an identified user. Finally, a misconfiguration allowed privilege escalation, granting root access and complete control over the machine.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using nmap to identify open ports and services on the machine.</p>
<p><img alt="nmap Result" src="/images/posts/bolt/image1.png"></p>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian</td>
          <td style="text-align: left">192.168.138.132</td>
          <td style="text-align: left">22 (SSH), 80 (HTTP), 111 (RPCbind), 2049 (NFS), 8080 (HTTP Alternate)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that ports 80 and 8080 were open, so they were investigated in the browser. An error page for Bolt CMS was found.</p>
<p><img alt="Bolt Installation Error" src="/images/posts/bolt/image2.png"></p>
<center><em>Figure 2:</em> Bolt installation error</center>
<p>A PHP information page was exposed on port 8080, and directory brute-forcing was performed on both ports.</p>
<p><img alt="PHP Info Page" src="/images/posts/bolt/image3.png"></p>
<center><em>Figure 3:</em> PHP information page</center>
<p><img alt="Directory Brute Force" src="/images/posts/bolt/image4.png"></p>
<center><em>Figure 4:</em> Directory brute force on port 80</center>
<p>Inside the <code>/app</code> directory, a <code>config.yml</code> file containing SQLite credentials was found.</p>
<p><img alt="Exposed Credentials" src="/images/posts/bolt/image5.png"></p>
<center><em>Figure 5:</em> Exposed credentials in config.yml file</center>
<p>Brute-forcing results on directories for port 8080 returned a single result, the <code>/dev</code> directory.</p>
<p><img alt="BoltWire" src="/images/posts/bolt/image6.png"></p>
<center><em>Figure 6:</em> BoltWire homepage</center>
<p>We interacted with the BoltWire page but found nothing of interest. Vulnerabilities were researched online, and a <a href="https://www.exploit-db.com/exploits/48411">local file inclusion (LFI)</a> vulnerability was tested.</p>
<p><img alt="LFI" src="/images/posts/bolt/image7.png"></p>
<center><em>Figure 7:</em> Local file inclusion</center>
<p>The <code>/etc/passwd</code> file could be examined due to the LFI, revealing a potential user, <code>jeanpaul</code>.</p>
<p>Simultaneously, port 2049 (NFS) was enumerated. Using the <code>showmount -e</code> command revealed that the <code>/srv/nfs</code> directory was shared with specific IP ranges.</p>
<p>A local directory <code>/mnt/dev</code> was created as a mount point. The shared NFS resource <code>/srv/nfs</code> was then mounted onto this directory using the <code>mount</code> command. Navigating to <code>/mnt/dev</code> revealed a file named <code>save.zip</code>.</p>
<p><img alt="NFS Enumeration" src="/images/posts/bolt/image8.png"></p>
<center><em>Figure 8:</em> NFS Enumeration</center>
<p>The zip file was password-protected, so the <code>fcrackzip</code> tool was used with a password dictionary (<code>rockyou.txt</code>) to attempt to crack the password for <code>save.zip</code>. The command succeeded, revealing the password <code>java101</code>.</p>
<p>Next, <code>save.zip</code> was unzipped using <code>sudo unzip</code>, and the discovered password was entered. This extracted three files: <code>flag1.txt</code>, <code>id_rsa</code>, and <code>todo.txt</code>.</p>
<p>The <code>flag1.txt</code> file contained a hash string, while <code>todo.txt</code> included instructions related to site management and a recommendation to continue programming in Java. This file was signed by <code>jp</code>, which could refer to the previously identified user <code>jeanpaul</code>.</p>
<p>As a result, the <code>id_rsa</code> file was used to connect to the machine as the user <code>jeanpaul</code>, using the credentials found so far.</p>
<p><img alt="Zip File Crack" src="/images/posts/bolt/image9.png"></p>
<center><em>Figure 9:</em> Zip file crack</center>
<p>The password previously found in the configuration file was indeed correct for user <code>jeanpaul</code>. Once inside the machine, privilege escalation was attempted.</p>
<p><img alt="Log in" src="/images/posts/bolt/image10.png"></p>
<center><em>Figure 10:</em> Log in as user jeanpaul</center>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>Using the command <code>sudo -l</code>, it was observed that the current user could run the <code>zip</code> command as root without a password. A privilege escalation technique from <a href="https://gtfobins.github.io/gtfobins/zip/#sudo">GTFObins</a> was used, providing methods to exploit binaries with special sudo permissions. In this case, the <code>zip</code> binary was used to execute commands with elevated privileges.</p>
<p>The process began by creating a temporary file using the command <code>TF=$(mktemp -u)</code>, which generated a unique file name without physically creating the file, storing it in the <code>TF</code> variable. Then, <code>zip</code> was executed with superuser privileges using the command <code>sudo zip $TF /etc/hosts -T -TT 'sh #'</code>. Here, <code>zip</code> was configured to execute the <code>sh</code> command interpreter, using <code>/etc/hosts</code> as a dummy file to meet the binary&rsquo;s requirements. The <code>-T</code> and <code>-TT</code> options allowed <code>sh</code> to run with elevated privileges. Finally, the temporary file was deleted with <code>sudo rm $TF</code> to clear any traces of the attack. This sequence allowed root access to the machine.</p>
<p><img alt="Root Escalation" src="/images/posts/bolt/image11.png"></p>
<center><em>Figure 11:</em> Root escalation</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">nmap</td>
          <td style="text-align: left">Used for network scanning and detecting open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td style="text-align: left">fcrackzip</td>
          <td style="text-align: left">Tool used to perform a brute-force attack on zip files.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td style="text-align: left">GTFObins</td>
          <td style="text-align: left">Online resource that provided the method for privilege escalation using the <code>zip</code> binary with sudo permissions.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>The security assessment on the Bolt machine revealed critical vulnerabilities that allowed full system access, from credential extraction to privilege escalation to root. These issues stemmed mainly from misconfigurations, exposure of sensitive information, and lack of security updates. Although these vulnerabilities were successfully exploited, implementing the suggested recommendations can mitigate similar risks in the future and strengthen the machine&rsquo;s overall security.</p>
<h2 id="recommendations">Recommendations</h2>
<p>It is recommended to update and patch the server software and applications, such as Bolt CMS, to protect against known vulnerabilities. Restrict access to sensitive information by disabling or limiting system information pages like <code>phpinfo()</code> that expose critical details to potential attackers. Secure files and configurations by storing credentials securely and encrypted, and implement access policies that limit the visibility of sensitive files like <code>config.yml</code>. Strengthen NFS configurations to restrict access to shared resources through stricter settings, ensuring only authorized users can access them. Review sudo permissions to prevent users from running potentially exploitable binaries, such as <code>zip</code> in this case, with root privileges. Improve SSH key management by implementing measures to protect private keys and restricting SSH access to trusted users.</p>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Academy Machine</title>
      <link>https://gtello.github.io/writeups/academy/</link>
      <pubDate>Thu, 24 Oct 2024 21:22:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/academy/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.
<h2 id="executive-summary">Executive Summary</h2>
<p>A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.</p>
<p>This allowed total control of the server and access to confidential information. Multiple configuration and access control issues were detected that need to be corrected to improve the security of the machine and its services.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image1.png" alt="nmap result" />
</div><br>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Operating System</th>
          <th style="text-align: left">IP Address</th>
          <th style="text-align: left">Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Debian 10</td>
          <td style="text-align: left">192.168.138.128</td>
          <td style="text-align: left">21 (FTP), 22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that the FTP service on port 21 allowed anonymous login, so that was performed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image2.png" alt="ftp login" />
</div><br>
<center><em>Figure 2:</em> FTP login as anonymous user</center>
<p>An FTP connection was made through the <code>anonymous</code> account, which allowed access to a note left on the server.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image3.png" alt="developer note" />
</div><br>
<center><em>Figure 3:</em> Developer's note</center>
<p>It was observed that the developer left a note on the FTP server mentioning that they had to resort to using a SQL statement to create a new user for the academy’s website. The value in the <code>password</code> field was an MD5 hash, so we proceeded to crack the hash with hashcat.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image4.png" alt="hashcat result 1" />
    <img src="/images/posts/academy/image4_1.png" alt="hashcat result 2" />
</div><br>
<center><em>Figure 4:</em> hashcat result</center>
<p>The hash crack was successful, revealing that the password for the <code>HackerMentor</code> user is <code>junior01</code>. To proceed, the open port 80, suggesting a webpage was serving content from the machine, was analyzed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image5.png" alt="apache web server" />
</div><br>
<center><em>Figure 5:</em> Apache Web Server service</center>
<p>The default Apache webpage was found, confirming that this machine is hosting a web service. Brute force was performed on web directories.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image6.png" alt="wfuzz" />
</div><br>
<center><em>Figure 6:</em> Brute force on web directories with wfuzz</center>
<p>The web directories <code>/phpmyadmin</code> and <code>/monkey</code> were discovered.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image7.png" alt="academy portal" />
</div><br>
<center><em>Figure 7:</em> Academy login portal</center>
<p>The credentials discovered earlier were used, and login to the Monkey portal was achieved. Detailed inspection of this webpage revealed a student enrollment section allowing image uploads. An attack called <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">Unrestricted File Upload</a> was attempted to try executing PHP code on the web server and achieve a reverse shell.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image8.png" alt="php code" />
</div><br>
<center><em>Figure 8:</em> PHP code for reverse shell</center>
<p>This .php file was uploaded to the server, and as a test image upload had previously been performed, it was found that images are stored at <code>http://192.168.138.128/monkey/studentphoto/image.jpg</code>. Once the image was uploaded, the code was executed, and a connection with netcat on port 1234 was opened.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image9.png" alt="reverse shell connection" />
</div><br>
<center><em>Figure 9:</em> Reverse shell connection established</center>
<p>The exploit worked correctly, gaining access to the server as user <code>www-data</code>. To escalate privileges, the script <a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">LINpeas.sh</a> was used. For file transfer to the server, a basic HTTP server was set up with Python using the command <code>python3 -m http.server 80</code> to download the file from the server. The script was run to discover privilege escalation paths with the following findings.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image10.png" alt="mysql password" />
</div><br>
<center><em>Figure 10:</em> Plaintext password of MySQL database</center>
<p>Once the password was found, it was tried in conjunction with the known user on the academy’s web portal to connect to that user via SSH.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image11.png" alt="ssh session" />
</div><br>
<center><em>Figure 11:</em> SSH connection to hackermentor user</center>
<p>A flag and a bash script named <code>backup.sh</code> that backs up the academy&rsquo;s website files were found. The <code>ls -l</code> command shows that this script runs as an administrator user. Checking with <code>crontab</code> and <code>systemd</code>, it was not possible to determine if this script is automated, so <a href="https://github.com/DominicBreuker/pspy">pspy</a> was used for confirmation. This program monitors Linux processes without needing root permissions.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image12.png" alt="process monitoring" />
</div><br>
<center><em>Figure 12:</em> Process monitoring with pspy showing script execution</center>
<p>The script was observed running as the root user. Since the <code>hackermentor</code> user has permissions to edit this file, the script was modified to execute a reverse shell, and as it runs as root, root access to the machine was obtained through this.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image13.png" alt="backup.sh modified" />
</div><br>
<center><em>Figure 13:</em> Modified backup.sh</center>
<pre>

</pre>
<div style="text-align: center;">
  <img src="/images/posts/academy/image14.png" alt="root connection" />
</div><br>
<center><em>Figure 14:</em> Root user connection</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th style="text-align: left">Tool</th>
          <th style="text-align: left">Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left">Nmap</td>
          <td style="text-align: left">Used for network scanning and detection of open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td style="text-align: left">hashcat</td>
          <td style="text-align: left">Used to crack the MD5 hash obtained from the FTP server.</td>
      </tr>
      <tr>
          <td style="text-align: left">wfuzz</td>
          <td style="text-align: left">Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td style="text-align: left">pspy</td>
          <td style="text-align: left">Program used to monitor processes on Linux without needing root permissions.</td>
      </tr>
      <tr>
          <td style="text-align: left">LinPEAS</td>
          <td style="text-align: left">Script used to identify potential privilege escalation paths on the server.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>During this security analysis, several critical vulnerabilities were found on the Monkey machine. Initial access was gained through a misconfigured FTP service allowing anonymous logins, which gave access to sensitive files. User credentials were then discovered, allowing access to the web and remote code execution on the server. Lack of restrictions on file uploads and an elevated permissions script without proper protections enabled privilege escalation, leading to root access. The combination of poor permission management, insecure configurations, and the lack of robust authentication controls allowed the system to be fully compromised.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate these vulnerabilities, anonymous login on the FTP service must be disabled. Ensure passwords are never stored in plaintext and that hashes use stronger algorithms.
Regarding privilege escalation, review and restrict user permissions on critical scripts like <code>backup.sh</code>, preventing non-privileged users from modifying them. It is also recommended to perform continuous system monitoring with tools like pspy to detect anomalous activities in processes.</p>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
