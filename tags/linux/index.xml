<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on Gabriel Tello</title>
    <link>https://gtello.github.io/tags/linux/</link>
    <description>Recent content in Linux on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) Â© 2024</copyright>
    <lastBuildDate>Thu, 14 Nov 2024 20:43:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Game Zone (THM)</title>
      <link>https://gtello.github.io/writeups/gamezone/</link>
      <pubDate>Thu, 14 Nov 2024 20:43:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/gamezone/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;  &#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/gamezone&#34;&gt;Game Zone&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as &lt;em&gt;nmap&lt;/em&gt;, &lt;em&gt;Burp Suite&lt;/em&gt;, &lt;em&gt;sqlmap&lt;/em&gt;, and &lt;em&gt;John the Ripper&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;&#xA;&lt;p&gt;The first step was a network scan with nmap to discover active ports and services.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Nmap results&#34; src=&#34;https://gtello.github.io/images/posts/gamezone/image1.png&#34;&gt; &lt;center&gt;&lt;b&gt;Nmap command and results&lt;/b&gt;&lt;/center&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">  
<p>Writeup for the <a href="https://tryhackme.com/r/room/gamezone">Game Zone</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as <em>nmap</em>, <em>Burp Suite</em>, <em>sqlmap</em>, and <em>John the Ripper</em>.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>The first step was a network scan with nmap to discover active ports and services.</p>
<p><img alt="Nmap results" src="/images/posts/gamezone/image1.png"> <center><b>Nmap command and results</b></center></p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Ubuntu 16.04.6</td>
          <td>10.10.254.53</td>
          <td>22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>Upon finding port 80 open, we accessed the Game Zone homepage through the browser.</p>
<p><img alt="Game Zone homepage" src="/images/posts/gamezone/image2.png"> <center><b>Game Zone homepage</b></center></p>
<p>The TryHackMe room invited us to try SQL Injection (SQLi) in the login field. Using the statement <code>' or 1=1 limit 1;#</code> in the username field and leaving the password blank, we successfully authenticated to the portal. However, further manual SQLi attempts yielded no additional results, so we captured the <strong>POST request</strong> from the search with <strong>Burp Suite</strong> to run automated SQLi tests with <strong>SQLmap</strong>.</p>
<p><img alt="POST request capture" src="/images/posts/gamezone/image3.png"> <center><b>POST request capture</b></center></p>
<p>We used the command <code>sqlmap -r POST.txt --dump</code> to verify and exploit SQL Injection vulnerabilities. SQLmap revealed the presence of a MySQL database and displayed the <code>user</code> table&rsquo;s contents with hashed passwords. We applied <strong>John the Ripper</strong> to crack the password hash for the user <code>agent47</code>.</p>
<p><img alt="SQLmap execution" src="/images/posts/gamezone/image4.png"> <center><b>SQLmap execution</b></center><br><br>
<img alt="Hash cracking" src="/images/posts/gamezone/image5.png"> <center><b>Hash cracking</b></center></p>
<p>With the credentials, we accessed the machine via SSH.</p>
<p><img alt="SSH access" src="/images/posts/gamezone/image6.png"> <center><b>SSH access</b></center></p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>On the machine, we ran <code>ss -tulpn</code> to identify additional ports and services. We noted that port 10000 was blocked by a firewall, so we set up an SSH tunnel with <code>ssh -L 10000:127.0.0.1:10000 agent47@10.10.254.53</code>. This allowed us to access a CMS called <strong>Webmin</strong>, version 1.580.</p>
<p><img alt="Port 10000 blocked by firewall" src="/images/posts/gamezone/image7.png"> <center><b>Port 10000 blocked by firewall</b></center><br><br>
<img alt="Webmin portal" src="/images/posts/gamezone/image8.png"> <center><b>Webmin portal</b></center></p>
<p>Upon researching possible vulnerabilities in Webmin, we found the exploit <a href="https://github.com/JohnHammond/CVE-2012-2982">CVE-2012-2982</a>. Using this exploit, we gained root access to the machine.</p>
<p><img alt="Exploit usage" src="/images/posts/gamezone/image9.png"> <center><b>Exploit usage</b></center><br><br>
<img alt="Root access" src="/images/posts/gamezone/image10.png"> <center><b>Root access</b></center></p>
<h2 id="flags">Flags</h2>
<p>With root privileges, we located the two flags:</p>
<ul>
<li><code>user.txt</code>: 649ac17b1480ac13ef1e4fa579dac95c</li>
<li><code>root.txt</code>: a4b945830144bdd71908d12d902adeee</li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<p>During this analysis, we used the following tools:</p>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>nmap</strong></td>
          <td>Network scanning and open port detection.</td>
      </tr>
      <tr>
          <td><strong>Burp Suite</strong></td>
          <td>Capturing and analyzing HTTP requests for SQLi.</td>
      </tr>
      <tr>
          <td><strong>sqlmap</strong></td>
          <td>SQLi testing and data extraction from the database.</td>
      </tr>
      <tr>
          <td><strong>John the Ripper</strong></td>
          <td>Used to crack the user <code>agent47</code> password hash for SSH access.</td>
      </tr>
      <tr>
          <td><strong>Exploit CVE-2012-2982</strong></td>
          <td>Webmin vulnerability enabling root access.</td>
      </tr>
  </tbody>
</table>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Update critical systems and applications</strong>, especially Webmin and Ubuntu, to address known vulnerabilities.</li>
<li><strong>Firewall restrictions</strong> on internal services and <strong>input sanitization</strong> to prevent SQL injections.</li>
<li>Implement a <strong>patch management system</strong> and promote the use of <strong>strong passwords</strong> to reduce privilege escalation risks.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Bolt Machine</title>
      <link>https://gtello.github.io/writeups/bolt/</link>
      <pubDate>Thu, 31 Oct 2024 18:03:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/bolt/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format covering a penetration test conducted on a Debian machine.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;This report describes a security assessment in which several critical vulnerabilities were identified and exploited on the Bolt machine. During reconnaissance, exposed services were found, including a Bolt CMS error and a PHP information page. These discoveries led to the extraction of sensitive credentials and the exploitation of a vulnerability that provided access to important system files.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format covering a penetration test conducted on a Debian machine.
<h2 id="executive-summary">Executive Summary</h2>
<p>This report describes a security assessment in which several critical vulnerabilities were identified and exploited on the Bolt machine. During reconnaissance, exposed services were found, including a Bolt CMS error and a PHP information page. These discoveries led to the extraction of sensitive credentials and the exploitation of a vulnerability that provided access to important system files.</p>
<p>Additionally, an NFS shared resource containing a password-protected file was detected. Using brute force techniques, the file was successfully cracked, and an SSH key was obtained, allowing access to the system as an identified user. Finally, a misconfiguration allowed privilege escalation, granting root access and complete control over the machine.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using nmap to identify open ports and services on the machine.</p>
<p><img alt="nmap Result" src="/images/posts/bolt/image1.png"></p>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Debian</td>
          <td>192.168.138.132</td>
          <td>22 (SSH), 80 (HTTP), 111 (RPCbind), 2049 (NFS), 8080 (HTTP Alternate)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that ports 80 and 8080 were open, so they were investigated in the browser. An error page for Bolt CMS was found.</p>
<p><img alt="Bolt Installation Error" src="/images/posts/bolt/image2.png"></p>
<center><em>Figure 2:</em> Bolt installation error</center>
<p>A PHP information page was exposed on port 8080, and directory brute-forcing was performed on both ports.</p>
<p><img alt="PHP Info Page" src="/images/posts/bolt/image3.png"></p>
<center><em>Figure 3:</em> PHP information page</center>
<p><img alt="Directory Brute Force" src="/images/posts/bolt/image4.png"></p>
<center><em>Figure 4:</em> Directory brute force on port 80</center>
<p>Inside the <code>/app</code> directory, a <code>config.yml</code> file containing SQLite credentials was found.</p>
<p><img alt="Exposed Credentials" src="/images/posts/bolt/image5.png"></p>
<center><em>Figure 5:</em> Exposed credentials in config.yml file</center>
<p>Brute-forcing results on directories for port 8080 returned a single result, the <code>/dev</code> directory.</p>
<p><img alt="BoltWire" src="/images/posts/bolt/image6.png"></p>
<center><em>Figure 6:</em> BoltWire homepage</center>
<p>We interacted with the BoltWire page but found nothing of interest. Vulnerabilities were researched online, and a <a href="https://www.exploit-db.com/exploits/48411">local file inclusion (LFI)</a> vulnerability was tested.</p>
<p><img alt="LFI" src="/images/posts/bolt/image7.png"></p>
<center><em>Figure 7:</em> Local file inclusion</center>
<p>The <code>/etc/passwd</code> file could be examined due to the LFI, revealing a potential user, <code>jeanpaul</code>.</p>
<p>Simultaneously, port 2049 (NFS) was enumerated. Using the <code>showmount -e</code> command revealed that the <code>/srv/nfs</code> directory was shared with specific IP ranges.</p>
<p>A local directory <code>/mnt/dev</code> was created as a mount point. The shared NFS resource <code>/srv/nfs</code> was then mounted onto this directory using the <code>mount</code> command. Navigating to <code>/mnt/dev</code> revealed a file named <code>save.zip</code>.</p>
<p><img alt="NFS Enumeration" src="/images/posts/bolt/image8.png"></p>
<center><em>Figure 8:</em> NFS Enumeration</center>
<p>The zip file was password-protected, so the <code>fcrackzip</code> tool was used with a password dictionary (<code>rockyou.txt</code>) to attempt to crack the password for <code>save.zip</code>. The command succeeded, revealing the password <code>java101</code>.</p>
<p>Next, <code>save.zip</code> was unzipped using <code>sudo unzip</code>, and the discovered password was entered. This extracted three files: <code>flag1.txt</code>, <code>id_rsa</code>, and <code>todo.txt</code>.</p>
<p>The <code>flag1.txt</code> file contained a hash string, while <code>todo.txt</code> included instructions related to site management and a recommendation to continue programming in Java. This file was signed by <code>jp</code>, which could refer to the previously identified user <code>jeanpaul</code>.</p>
<p>As a result, the <code>id_rsa</code> file was used to connect to the machine as the user <code>jeanpaul</code>, using the credentials found so far.</p>
<p><img alt="Zip File Crack" src="/images/posts/bolt/image9.png"></p>
<center><em>Figure 9:</em> Zip file crack</center>
<p>The password previously found in the configuration file was indeed correct for user <code>jeanpaul</code>. Once inside the machine, privilege escalation was attempted.</p>
<p><img alt="Log in" src="/images/posts/bolt/image10.png"></p>
<center><em>Figure 10:</em> Log in as user jeanpaul</center>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>Using the command <code>sudo -l</code>, it was observed that the current user could run the <code>zip</code> command as root without a password. A privilege escalation technique from <a href="https://gtfobins.github.io/gtfobins/zip/#sudo">GTFObins</a> was used, providing methods to exploit binaries with special sudo permissions. In this case, the <code>zip</code> binary was used to execute commands with elevated privileges.</p>
<p>The process began by creating a temporary file using the command <code>TF=$(mktemp -u)</code>, which generated a unique file name without physically creating the file, storing it in the <code>TF</code> variable. Then, <code>zip</code> was executed with superuser privileges using the command <code>sudo zip $TF /etc/hosts -T -TT 'sh #'</code>. Here, <code>zip</code> was configured to execute the <code>sh</code> command interpreter, using <code>/etc/hosts</code> as a dummy file to meet the binary&rsquo;s requirements. The <code>-T</code> and <code>-TT</code> options allowed <code>sh</code> to run with elevated privileges. Finally, the temporary file was deleted with <code>sudo rm $TF</code> to clear any traces of the attack. This sequence allowed root access to the machine.</p>
<p><img alt="Root Escalation" src="/images/posts/bolt/image11.png"></p>
<center><em>Figure 11:</em> Root escalation</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>nmap</td>
          <td>Used for network scanning and detecting open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td>fcrackzip</td>
          <td>Tool used to perform a brute-force attack on zip files.</td>
      </tr>
      <tr>
          <td>wfuzz</td>
          <td>Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td>GTFObins</td>
          <td>Online resource that provided the method for privilege escalation using the <code>zip</code> binary with sudo permissions.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>The security assessment on the Bolt machine revealed critical vulnerabilities that allowed full system access, from credential extraction to privilege escalation to root. These issues stemmed mainly from misconfigurations, exposure of sensitive information, and lack of security updates. Although these vulnerabilities were successfully exploited, implementing the suggested recommendations can mitigate similar risks in the future and strengthen the machine&rsquo;s overall security.</p>
<h2 id="recommendations">Recommendations</h2>
<p>It is recommended to update and patch the server software and applications, such as Bolt CMS, to protect against known vulnerabilities. Restrict access to sensitive information by disabling or limiting system information pages like <code>phpinfo()</code> that expose critical details to potential attackers. Secure files and configurations by storing credentials securely and encrypted, and implement access policies that limit the visibility of sensitive files like <code>config.yml</code>. Strengthen NFS configurations to restrict access to shared resources through stricter settings, ensuring only authorized users can access them. Review sudo permissions to prevent users from running potentially exploitable binaries, such as <code>zip</code> in this case, with root privileges. Improve SSH key management by implementing measures to protect private keys and restricting SSH access to trusted users.</p>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Academy Machine</title>
      <link>https://gtello.github.io/writeups/academy/</link>
      <pubDate>Thu, 24 Oct 2024 21:22:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/academy/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format on a penetration test conducted on a Debian 10 machine called Academy, which in this case was renamed to Monkey.
<h2 id="executive-summary">Executive Summary</h2>
<p>A security analysis was performed on the Monkey machine (Debian 10). Several vulnerabilities were identified, starting with a misconfigured FTP service allowing anonymous login, which facilitated access to critical information, such as credentials and a password hash. Through brute force on web directories and an unrestricted file upload attack, unauthorized access to the server was achieved. Subsequently, access was escalated to an administrator user by modifying a bash script that ran with elevated privileges.</p>
<p>This allowed total control of the server and access to confidential information. Multiple configuration and access control issues were detected that need to be corrected to improve the security of the machine and its services.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was conducted using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image1.png" alt="nmap result" />
</div>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Debian 10</td>
          <td>192.168.138.128</td>
          <td>21 (FTP), 22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>The nmap scan showed that the FTP service on port 21 allowed anonymous login, so that was performed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image2.png" alt="ftp login" />
</div>
<center><em>Figure 2:</em> FTP login as anonymous user</center>
<p>An FTP connection was made through the <code>anonymous</code> account, which allowed access to a note left on the server.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image3.png" alt="developer note" />
</div>
<center><em>Figure 3:</em> Developer's note</center>
<p>It was observed that the developer left a note on the FTP server mentioning that they had to resort to using a SQL statement to create a new user for the academyâs website. The value in the <code>password</code> field was an MD5 hash, so we proceeded to crack the hash with hashcat.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image4.png" alt="hashcat result 1" />
    <img src="/images/posts/academy/image4_1.png" alt="hashcat result 2" />
</div>
<center><em>Figure 4:</em> hashcat result</center>
<p>The hash crack was successful, revealing that the password for the <code>HackerMentor</code> user is <code>junior01</code>. To proceed, the open port 80, suggesting a webpage was serving content from the machine, was analyzed.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image5.png" alt="apache web server" />
</div>
<center><em>Figure 5:</em> Apache Web Server service</center>
<p>The default Apache webpage was found, confirming that this machine is hosting a web service. Brute force was performed on web directories.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image6.png" alt="wfuzz" />
</div>
<center><em>Figure 6:</em> Brute force on web directories with wfuzz</center>
<p>The web directories <code>/phpmyadmin</code> and <code>/monkey</code> were discovered.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image7.png" alt="academy portal" />
</div>
<center><em>Figure 7:</em> Academy login portal</center>
<p>The credentials discovered earlier were used, and login to the Monkey portal was achieved. Detailed inspection of this webpage revealed a student enrollment section allowing image uploads. An attack called <a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">Unrestricted File Upload</a> was attempted to try executing PHP code on the web server and achieve a reverse shell.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image8.png" alt="php code" />
</div>
<center><em>Figure 8:</em> PHP code for reverse shell</center>
<p>This .php file was uploaded to the server, and as a test image upload had previously been performed, it was found that images are stored at <code>http://192.168.138.128/monkey/studentphoto/image.jpg</code>. Once the image was uploaded, the code was executed, and a connection with netcat on port 1234 was opened.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image9.png" alt="reverse shell connection" />
</div>
<center><em>Figure 9:</em> Reverse shell connection established</center>
<p>The exploit worked correctly, gaining access to the server as user <code>www-data</code>. To escalate privileges, the script <a href="https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS">LINpeas.sh</a> was used. For file transfer to the server, a basic HTTP server was set up with Python using the command <code>python3 -m http.server 80</code> to download the file from the server. The script was run to discover privilege escalation paths with the following findings.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image10.png" alt="mysql password" />
</div>
<center><em>Figure 10:</em> Plaintext password of MySQL database</center>
<p>Once the password was found, it was tried in conjunction with the known user on the academyâs web portal to connect to that user via SSH.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image11.png" alt="ssh session" />
</div>
<center><em>Figure 11:</em> SSH connection to hackermentor user</center>
<p>A flag and a bash script named <code>backup.sh</code> that backs up the academy&rsquo;s website files were found. The <code>ls -l</code> command shows that this script runs as an administrator user. Checking with <code>crontab</code> and <code>systemd</code>, it was not possible to determine if this script is automated, so <a href="https://github.com/DominicBreuker/pspy">pspy</a> was used for confirmation. This program monitors Linux processes without needing root permissions.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image12.png" alt="process monitoring" />
</div>
<center><em>Figure 12:</em> Process monitoring with pspy showing script execution</center>
<p>The script was observed running as the root user. Since the <code>hackermentor</code> user has permissions to edit this file, the script was modified to execute a reverse shell, and as it runs as root, root access to the machine was obtained through this.</p>
<div style="text-align: center;">
  <img src="/images/posts/academy/image13.png" alt="backup.sh modified" />
</div>
<center><em>Figure 13:</em> Modified backup.sh</center>
<pre>

</pre>
<div style="text-align: center;">
  <img src="/images/posts/academy/image14.png" alt="root connection" />
</div>
<center><em>Figure 14:</em> Root user connection</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Nmap</td>
          <td>Used for network scanning and detection of open ports and services on the target machine.</td>
      </tr>
      <tr>
          <td>hashcat</td>
          <td>Used to crack the MD5 hash obtained from the FTP server.</td>
      </tr>
      <tr>
          <td>wfuzz</td>
          <td>Used for brute-forcing web directories, discovering sensitive paths.</td>
      </tr>
      <tr>
          <td>pspy</td>
          <td>Program used to monitor processes on Linux without needing root permissions.</td>
      </tr>
      <tr>
          <td>LinPEAS</td>
          <td>Script used to identify potential privilege escalation paths on the server.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>During this security analysis, several critical vulnerabilities were found on the Monkey machine. Initial access was gained through a misconfigured FTP service allowing anonymous logins, which gave access to sensitive files. User credentials were then discovered, allowing access to the web and remote code execution on the server. Lack of restrictions on file uploads and an elevated permissions script without proper protections enabled privilege escalation, leading to root access. The combination of poor permission management, insecure configurations, and the lack of robust authentication controls allowed the system to be fully compromised.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate these vulnerabilities, anonymous login on the FTP service must be disabled. Ensure passwords are never stored in plaintext and that hashes use stronger algorithms.
Regarding privilege escalation, review and restrict user permissions on critical scripts like <code>backup.sh</code>, preventing non-privileged users from modifying them. It is also recommended to perform continuous system monitoring with tools like pspy to detect anomalous activities in processes.</p>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
